2024-05-03 16:39:15,081 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.630', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901', 'model_offset': '0.00000'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.63, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-03 16:39:15,087 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-03 16:39:15,089 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-03 16:39:15,089 [printer.py:reinit()] - # Extruders: 1
2024-05-03 16:39:15,089 [printer.py:reinit()] - # Temperature devices: 3
2024-05-03 16:39:15,090 [printer.py:reinit()] - # Fans: 5
2024-05-03 16:39:15,090 [printer.py:reinit()] - # Output pins: 1
2024-05-03 16:39:15,090 [printer.py:reinit()] - # Leds: 2
2024-05-03 16:39:15,091 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-03 16:39:15,104 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-05-03 16:39:15,104 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-05-03 16:39:15,104 [functions.py:log_start()] - Python version: 3.11
2024-05-03 16:39:15,114 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-03 16:39:15,122 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-03 16:39:15,397 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-03 16:39:15,397 [screen.py:init_klipper()] - Printer initialized
2024-05-03 16:39:15,398 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-05-03 16:39:15,398 [printer.py:change_state()] - Adding callback for state: ready
2024-05-03 16:39:15,399 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-03 16:39:15,413 [screen.py:_load_panel()] - Loading panel: main_menu
2024-05-03 16:39:15,579 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-03 16:39:15,606 [main_menu.py:add_device()] - Adding device: extruder
2024-05-03 16:39:15,624 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-03 16:39:15,640 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-03 16:39:15,653 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-03 16:39:15,720 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-03 16:39:15,722 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-03 16:39:15,748 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-03 16:39:20,887 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-03 16:39:20,901 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:21:43,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:21:43,101 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:21:44,149 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:21:48,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:21:48,101 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:21:53,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:21:53,100 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:21:58,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:21:58,100 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:02,413 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:22:03,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:03,100 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:06,640 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:22:08,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:08,114 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:13,094 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:13,121 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:18,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:18,116 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:23,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:23,101 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:28,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:28,113 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:33,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:33,115 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:38,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:38,117 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:43,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:43,102 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:48,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:48,117 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:50,024 [screen.py:_load_panel()] - Loading panel: move
2024-05-05 17:22:50,108 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-05-05 17:22:51,821 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-05-05 17:22:51,863 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > gcode_macros
2024-05-05 17:22:53,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:53,100 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:22:58,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:22:58,116 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:03,089 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:03,114 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:08,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:08,117 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:11,981 [screen.py:show_popup_message()] - echo: COME_TO_ME 
2024-05-05 17:23:11,993 [screen.py:_send_action()] - printer.gcode.script: {'script': 'COME_TO_ME'}
2024-05-05 17:23:13,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:13,101 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:15,195 [screen.py:show_popup_message()] - echo: Ready!
2024-05-05 17:23:18,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:18,114 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:23,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:23,114 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:28,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:28,114 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:33,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:33,125 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:38,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:38,101 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:43,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:43,119 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:48,088 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:48,113 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:53,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:53,112 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:23:58,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:23:58,118 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:03,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:03,117 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:08,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:08,118 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:13,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:13,113 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:18,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:18,119 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:23,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:23,122 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:28,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:28,114 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:33,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:33,119 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:38,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:38,109 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:43,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:43,119 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:48,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:48,116 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:53,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:53,117 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:24:58,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:24:58,117 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:25:03,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:25:03,117 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:25:08,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:25:08,116 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:25:13,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:25:13,116 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:25:18,087 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:25:18,116 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:25:39,148 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-05-05 17:25:39,149 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-05-05 17:25:39,149 [functions.py:log_start()] - Python version: 3.11
2024-05-05 17:25:39,274 [config.py:get_config_file_location()] - Passed config (-c): .
2024-05-05 17:25:39,275 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-05-05 17:25:39,291 [config.py:log_config()] -  ===== Config File =====

=======================
2024-05-05 17:25:39,292 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_asc

[graph Printer]
extruder = False
temperature_sensor chamber = False

=======================
2024-05-05 17:25:39,292 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-05-05 17:25:39,422 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-05-05 17:25:39,422 [config.py:install_language()] - Using lang en
2024-05-05 17:25:39,437 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-05-05 17:25:39,438 [screen.py:__init__()] - Wayland: False Display name: :0
2024-05-05 17:25:39,439 [screen.py:__init__()] - Screen resolution: 800x480
2024-05-05 17:25:39,442 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-05-05 17:25:40,440 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-05-05 17:25:40,441 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-05-05 17:25:40,452 [screen.py:initial_connection()] - Default printer: None
2024-05-05 17:25:40,497 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-05-05 17:25:40,498 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-05-05 17:25:40,585 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 17:25:40,600 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 17:25:40,600 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 17:25:40,627 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-05-05 17:25:51,017 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 17:25:51,018 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 17:25:51,045 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-05-05 17:25:51,066 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-05-05 17:25:51,086 [_logging.py:info()] - Websocket connected
2024-05-05 17:25:51,086 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-05-05 17:25:51,088 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 17:25:51,108 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 17:25:51,123 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 17:25:51,123 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-330-gb631ec4', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 17:25:51,124 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 17:25:51,139 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 17:25:51,217 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.630', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901', 'model_offset': '0.00000'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.63, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 17:25:51,222 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 17:25:51,223 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-05 17:25:51,223 [printer.py:reinit()] - # Extruders: 1
2024-05-05 17:25:51,224 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 17:25:51,224 [printer.py:reinit()] - # Fans: 5
2024-05-05 17:25:51,224 [printer.py:reinit()] - # Output pins: 1
2024-05-05 17:25:51,224 [printer.py:reinit()] - # Leds: 2
2024-05-05 17:25:51,224 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 17:25:51,248 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 17:25:51,254 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 17:25:51,536 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 17:25:51,537 [screen.py:init_klipper()] - Printer initialized
2024-05-05 17:25:51,537 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-05-05 17:25:51,537 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 17:25:51,542 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 17:25:51,546 [screen.py:_load_panel()] - Loading panel: main_menu
2024-05-05 17:25:51,701 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 17:25:51,725 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 17:25:51,736 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 17:25:51,750 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 17:25:51,763 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 17:25:51,844 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 17:25:51,846 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:25:51,875 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:25:57,016 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:25:57,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:32:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:32:46,429 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:32:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:32:51,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:32:54,284 [screen.py:_load_panel()] - Loading panel: shutdown
2024-05-05 17:32:54,321 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > shutdown
2024-05-05 17:32:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:32:56,417 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:01,428 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:06,427 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:11,416 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:16,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:20,007 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:33:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:21,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:26,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:31,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:36,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:41,416 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:46,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:46,417 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:46,457 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:33:50,676 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:33:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:51,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:33:55,787 [screen.py:_menu_go_back()] - #### Menu go back
2024-05-05 17:33:55,850 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 17:33:56,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:33:56,417 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:01,408 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:01,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:06,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:06,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:11,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:16,416 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:21,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:26,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:26,417 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:31,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:36,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:41,426 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:44,316 [screen.py:show_popup_message()] - echo: Clean Nozzle requested
2024-05-05 17:34:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:46,416 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:51,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:51,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:34:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:34:56,417 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:01,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:06,416 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:11,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:16,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:18,340 [screen.py:show_popup_message()] - echo: Target temp reached!
2024-05-05 17:35:21,409 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:21,423 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:26,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:31,416 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:36,429 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:41,429 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:46,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:51,417 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:35:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:35:56,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:01,416 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:06,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:11,429 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:12,731 [screen.py:show_popup_message()] - echo: Nozzle cleaning finished!
2024-05-05 17:36:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:16,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:21,428 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:21,988 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:36:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:26,417 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:31,427 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:35,225 [screen.py:_load_panel()] - Loading panel: move
2024-05-05 17:36:35,353 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-05-05 17:36:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:36,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:40,211 [move.py:change_distance()] - ### Distance 5
2024-05-05 17:36:40,938 [move.py:change_distance()] - ### Distance 10
2024-05-05 17:36:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:41,417 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:41,811 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-10 F600'}
2024-05-05 17:36:41,813 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:36:43,855 [move.py:change_distance()] - ### Distance 5
2024-05-05 17:36:44,503 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-5 F600'}
2024-05-05 17:36:44,504 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:36:46,405 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:46,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:46,779 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-5 F600'}
2024-05-05 17:36:46,781 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:36:48,568 [move.py:change_distance()] - ### Distance 1
2024-05-05 17:36:49,227 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-05-05 17:36:49,229 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:36:50,699 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-05-05 17:36:50,701 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:36:51,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:51,427 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:52,755 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-05-05 17:36:52,756 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:36:56,223 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-05-05 17:36:56,225 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:36:56,406 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:36:56,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:36:59,612 [move.py:change_distance()] - ### Distance .5
2024-05-05 17:37:00,216 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.5 F600'}
2024-05-05 17:37:00,218 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:37:01,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:01,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:05,419 [move.py:change_distance()] - ### Distance .1
2024-05-05 17:37:05,981 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-05-05 17:37:05,983 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:37:06,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:06,425 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:08,181 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-05-05 17:37:08,183 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:37:10,171 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-05-05 17:37:10,173 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:37:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:11,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:16,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:18,607 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-05-05 17:37:18,609 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:37:20,984 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-05-05 17:37:20,986 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:37:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:21,427 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:22,999 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+.1 F600'}
2024-05-05 17:37:23,003 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:37:25,043 [move.py:change_distance()] - ### Distance 25
2024-05-05 17:37:25,995 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-05-05 17:37:25,997 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 17:37:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:26,429 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:30,111 [screen.py:_load_panel()] - Loading panel: menu
2024-05-05 17:37:30,251 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-05-05 17:37:30,268 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-05-05 17:37:31,279 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-05-05 17:37:31,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:31,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:36,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:36,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:41,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:41,429 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:46,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:48,976 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:37:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:51,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:53,383 [screen.py:_menu_go_back()] - #### Menu go back
2024-05-05 17:37:53,442 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-05-05 17:37:54,759 [screen.py:_menu_go_back()] - #### Menu go back
2024-05-05 17:37:54,794 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 17:37:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:37:56,417 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:37:58,975 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-05-05 17:37:58,975 [screen.py:_go_to_submenu()] - #### Menu __main
2024-05-05 17:37:58,981 [screen.py:_load_panel()] - Loading panel: menu
2024-05-05 17:37:59,236 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-05-05 17:37:59,248 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-05-05 17:37:59,254 [menu.py:arrangeMenuItems()] - X > more retraction
2024-05-05 17:37:59,263 [menu.py:arrangeMenuItems()] - X > more power
2024-05-05 17:37:59,272 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-05-05 17:38:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:01,417 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:38:02,748 [screen.py:_load_panel()] - Loading panel: fan
2024-05-05 17:38:02,753 [fan.py:add_fan()] - Adding fan: fan
2024-05-05 17:38:02,765 [fan.py:add_fan()] - Adding fan: fan_generic BedFans
2024-05-05 17:38:02,775 [fan.py:add_fan()] - Adding fan: heater_fan hotend_fan
2024-05-05 17:38:02,785 [fan.py:add_fan()] - Adding fan: heater_fan controller_fan
2024-05-05 17:38:02,794 [fan.py:add_fan()] - Adding fan: heater_fan exhaust_fan
2024-05-05 17:38:02,828 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > fan
2024-05-05 17:38:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:06,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:38:07,355 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S178
2024-05-05 17:38:09,687 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S0
2024-05-05 17:38:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:11,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:38:12,123 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FAN_SPEED FAN=BedFans SPEED=0.77
2024-05-05 17:38:13,580 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FAN_SPEED FAN=BedFans SPEED=1.0
2024-05-05 17:38:15,047 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FAN_SPEED FAN=BedFans SPEED=1.0
2024-05-05 17:38:16,405 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:16,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:38:16,763 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FAN_SPEED FAN=BedFans SPEED=0.0
2024-05-05 17:38:21,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:21,417 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:38:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:26,440 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:38:28,020 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FAN_SPEED FAN=BedFans SPEED=0.0
2024-05-05 17:38:28,836 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FAN_SPEED FAN=BedFans SPEED=0.0
2024-05-05 17:38:29,700 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FAN_SPEED FAN=BedFans SPEED=1.0
2024-05-05 17:38:31,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:31,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:38:31,652 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FAN_SPEED FAN=BedFans SPEED=0.0
2024-05-05 17:38:33,528 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S255
2024-05-05 17:38:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:36,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:38:36,692 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S0
2024-05-05 17:38:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:41,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:38:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:46,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:38:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:51,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:38:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:38:56,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:01,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:06,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:11,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:16,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:21,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:26,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:31,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:36,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:41,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:46,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:51,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:39:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:39:56,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:01,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:06,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:11,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:11,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:16,446 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:21,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:26,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:26,439 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:31,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:31,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:36,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:41,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:46,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:51,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:51,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:40:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:40:56,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:01,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:01,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:06,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:08,694 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-05-05 17:41:08,694 [printer.py:change_state()] - Adding callback for state: disconnected
2024-05-05 17:41:08,694 [screen.py:state_disconnected()] - ### Going to disconnected
2024-05-05 17:41:08,695 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 17:41:08,697 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 17:41:08,760 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 17:41:11,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:11,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:12,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 17:41:12,409 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 17:41:12,415 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 17:41:12,416 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-330-gb631ec4', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 17:41:12,416 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 17:41:12,422 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 17:41:12,445 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': '\n{% if printer.quad_gantry_level.applied == False %}\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nM118 "Do extra QGL"\n_QUAD_GANTRY_LEVEL {% for p in params\t%}{\'%s=%s \' % (p, params[p])}{%\tendfor %}\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.630', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901', 'model_offset': '0.00000'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': '\n{% if printer.quad_gantry_level.applied == False %}\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nM118 "Do extra QGL"\n_QUAD_GANTRY_LEVEL {% for p in params\t%}{\'%s=%s \' % (p, params[p])}{%\tendfor %}\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}', 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.63, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 17:41:12,449 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 17:41:12,450 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-05 17:41:12,450 [printer.py:reinit()] - # Extruders: 1
2024-05-05 17:41:12,451 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 17:41:12,451 [printer.py:reinit()] - # Fans: 5
2024-05-05 17:41:12,451 [printer.py:reinit()] - # Output pins: 1
2024-05-05 17:41:12,451 [printer.py:reinit()] - # Leds: 2
2024-05-05 17:41:12,451 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 17:41:12,461 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 17:41:12,462 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 17:41:12,740 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 17:41:12,740 [screen.py:init_klipper()] - Printer initialized
2024-05-05 17:41:12,740 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-05-05 17:41:12,740 [printer.py:change_state()] - Adding callback for state: startup
2024-05-05 17:41:14,692 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-05-05 17:41:14,692 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 17:41:14,693 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 17:41:14,695 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 17:41:14,759 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 17:41:14,774 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 17:41:14,779 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 17:41:14,784 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 17:41:14,789 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 17:41:14,827 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 17:41:14,828 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:14,844 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:16,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:20,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:21,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:25,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:26,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:30,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:31,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:34,454 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:41:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:35,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:36,423 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:40,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:40,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:41,423 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:45,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:45,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:46,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:50,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:50,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:51,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:52,022 [screen.py:show_popup_message()] - echo: "Do extra QGL"
2024-05-05 17:41:55,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:55,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:41:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:41:56,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:00,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:01,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:05,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:06,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:08,689 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:42:10,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:10,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:11,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:12,903 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:42:15,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:15,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:16,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:20,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:21,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:21,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:25,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:26,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:30,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:31,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:35,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:36,440 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:40,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:40,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:40,461 [screen.py:show_popup_message()] - error: // Unknown command:"QGL"
2024-05-05 17:42:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:41,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:45,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:45,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:46,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:50,406 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:50,441 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:51,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:55,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:55,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:42:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:42:56,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:00,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:01,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:05,440 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:06,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:10,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:10,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:11,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:15,404 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:15,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:16,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:20,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:21,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:25,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:26,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:30,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:31,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:35,439 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:36,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:40,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:40,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:41,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:45,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:45,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:46,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:50,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:50,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:51,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:55,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:55,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:43:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:43:56,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:00,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:01,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:05,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:06,113 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-05-05 17:44:06,113 [printer.py:change_state()] - Adding callback for state: disconnected
2024-05-05 17:44:06,114 [screen.py:state_disconnected()] - ### Going to disconnected
2024-05-05 17:44:06,114 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 17:44:06,117 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 17:44:06,167 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 17:44:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:06,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:09,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 17:44:09,411 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 17:44:09,421 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 17:44:09,422 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-330-gb631ec4', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 17:44:09,422 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 17:44:09,565 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 17:44:09,609 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': '\n{% if printer.quad_gantry_level.applied == False %}\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nM118 "Do extra QGL"\n_QUAD_GANTRY_LEVEL {% for p in params\t%}{\'%s=%s \' % (p, params[p])}{%\tendfor %}\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}'}, 'gcode_macro QGL': {'gcode': '\nM118 "Do extra QGL"\n_QUAD_GANTRY_LEVEL {% for p in params\t%}{\'%s=%s \' % (p, params[p])}{%\tendfor %}'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.630', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901', 'model_offset': '0.00000'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': '\n{% if printer.quad_gantry_level.applied == False %}\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nM118 "Do extra QGL"\n_QUAD_GANTRY_LEVEL {% for p in params\t%}{\'%s=%s \' % (p, params[p])}{%\tendfor %}\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}', 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'gcode_macro qgl': {'gcode': '\nM118 "Do extra QGL"\n_QUAD_GANTRY_LEVEL {% for p in params\t%}{\'%s=%s \' % (p, params[p])}{%\tendfor %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.63, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 17:44:09,614 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 17:44:09,615 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-05 17:44:09,615 [printer.py:reinit()] - # Extruders: 1
2024-05-05 17:44:09,615 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 17:44:09,615 [printer.py:reinit()] - # Fans: 5
2024-05-05 17:44:09,615 [printer.py:reinit()] - # Output pins: 1
2024-05-05 17:44:09,616 [printer.py:reinit()] - # Leds: 2
2024-05-05 17:44:09,616 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 17:44:09,627 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 17:44:09,629 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 17:44:09,906 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 17:44:09,906 [screen.py:init_klipper()] - Printer initialized
2024-05-05 17:44:09,907 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-05-05 17:44:09,907 [printer.py:change_state()] - Adding callback for state: startup
2024-05-05 17:44:10,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:10,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:11,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:11,852 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-05-05 17:44:11,852 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 17:44:11,853 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 17:44:11,855 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 17:44:11,919 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 17:44:11,933 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 17:44:11,938 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 17:44:11,944 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 17:44:11,949 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 17:44:11,985 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 17:44:15,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:15,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:16,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:16,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:20,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:21,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:25,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:26,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:30,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:31,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:31,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:31,763 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:44:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:35,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:36,423 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:40,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:40,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:41,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:45,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:45,424 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:46,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:49,331 [screen.py:show_popup_message()] - echo: "Do extra QGL"
2024-05-05 17:44:50,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:50,424 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:51,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:55,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:55,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:44:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:44:56,424 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:00,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:01,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:05,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:05,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:05,990 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:45:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:06,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:10,208 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:45:10,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:10,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:11,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:11,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:15,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:15,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:16,429 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:20,405 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:20,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:21,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:21,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:25,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:26,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:30,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:31,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:35,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:36,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:40,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:40,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:41,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:45,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:45,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:46,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:50,409 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:50,425 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:51,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:51,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:55,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:55,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:45:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:45:56,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:00,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:01,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:05,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:06,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:07,121 [screen.py:show_popup_message()] - echo: "Do extra QGL"
2024-05-05 17:46:10,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:10,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:11,423 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:15,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:15,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:16,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:16,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:20,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:21,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:25,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:26,411 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:26,446 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:30,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:31,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:35,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:36,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:40,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:40,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:41,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:45,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:45,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:46,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:50,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:50,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:51,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:55,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:55,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:46:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:46:56,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:00,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:01,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:05,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:06,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:10,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:10,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:11,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:15,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:15,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:16,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:20,406 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:20,424 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:21,407 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:21,427 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:25,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:26,423 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:30,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:31,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:35,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:36,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:40,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:40,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:41,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:41,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:45,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:45,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:46,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:50,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:50,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:51,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:51,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:55,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:55,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:47:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:47:56,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:00,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:01,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:01,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:05,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:06,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:10,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:10,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:11,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:15,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:15,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:16,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:20,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:21,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:25,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:26,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:26,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:30,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:31,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:35,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:35,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:36,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:40,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:40,443 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:41,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:45,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:45,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:46,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:50,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:50,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:51,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:55,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:55,443 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:48:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:48:56,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:00,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:01,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:05,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:06,439 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:10,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:10,440 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:11,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:15,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:15,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:16,440 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:20,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:21,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:25,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:26,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:30,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:31,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:35,439 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:36,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:40,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:40,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:41,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:45,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:45,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:46,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:50,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:50,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:51,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:55,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:55,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:49:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:49:56,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:00,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:01,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:05,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:06,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:10,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:10,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:11,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:15,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:15,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:16,404 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:16,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:20,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:21,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:25,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:26,444 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:30,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:31,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:35,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:36,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:40,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:40,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:41,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:45,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:45,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:46,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:50,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:50,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:51,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:55,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:55,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:50:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:50:56,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:00,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:01,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:01,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:03,467 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-05-05 17:51:03,467 [printer.py:change_state()] - Adding callback for state: disconnected
2024-05-05 17:51:03,469 [screen.py:state_disconnected()] - ### Going to disconnected
2024-05-05 17:51:03,469 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 17:51:03,474 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 17:51:03,536 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 17:51:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:05,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:06,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:06,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:06,419 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 17:51:06,424 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 17:51:06,430 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 17:51:06,431 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-330-gb631ec4', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 17:51:06,431 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 17:51:06,438 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 17:51:06,461 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.630', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '30', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901', 'model_offset': '0.00000'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.63, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '30', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 17:51:06,465 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 17:51:06,466 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-05 17:51:06,466 [printer.py:reinit()] - # Extruders: 1
2024-05-05 17:51:06,466 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 17:51:06,466 [printer.py:reinit()] - # Fans: 5
2024-05-05 17:51:06,466 [printer.py:reinit()] - # Output pins: 1
2024-05-05 17:51:06,467 [printer.py:reinit()] - # Leds: 2
2024-05-05 17:51:06,467 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 17:51:06,478 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 17:51:06,479 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 17:51:06,990 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 17:51:06,991 [screen.py:init_klipper()] - Printer initialized
2024-05-05 17:51:06,991 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-05-05 17:51:06,991 [printer.py:change_state()] - Adding callback for state: startup
2024-05-05 17:51:09,185 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-05-05 17:51:09,185 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 17:51:09,186 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 17:51:09,189 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 17:51:09,258 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 17:51:09,272 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 17:51:09,277 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 17:51:09,282 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 17:51:09,287 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 17:51:09,323 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 17:51:09,323 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:09,341 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:10,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:10,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:11,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:11,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:14,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:14,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:15,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:15,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:16,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:19,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:19,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:20,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:21,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:24,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:24,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:25,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:26,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:27,342 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:51:29,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:29,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:30,424 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:31,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:31,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:34,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:34,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:35,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:36,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:39,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:39,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:40,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:40,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:41,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:44,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:44,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:44,901 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:51:45,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:45,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:46,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:49,039 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 17:51:49,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:49,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:50,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:50,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:51,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:51,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:54,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:54,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:55,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:55,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:56,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:56,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:51:59,406 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:51:59,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:00,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:01,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:01,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:03,996 [screen.py:_load_panel()] - Loading panel: temperature
2024-05-05 17:52:04,010 [temperature.py:add_device()] - Adding device: extruder
2024-05-05 17:52:04,015 [temperature.py:add_device()] - Adding device: heater_bed
2024-05-05 17:52:04,021 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 17:52:04,025 [temperature.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 17:52:04,031 [temperature.py:select_heater()] - Selecting extruder
2024-05-05 17:52:04,032 [temperature.py:select_heater()] - Selecting heater_bed
2024-05-05 17:52:04,071 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-05-05 17:52:04,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:04,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:05,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:06,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:06,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:08,987 [temperature.py:select_heater()] - Deselecting heater_bed
2024-05-05 17:52:09,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:09,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:09,951 [temperature.py:select_heater()] - Selecting heater_bed
2024-05-05 17:52:10,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:10,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:11,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:14,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:14,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:15,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:15,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:16,359 [temperature.py:verify_max_temp()] - 31/125
2024-05-05 17:52:16,359 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S31
2024-05-05 17:52:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:16,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:19,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:19,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:20,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:21,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:21,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:24,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:24,439 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:25,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:25,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:26,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:26,440 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:29,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:29,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:30,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:31,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:31,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:33,935 [temperature.py:verify_max_temp()] - 0/125
2024-05-05 17:52:33,935 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S0
2024-05-05 17:52:34,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:34,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:35,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:36,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:39,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:39,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:40,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:40,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:41,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:44,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:44,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:45,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:45,423 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:46,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:46,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:49,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:49,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:50,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:50,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:51,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:54,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:54,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:55,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:55,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:56,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:56,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:52:59,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:52:59,433 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:00,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:01,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:04,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:04,432 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:05,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:06,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:09,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:09,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:10,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:10,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:11,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:14,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:14,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:15,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:15,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:16,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:16,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:19,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:19,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:20,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:21,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:24,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:24,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:25,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:26,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:26,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:29,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:29,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:30,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:31,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:31,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:34,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:34,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:35,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:35,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:36,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:36,421 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:39,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:39,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:40,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:40,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:41,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:41,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:44,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:44,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:45,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:45,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:46,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:46,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:49,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:49,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:50,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:50,440 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:51,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:51,437 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:54,406 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:54,438 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:55,408 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:55,446 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:56,409 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:56,442 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:53:59,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:53:59,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:00,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:00,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:01,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:01,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:04,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:04,440 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:05,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:05,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:06,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:06,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:09,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:09,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:10,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:10,434 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:11,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:11,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:14,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:14,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:15,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:15,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:16,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:16,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:19,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:19,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:20,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:20,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:21,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:21,422 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:24,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:24,439 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:25,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:25,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:26,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:26,418 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:29,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:29,420 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:30,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:30,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:31,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:31,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             2024-05-05 17:53:58,231 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-05-05 17:53:58,232 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-05-05 17:53:58,232 [functions.py:log_start()] - Python version: 3.11
2024-05-05 17:53:58,428 [config.py:get_config_file_location()] - Passed config (-c): .
2024-05-05 17:53:58,428 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-05-05 17:53:58,448 [config.py:log_config()] -  ===== Config File =====

=======================
2024-05-05 17:53:58,449 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_asc

[graph Printer]
extruder = False
temperature_sensor chamber = False

=======================
2024-05-05 17:53:58,450 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-05-05 17:53:58,613 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-05-05 17:53:58,613 [config.py:install_language()] - Using lang en
2024-05-05 17:53:58,643 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-05-05 17:53:58,644 [screen.py:__init__()] - Wayland: False Display name: :0
2024-05-05 17:53:58,647 [screen.py:__init__()] - Screen resolution: 800x480
2024-05-05 17:53:58,653 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-05-05 17:54:00,317 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-05-05 17:54:00,318 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-05-05 17:54:00,326 [screen.py:initial_connection()] - Default printer: None
2024-05-05 17:54:00,367 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-05-05 17:54:00,367 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-05-05 17:54:00,457 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 17:54:00,467 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 17:54:00,468 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 17:54:00,481 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-05-05 17:54:10,406 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 17:54:10,406 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 17:54:10,414 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-05-05 17:54:10,421 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-05-05 17:54:10,427 [_logging.py:info()] - Websocket connected
2024-05-05 17:54:10,427 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-05-05 17:54:10,428 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 17:54:10,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 17:54:10,441 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 17:54:10,441 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-330-gb631ec4', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 17:54:10,441 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 17:54:10,449 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 17:54:10,627 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.630', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '30', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901', 'model_offset': '0.00000'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.63, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '30', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 17:54:10,631 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 17:54:10,632 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-05 17:54:10,632 [printer.py:reinit()] - # Extruders: 1
2024-05-05 17:54:10,632 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 17:54:10,632 [printer.py:reinit()] - # Fans: 5
2024-05-05 17:54:10,632 [printer.py:reinit()] - # Output pins: 1
2024-05-05 17:54:10,632 [printer.py:reinit()] - # Leds: 2
2024-05-05 17:54:10,632 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 17:54:10,647 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 17:54:10,649 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 17:54:10,924 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 17:54:10,924 [screen.py:init_klipper()] - Printer initialized
2024-05-05 17:54:10,924 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-05-05 17:54:10,924 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 17:54:10,925 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 17:54:10,928 [screen.py:_load_panel()] - Loading panel: main_menu
2024-05-05 17:54:11,013 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 17:54:11,030 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 17:54:11,038 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 17:54:11,044 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 17:54:11,050 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 17:54:11,089 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 17:54:11,090 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:11,104 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 17:54:16,405 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 17:54:16,436 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:01:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:01:23,022 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:01:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:01:28,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:01:28,073 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:01:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:01:33,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:01:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:01:38,013 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:01:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:01:43,014 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:01:45,505 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:01:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:01:48,013 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:01:49,655 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:01:53,005 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:01:53,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:01:56,824 [main_menu.py:toggle_visibility()] - Graph show False: heater_bed
2024-05-05 18:01:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:01:58,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:00,763 [main_menu.py:verify_max_temp()] - 32/125
2024-05-05 18:02:00,763 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S32
2024-05-05 18:02:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:03,013 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:07,432 [main_menu.py:verify_max_temp()] - 0/125
2024-05-05 18:02:07,432 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S0
2024-05-05 18:02:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:08,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:13,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:18,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:23,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:28,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:33,012 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:38,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:43,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:48,013 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:53,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:02:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:02:58,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:03,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:07,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:08,013 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:13,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:17,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:18,012 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:23,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:28,013 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:33,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:38,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:42,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:43,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:48,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:53,025 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:03:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:03:58,024 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:03,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:08,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:13,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:17,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:18,014 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:18,112 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:04:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:23,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:28,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:28,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:33,023 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:38,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:42,442 [screen.py:_load_panel()] - Loading panel: move
2024-05-05 18:04:42,582 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-05-05 18:04:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:43,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:44,455 [move.py:change_distance()] - ### Distance .1
2024-05-05 18:04:47,219 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-05-05 18:04:47,222 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 18:04:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:48,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:49,324 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-05-05 18:04:49,325 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 18:04:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:53,024 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:54,336 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-05-05 18:04:54,338 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 18:04:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:04:58,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:04:59,825 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+.1 F600'}
2024-05-05 18:04:59,828 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 18:05:02,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:03,025 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:05:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:08,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:05:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:13,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:05:14,375 [screen_panel.py:load_menu()] - loading menu options
2024-05-05 18:05:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:18,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:05:19,732 [screen_panel.py:unload_menu()] - self.menu: ['move_menu', 'options_menu']
2024-05-05 18:05:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:23,014 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:05:24,275 [screen.py:_menu_go_back()] - #### Menu go back
2024-05-05 18:05:24,307 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:05:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:28,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:05:31,052 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-05-05 18:05:31,052 [screen.py:_go_to_submenu()] - #### Menu __main
2024-05-05 18:05:31,061 [screen.py:_load_panel()] - Loading panel: menu
2024-05-05 18:05:31,317 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-05-05 18:05:31,329 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-05-05 18:05:31,335 [menu.py:arrangeMenuItems()] - X > more retraction
2024-05-05 18:05:31,345 [menu.py:arrangeMenuItems()] - X > more power
2024-05-05 18:05:31,355 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-05-05 18:05:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:33,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:05:33,272 [screen.py:_load_panel()] - Loading panel: zcalibrate
2024-05-05 18:05:33,279 [zcalibrate.py:__init__()] - Offset X:0.0 Y:0.0 Z:0.0
2024-05-05 18:05:33,300 [zcalibrate.py:set_functions()] - Mesh: {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}
2024-05-05 18:05:33,301 [zcalibrate.py:set_functions()] - Available functions for calibration: ['endstop', 'mesh']
2024-05-05 18:05:33,331 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > zcalibrate
2024-05-05 18:05:37,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:38,014 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:05:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:43,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:05:43,629 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_GCODE_OFFSET Z=0
2024-05-05 18:05:43,631 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: BED_MESH_CLEAR
2024-05-05 18:05:43,631 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_ENDSTOP_CALIBRATE
2024-05-05 18:05:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:48,025 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:05:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:53,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:05:53,308 [zcalibrate.py:change_distance()] - ### Distance .01
2024-05-05 18:05:56,123 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.01
2024-05-05 18:05:57,796 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.01
2024-05-05 18:05:57,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:05:58,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:00,018 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.01
2024-05-05 18:06:02,684 [zcalibrate.py:change_distance()] - ### Distance .1
2024-05-05 18:06:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:03,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:03,392 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.1
2024-05-05 18:06:07,568 [zcalibrate.py:change_distance()] - ### Distance .05
2024-05-05 18:06:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:08,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:08,296 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.05
2024-05-05 18:06:10,888 [zcalibrate.py:change_distance()] - ### Distance .01
2024-05-05 18:06:11,332 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.01
2024-05-05 18:06:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:13,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:13,281 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.01
2024-05-05 18:06:15,544 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.01
2024-05-05 18:06:17,808 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.01
2024-05-05 18:06:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:18,025 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:23,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:23,172 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.01
2024-05-05 18:06:26,500 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.01
2024-05-05 18:06:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:28,025 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:33,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:33,804 [zcalibrate.py:accept()] - Accepting Z position
2024-05-05 18:06:33,804 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: ACCEPT
2024-05-05 18:06:33,842 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-05-05 18:06:36,673 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-05-05 18:06:36,673 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SAVE_CONFIG'}
2024-05-05 18:06:36,824 [screen.py:show_popup_message()] - error: SAVE_CONFIG section 'stepper_z' option 'position_endstop' conflicts with included value
2024-05-05 18:06:37,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:38,014 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:43,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:48,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:53,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:06:56,449 [screen.py:_menu_go_back()] - #### Menu go back
2024-05-05 18:06:56,519 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-05-05 18:06:56,536 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-05-05 18:06:56,541 [menu.py:arrangeMenuItems()] - X > more retraction
2024-05-05 18:06:56,550 [menu.py:arrangeMenuItems()] - X > more power
2024-05-05 18:06:56,562 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-05-05 18:06:57,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:06:58,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:03,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:07,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:08,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:13,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:17,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:18,014 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:23,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:28,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:33,013 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:38,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:42,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:43,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:48,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:53,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:07:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:07:58,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:03,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:08,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:13,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:18,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:23,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:27,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:28,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:33,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:37,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:38,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:43,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:48,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:53,025 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:08:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:08:58,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:03,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:07,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:08,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:12,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:13,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:18,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:23,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:28,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:33,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:38,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:43,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:48,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:53,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:09:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:09:58,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:03,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:08,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:12,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:13,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:18,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:23,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:28,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:33,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:37,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:38,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:42,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:43,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:48,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:53,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:10:58,001 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:10:58,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:03,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:08,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:13,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:18,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:23,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:27,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:28,038 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:33,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:34,336 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-05-05 18:11:34,336 [printer.py:change_state()] - Adding callback for state: disconnected
2024-05-05 18:11:34,337 [screen.py:state_disconnected()] - ### Going to disconnected
2024-05-05 18:11:34,337 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:11:34,339 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:11:34,408 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 18:11:37,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:38,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:38,018 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:11:38,023 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 18:11:38,029 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 18:11:38,029 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-330-gb631ec4', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 18:11:38,029 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 18:11:38,036 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 18:11:38,060 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.536', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.536, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 18:11:38,065 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:11:38,066 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-05 18:11:38,066 [printer.py:reinit()] - # Extruders: 1
2024-05-05 18:11:38,066 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 18:11:38,066 [printer.py:reinit()] - # Fans: 5
2024-05-05 18:11:38,066 [printer.py:reinit()] - # Output pins: 1
2024-05-05 18:11:38,066 [printer.py:reinit()] - # Leds: 2
2024-05-05 18:11:38,066 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 18:11:38,078 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 18:11:38,079 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 18:11:38,352 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 18:11:38,352 [screen.py:init_klipper()] - Printer initialized
2024-05-05 18:11:38,352 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-05-05 18:11:38,352 [printer.py:change_state()] - Adding callback for state: startup
2024-05-05 18:11:40,052 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-05-05 18:11:40,052 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 18:11:40,052 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 18:11:40,055 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:11:40,118 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 18:11:40,132 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 18:11:40,137 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 18:11:40,142 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 18:11:40,147 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 18:11:40,182 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:11:40,183 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:40,200 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:42,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:43,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:45,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:48,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:50,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:50,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:53,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:55,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:57,469 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:11:57,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:11:58,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:11:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:00,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:02,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:03,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:05,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:08,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:08,020 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:10,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:12,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:13,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:14,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:15,019 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:15,021 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:12:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:18,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:19,148 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:12:19,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:20,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:23,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:25,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:28,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:29,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:30,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:33,005 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:33,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:34,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:35,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:38,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:40,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:43,039 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:45,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:48,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:50,019 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:53,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:55,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:12:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:12:58,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:00,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:00,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:03,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:05,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:08,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:09,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:10,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:13,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:15,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:17,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:18,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:20,019 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:23,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:25,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:28,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:30,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:33,025 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:35,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:37,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:38,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:39,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:40,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:42,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:43,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:45,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:48,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:49,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:50,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:53,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:54,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:55,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:13:58,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:13:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:00,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:03,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:05,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:07,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:08,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:10,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:13,001 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:13,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:15,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:18,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:20,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:23,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:25,002 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:25,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:28,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:30,038 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:33,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:35,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:38,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:40,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:43,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:45,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:48,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:50,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:53,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:54,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:55,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:14:58,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:14:59,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:00,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:02,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:03,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:05,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:07,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:08,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:10,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:12,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:13,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:15,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:18,020 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:20,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:23,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:25,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:28,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:30,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:33,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:34,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:35,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:37,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:38,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:40,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:43,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:45,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:48,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:50,004 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:50,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:53,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:55,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:57,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:15:58,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:15:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:00,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:03,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:05,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:08,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:10,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:12,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:13,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:15,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:18,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:20,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:23,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:25,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:28,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:30,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:33,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:34,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:35,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:38,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:40,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:42,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:43,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:44,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:45,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:48,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:50,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:53,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:55,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:16:58,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:16:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:00,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:03,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:04,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:05,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:08,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:10,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:12,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:13,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:14,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:15,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:18,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:20,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:23,001 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:23,021 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:25,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:27,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:28,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:30,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:33,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:35,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:38,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:40,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:43,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:44,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:45,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:48,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:50,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:53,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:55,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:17:58,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:17:59,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:00,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:03,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:05,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:07,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:08,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:10,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:12,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:13,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:15,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:18,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:20,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:23,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:25,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:28,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:30,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:33,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:35,038 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:38,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:39,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:40,014 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:43,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:45,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:48,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:49,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:50,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:53,004 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:53,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:55,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:18:58,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:18:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:00,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:02,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:03,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:05,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:08,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:10,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:13,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:14,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:15,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:18,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:19,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:20,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:23,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:25,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:27,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:28,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:30,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:33,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:35,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:38,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:40,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:43,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:45,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:48,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:49,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:50,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:53,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:55,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:19:58,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:19:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:00,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:03,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:05,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:08,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:10,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:13,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:15,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:18,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:20,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:23,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:25,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:28,001 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:28,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:30,003 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:30,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:33,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:35,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:38,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:39,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:40,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:43,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:45,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:48,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:50,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:53,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:55,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:20:58,025 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:20:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:00,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:03,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:05,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:08,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:10,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:13,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:15,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:18,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:20,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:23,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:24,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:25,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:28,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:30,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:33,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:35,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:38,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:40,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:42,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:43,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:45,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:48,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:50,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:53,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:55,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:21:58,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:21:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:00,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:03,003 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:03,023 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:05,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:08,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:10,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:13,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:15,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:18,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:20,039 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:23,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:25,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:28,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:30,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:33,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:34,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:35,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:38,019 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:40,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:43,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:45,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:48,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:50,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:53,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:54,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:55,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:57,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:22:58,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:22:59,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:00,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:03,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:05,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:08,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:10,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:12,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:13,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:15,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:17,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:18,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:20,025 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:23,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:25,026 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:28,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:29,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:30,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:33,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:35,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:38,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:40,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:40,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:43,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:45,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:48,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:50,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:53,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:55,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:23:58,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:23:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:00,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:03,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:05,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:08,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:08,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:09,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:10,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:13,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:15,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:18,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:20,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:23,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:24,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:25,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:27,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:28,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:29,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:30,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:33,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:34,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:35,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:37,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:38,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:40,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:43,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:45,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:48,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:50,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:53,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:55,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:57,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:24:58,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:24:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:00,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:03,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:04,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:05,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:07,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:08,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:10,004 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:10,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:13,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:13,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:14,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:15,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:17,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:18,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:20,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:23,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:25,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:28,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:30,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:33,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:35,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:38,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:40,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:43,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:45,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:48,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:50,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:53,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:55,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:25:58,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:25:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:00,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:03,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:04,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:05,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:08,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:09,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:10,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:12,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:13,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:15,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:18,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:20,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:23,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:25,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:28,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:30,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:33,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:35,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:37,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:38,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:40,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:43,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:43,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:45,004 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:45,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:48,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:48,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:49,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:50,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:53,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:54,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:55,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:26:58,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:26:59,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:00,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:03,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:05,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:08,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:08,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:10,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:12,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:13,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:15,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:18,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:20,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:23,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:25,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:28,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:30,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:33,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:35,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:38,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:40,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:43,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:45,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:48,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:50,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:53,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:55,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:27:58,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:27:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:00,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:03,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:05,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:08,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:10,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:13,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:15,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:17,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:18,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:20,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:23,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:25,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:27,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:28,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:29,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:30,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:33,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:35,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:38,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:40,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:43,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:45,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:48,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:50,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:53,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:55,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:28:58,038 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:28:59,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:00,039 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:03,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:05,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:08,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:08,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:10,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:13,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:15,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:17,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:18,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:20,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:23,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:24,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:25,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:28,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:30,041 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:33,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:35,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:38,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:40,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:43,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:45,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:48,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:50,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:53,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:55,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:55,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:57,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:29:58,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:29:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:00,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:03,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:05,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:08,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:10,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:13,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:15,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:17,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:18,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:20,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:23,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:25,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:28,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:30,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:33,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:33,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:35,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:38,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:40,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:43,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:45,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:48,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:49,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:50,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:53,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:55,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:30:58,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:30:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:00,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:03,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:04,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:05,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:07,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:08,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:10,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:13,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:15,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:17,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:18,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:20,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:23,023 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:25,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:28,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:30,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:33,002 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:33,019 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:34,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:35,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:38,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:40,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:43,038 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:45,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:48,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:50,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:53,038 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:55,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:31:58,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:31:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:00,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:03,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:04,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:05,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:08,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:10,038 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:12,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:13,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:15,019 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:18,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:19,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:20,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:23,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:24,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:25,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:28,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:28,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:30,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:33,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:34,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:35,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:38,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:40,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:42,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:43,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:45,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:47,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:48,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:49,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:50,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:52,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:53,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:55,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:57,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:32:58,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:32:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:00,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:03,030 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:05,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:07,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:08,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:10,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:13,007 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:13,042 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:15,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:17,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:18,037 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:19,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:20,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:22,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:23,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:25,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:25,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:28,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:29,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:30,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:32,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:33,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:34,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:35,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:37,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:38,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:40,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:42,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:43,036 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:44,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:45,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:48,034 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:50,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:50,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:52,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:53,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:55,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:33:58,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:33:59,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:00,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:02,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:03,028 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:05,029 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:07,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:08,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:09,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:10,033 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:13,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:14,288 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=800, height=480)
2024-05-05 18:34:14,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:15,019 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:15,972 [base_panel.py:process_update()] - Update complete
2024-05-05 18:34:15,978 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-05-05 18:34:15,979 [printer.py:change_state()] - Adding callback for state: disconnected
2024-05-05 18:34:15,979 [screen.py:state_disconnected()] - ### Going to disconnected
2024-05-05 18:34:15,979 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:34:15,981 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:34:16,021 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 18:34:17,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:18,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:18,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:34:19,004 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 18:34:19,010 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 18:34:19,010 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-330-gb631ec4', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 18:34:19,011 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 18:34:19,017 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 18:34:19,039 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.536', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}'}, 'gcode_macro COMPARE_BELTS_RESPONSES': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro CREATE_VIBRATIONS_PROFILE': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.536, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro compare_belts_responses': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro create_vibrations_profile': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 18:34:19,044 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:34:19,045 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-05 18:34:19,045 [printer.py:reinit()] - # Extruders: 1
2024-05-05 18:34:19,045 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 18:34:19,046 [printer.py:reinit()] - # Fans: 5
2024-05-05 18:34:19,046 [printer.py:reinit()] - # Output pins: 1
2024-05-05 18:34:19,046 [printer.py:reinit()] - # Leds: 2
2024-05-05 18:34:19,046 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 18:34:19,058 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 18:34:19,059 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 18:34:19,335 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 18:34:19,335 [screen.py:init_klipper()] - Printer initialized
2024-05-05 18:34:19,335 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-05-05 18:34:19,335 [printer.py:change_state()] - Adding callback for state: startup
2024-05-05 18:34:19,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:20,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:21,888 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-05-05 18:34:21,888 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 18:34:21,889 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 18:34:21,891 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:34:21,954 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 18:34:21,968 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 18:34:21,973 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 18:34:21,978 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 18:34:21,983 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 18:34:22,018 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:34:22,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:23,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:25,015 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:25,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:25,515 [base_panel.py:process_update()] - Update complete
2024-05-05 18:34:25,517 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-05-05 18:34:25,517 [printer.py:change_state()] - Adding callback for state: disconnected
2024-05-05 18:34:25,576 [screen.py:state_disconnected()] - ### Going to disconnected
2024-05-05 18:34:25,576 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:34:25,580 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:34:25,651 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 18:34:27,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:28,031 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:28,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:34:29,007 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 18:34:29,015 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 18:34:29,015 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-330-gb631ec4', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 18:34:29,016 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 18:34:29,248 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 18:34:29,295 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.536', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}'}, 'gcode_macro COMPARE_BELTS_RESPONSES': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro CREATE_VIBRATIONS_PROFILE': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.536, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro compare_belts_responses': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro create_vibrations_profile': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 18:34:29,301 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:34:29,304 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-05 18:34:29,304 [printer.py:reinit()] - # Extruders: 1
2024-05-05 18:34:29,305 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 18:34:29,305 [printer.py:reinit()] - # Fans: 5
2024-05-05 18:34:29,305 [printer.py:reinit()] - # Output pins: 1
2024-05-05 18:34:29,305 [printer.py:reinit()] - # Leds: 2
2024-05-05 18:34:29,305 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 18:34:29,320 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 18:34:29,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 18:34:29,590 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 18:34:29,590 [screen.py:init_klipper()] - Printer initialized
2024-05-05 18:34:29,590 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-05-05 18:34:29,590 [printer.py:change_state()] - Adding callback for state: startup
2024-05-05 18:34:29,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:30,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:31,792 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-05-05 18:34:31,792 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 18:34:31,793 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 18:34:31,795 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:34:31,859 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 18:34:31,872 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 18:34:31,877 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 18:34:31,882 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 18:34:31,887 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 18:34:31,924 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:34:32,169 [base_panel.py:process_update()] - Update complete
2024-05-05 18:34:32,170 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-05-05 18:34:32,171 [printer.py:change_state()] - Adding callback for state: disconnected
2024-05-05 18:34:32,258 [screen.py:state_disconnected()] - ### Going to disconnected
2024-05-05 18:34:32,258 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:34:32,260 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:34:32,300 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 18:34:32,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:33,016 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:34,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:35,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:36,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:34:36,008 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 18:34:36,013 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 18:34:36,013 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-330-gb631ec4', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 18:34:36,014 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 18:34:36,021 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 18:34:36,044 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.536', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}'}, 'gcode_macro COMPARE_BELTS_RESPONSES': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro CREATE_VIBRATIONS_PROFILE': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.536, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro compare_belts_responses': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro create_vibrations_profile': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 18:34:36,049 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:34:36,050 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-05 18:34:36,050 [printer.py:reinit()] - # Extruders: 1
2024-05-05 18:34:36,050 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 18:34:36,050 [printer.py:reinit()] - # Fans: 5
2024-05-05 18:34:36,050 [printer.py:reinit()] - # Output pins: 1
2024-05-05 18:34:36,050 [printer.py:reinit()] - # Leds: 2
2024-05-05 18:34:36,050 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 18:34:36,062 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 18:34:36,064 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 18:34:36,339 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 18:34:36,339 [screen.py:init_klipper()] - Printer initialized
2024-05-05 18:34:36,339 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-05-05 18:34:36,339 [printer.py:change_state()] - Adding callback for state: startup
2024-05-05 18:34:37,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:38,018 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:38,040 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-05-05 18:34:38,041 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 18:34:38,041 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 18:34:38,044 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:34:38,109 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 18:34:38,123 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 18:34:38,128 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 18:34:38,133 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 18:34:38,139 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 18:34:38,173 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:34:39,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:40,035 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:42,538 [base_panel.py:process_update()] - Update complete
2024-05-05 18:34:42,653 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-05-05 18:34:42,653 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-05-05 18:34:42,654 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-05-05 18:34:42,655 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:34:42,735 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 18:34:42,807 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-05-05 18:34:42,808 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:34:42,867 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 18:34:42,885 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 18:34:42,886 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:34:42,892 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-05-05 18:34:42,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:43,002 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-05-05 18:34:43,002 [screen.py:init_tempstore()] - Tempstore not ready: False Retrying in 5 seconds
2024-05-05 18:34:44,998 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:45,007 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-05-05 18:34:47,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:48,015 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:50,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:50,013 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:53,000 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 18:34:53,001 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:34:53,010 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-05-05 18:34:53,016 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-05-05 18:34:53,017 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:53,027 [_logging.py:info()] - Websocket connected
2024-05-05 18:34:53,027 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-05-05 18:34:53,041 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:34:53,041 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:34:53,049 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 18:34:53,058 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 18:34:53,058 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-352-g326d23a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 18:34:53,058 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 18:34:53,071 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 18:34:53,269 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-05-05 18:34:53,269 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-05-05 18:34:53,275 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.536', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}'}, 'gcode_macro COMPARE_BELTS_RESPONSES': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro CREATE_VIBRATIONS_PROFILE': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.536, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro compare_belts_responses': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro create_vibrations_profile': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 18:34:53,279 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:34:53,282 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-05 18:34:53,282 [printer.py:reinit()] - # Extruders: 1
2024-05-05 18:34:53,282 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 18:34:53,282 [printer.py:reinit()] - # Fans: 5
2024-05-05 18:34:53,282 [printer.py:reinit()] - # Output pins: 1
2024-05-05 18:34:53,282 [printer.py:reinit()] - # Leds: 2
2024-05-05 18:34:53,283 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 18:34:53,289 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-05-05 18:34:53,292 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: 'bool' object is not subscriptable
  File "/home/pi/KlipperScreen/screen.py", line 915, in init_printer
    return self.init_klipper(state["result"])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  File "/home/pi/KlipperScreen/screen.py", line 973, in init_klipper
    self.printer.available_commands = self.apiclient.get_gcode_help()['result']
                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^
NoneType: None
2024-05-05 18:34:53,293 [base_panel.py:process_update()] - Update complete
2024-05-05 18:34:53,296 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-05-05 18:34:53,298 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:34:53,363 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 18:34:53,434 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-05-05 18:34:53,435 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:34:53,497 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 18:34:53,517 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 18:34:53,517 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:34:53,521 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-05-05 18:34:54,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:55,009 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-05-05 18:34:55,010 [screen.py:init_tempstore()] - Tempstore not ready: False Retrying in 5 seconds
2024-05-05 18:34:57,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:34:58,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:35:00,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:35:00,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:35:03,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:35:03,013 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:35:03,999 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 18:35:03,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:35:04,009 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-05-05 18:35:04,019 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-05-05 18:35:04,027 [_logging.py:info()] - Websocket connected
2024-05-05 18:35:04,027 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-05-05 18:35:04,030 [screen.py:init_printer()] - Already Initializing
2024-05-05 18:35:04,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:35:05,022 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:35:06,236 [base_panel.py:finish_updating()] - Finishing update
2024-05-05 18:35:06,241 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-05-05 18:35:06,242 [screen.py:_menu_go_back()] - #### Menu go home
2024-05-05 18:35:06,242 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 18:35:08,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:35:08,023 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:35:10,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:35:10,027 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:35:10,810 [KlippyGtk.py:Dialog()] - Showing dialog Restart (width=800, height=480)
2024-05-05 18:35:12,999 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:35:13,017 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:35:14,523 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-05-05 18:35:33,795 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-05-05 18:35:33,795 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-05-05 18:35:33,796 [functions.py:log_start()] - Python version: 3.11
2024-05-05 18:35:34,013 [config.py:get_config_file_location()] - Passed config (-c): .
2024-05-05 18:35:34,013 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-05-05 18:35:34,034 [config.py:log_config()] -  ===== Config File =====

=======================
2024-05-05 18:35:34,036 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_asc

[graph Printer]
extruder = False
temperature_sensor chamber = False
heater_bed = False

=======================
2024-05-05 18:35:34,037 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-05-05 18:35:34,204 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-05-05 18:35:34,204 [config.py:install_language()] - Using lang en
2024-05-05 18:35:34,219 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-05-05 18:35:34,221 [screen.py:__init__()] - Wayland: False Display name: :0
2024-05-05 18:35:34,223 [screen.py:__init__()] - Screen resolution: 800x480
2024-05-05 18:35:34,228 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-05-05 18:35:35,952 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-05-05 18:35:35,952 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-05-05 18:35:35,960 [screen.py:initial_connection()] - Default printer: None
2024-05-05 18:35:35,996 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-05-05 18:35:35,996 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-05-05 18:35:36,071 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 18:35:36,081 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 18:35:36,081 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:35:36,104 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-05-05 18:35:45,962 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 18:35:45,962 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:35:45,970 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-05-05 18:35:45,978 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-05-05 18:35:45,985 [_logging.py:info()] - Websocket connected
2024-05-05 18:35:45,985 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-05-05 18:35:45,985 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:35:45,992 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 18:35:46,000 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 18:35:46,000 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-352-g326d23a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 18:35:46,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 18:35:46,009 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 18:35:46,222 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.536', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}'}, 'gcode_macro COMPARE_BELTS_RESPONSES': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro CREATE_VIBRATIONS_PROFILE': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.536, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro compare_belts_responses': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro create_vibrations_profile': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 18:35:46,226 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:35:46,227 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-05-05 18:35:46,227 [printer.py:reinit()] - # Extruders: 1
2024-05-05 18:35:46,227 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 18:35:46,227 [printer.py:reinit()] - # Fans: 5
2024-05-05 18:35:46,227 [printer.py:reinit()] - # Output pins: 1
2024-05-05 18:35:46,227 [printer.py:reinit()] - # Leds: 2
2024-05-05 18:35:46,227 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 18:35:46,240 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 18:35:46,241 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 18:35:46,520 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 18:35:46,520 [screen.py:init_klipper()] - Printer initialized
2024-05-05 18:35:46,520 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-05-05 18:35:46,521 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 18:35:46,522 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 18:35:46,524 [screen.py:_load_panel()] - Loading panel: main_menu
2024-05-05 18:35:46,612 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 18:35:46,629 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 18:35:46,637 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 18:35:46,643 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 18:35:46,647 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 18:35:46,682 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:35:46,682 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:35:46,697 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:35:48,107 [screen.py:_load_panel()] - Loading panel: shutdown
2024-05-05 18:35:48,145 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > shutdown
2024-05-05 18:35:51,961 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:35:51,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:36:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:36:15,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:36:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:36:20,514 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:36:24,339 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:36:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:36:25,514 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:36:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:36:30,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:36:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:36:35,514 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:36:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:36:40,514 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:36:41,814 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:36:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:36:45,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:36:45,951 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:36:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:36:50,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:36:50,992 [screen.py:_menu_go_back()] - #### Menu go back
2024-05-05 18:36:51,064 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:36:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:36:55,513 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:00,512 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:05,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:07,298 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=800, height=480)
2024-05-05 18:37:08,707 [base_panel.py:process_update()] - Update complete
2024-05-05 18:37:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:10,513 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:15,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:17,074 [base_panel.py:process_update()] - Update complete
2024-05-05 18:37:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:20,515 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:25,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:30,514 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:30,600 [base_panel.py:process_update()] - Update complete
2024-05-05 18:37:30,601 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-05-05 18:37:30,601 [printer.py:change_state()] - Adding callback for state: disconnected
2024-05-05 18:37:30,676 [screen.py:state_disconnected()] - ### Going to disconnected
2024-05-05 18:37:30,677 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:37:30,679 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:37:30,721 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 18:37:33,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 18:37:33,505 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 18:37:33,511 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 18:37:33,511 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-352-g326d23a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 18:37:33,511 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 18:37:33,518 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 18:37:33,540 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.536', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}'}, 'gcode_macro COMPARE_BELTS_RESPONSES': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro CREATE_VIBRATIONS_PROFILE': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.536, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro compare_belts_responses': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro create_vibrations_profile': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 18:37:33,544 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 18:37:33,545 [printer.py:reinit()] - Klipper version: v0.12.0-179-g434770ea-dirty
2024-05-05 18:37:33,545 [printer.py:reinit()] - # Extruders: 1
2024-05-05 18:37:33,545 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 18:37:33,545 [printer.py:reinit()] - # Fans: 5
2024-05-05 18:37:33,545 [printer.py:reinit()] - # Output pins: 1
2024-05-05 18:37:33,545 [printer.py:reinit()] - # Leds: 2
2024-05-05 18:37:33,546 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 18:37:33,556 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 18:37:33,558 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 18:37:33,837 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 18:37:33,837 [screen.py:init_klipper()] - Printer initialized
2024-05-05 18:37:33,837 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-05-05 18:37:33,837 [printer.py:change_state()] - Adding callback for state: startup
2024-05-05 18:37:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:35,513 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:36,453 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-05-05 18:37:36,453 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 18:37:36,454 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 18:37:36,457 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:37:36,523 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 18:37:36,537 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 18:37:36,542 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 18:37:36,547 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 18:37:36,552 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 18:37:36,587 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:37:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:40,513 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:43,092 [base_panel.py:finish_updating()] - Finishing update
2024-05-05 18:37:43,099 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-05-05 18:37:43,099 [screen.py:_menu_go_back()] - #### Menu go home
2024-05-05 18:37:43,136 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:37:44,925 [screen.py:show_panel()] - Reinitializing panel
2024-05-05 18:37:44,958 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > shutdown
2024-05-05 18:37:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:45,513 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:50,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:37:55,515 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:37:56,387 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:38:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:00,514 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:38:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:05,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:38:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:10,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:38:13,954 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:38:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:15,514 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:38:18,090 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:38:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:20,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:38:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:25,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:38:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:30,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:38:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:35,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:38:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:38:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:38:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:50,514 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:38:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:38:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:05,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:10,526 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:15,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:25,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:30,514 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:35,526 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:45,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:39:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:39:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:00,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:05,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:10,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:20,525 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:30,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:35,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:45,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:50,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:40:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:40:55,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:00,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:05,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:10,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:20,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:25,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:30,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:36,582 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-05 18:41:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:40,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:45,502 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:45,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:41:55,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:41:56,952 [screen.py:_menu_go_back()] - #### Menu go back
2024-05-05 18:41:57,015 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:41:58,173 [screen.py:_load_panel()] - Loading panel: move
2024-05-05 18:41:58,264 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-05-05 18:41:59,588 [move.py:change_distance()] - ### Distance .1
2024-05-05 18:42:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:00,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:42:01,268 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-05-05 18:42:01,270 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 18:42:04,037 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-05-05 18:42:04,041 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 18:42:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:42:06,160 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+.1 F600'}
2024-05-05 18:42:06,163 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 18:42:09,724 [screen.py:_menu_go_back()] - #### Menu go back
2024-05-05 18:42:09,779 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:42:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:10,515 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:42:11,682 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-05-05 18:42:12,881 [move.py:change_distance()] - ### Distance 25
2024-05-05 18:42:13,416 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-05-05 18:42:13,418 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-05-05 18:42:14,832 [screen.py:_menu_go_back()] - #### Menu go back
2024-05-05 18:42:14,883 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 18:42:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:15,514 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:42:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:20,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:42:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:42:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:30,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:42:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:35,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:42:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:40,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:42:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:45,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:42:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:50,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:42:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:42:55,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:10,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:15,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:30,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:35,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:40,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:45,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:50,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:43:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:43:55,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:10,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:15,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:35,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:40,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:45,519 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:50,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:44:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:44:55,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:00,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:10,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:15,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:20,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:25,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:30,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:35,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:45,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:45:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:45:55,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:20,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:30,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:35,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:40,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:46:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:46:55,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:00,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:05,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:15,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:25,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:35,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:40,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:47:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:47:55,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:00,502 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:00,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:10,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:20,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:25,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:35,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:45,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:50,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:48:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:48:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:25,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:30,519 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:35,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:40,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:45,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:49:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:49:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:00,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:05,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:10,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:15,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:20,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:25,526 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:30,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:40,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:50:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:50:55,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:00,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:10,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:10,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:20,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:35,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:40,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:45,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:51:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:51:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:00,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:05,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:10,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:15,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:25,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:30,526 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:35,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:40,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:45,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:50,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:52:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:52:55,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:05,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:10,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:35,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:40,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:45,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:50,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:53:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:53:55,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:00,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:05,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:10,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:25,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:40,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:54:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:54:55,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:15,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:20,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:35,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:40,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:45,503 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:55:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:55:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:15,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:20,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:25,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:30,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:35,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:45,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:50,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:56:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:56:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:10,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:15,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:20,503 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:20,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:35,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:40,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:45,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:57:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:57:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:00,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:10,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:15,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:25,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:30,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:35,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:40,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:50,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:58:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:58:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:00,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:10,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:20,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:35,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:40,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:45,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 18:59:55,498 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 18:59:55,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:05,519 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:10,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:25,506 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:25,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:30,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:35,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:40,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:40,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:50,542 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:00:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:00:55,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:00,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:15,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:25,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:30,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:35,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:40,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:50,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:01:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:01:55,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:00,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:05,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:10,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:15,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:20,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:35,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:45,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:02:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:02:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:00,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:20,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:25,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:30,505 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:30,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:40,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:45,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:50,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:03:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:03:55,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:00,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:15,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:20,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:25,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:40,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:45,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:50,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:04:55,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:04:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:00,502 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:00,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:10,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:15,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:35,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:40,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:45,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:05:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:05:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:10,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:15,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:30,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:40,515 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:45,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:06:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:06:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:00,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:05,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:10,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:15,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:30,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:35,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:40,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:45,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:50,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:07:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:07:55,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:10,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:20,520 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:35,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:40,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:45,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:08:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:08:55,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:15,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:20,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:25,519 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:30,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:35,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:40,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:45,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:50,545 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:09:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:09:55,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:00,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:20,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:35,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:45,515 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:50,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:10:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:10:55,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:00,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:15,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:30,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:35,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:40,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:45,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:11:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:11:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:00,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:10,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:30,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:35,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:40,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:45,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:50,519 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:12:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:12:55,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:10,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:20,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:30,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:35,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:40,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:45,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:50,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:13:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:13:55,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:00,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:05,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:25,506 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:25,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:35,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:40,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:14:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:14:55,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:15,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:20,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:25,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:30,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:40,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:15:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:15:55,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:00,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:05,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:10,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:15,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:20,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:25,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:35,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:40,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:45,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:16:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:16:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:00,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:05,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:10,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:15,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:20,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:25,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:30,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:40,520 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:45,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:17:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:17:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:00,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:05,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:15,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:20,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:25,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:35,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:18:55,504 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:18:55,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:05,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:20,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:25,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:35,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:40,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:45,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:19:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:19:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:15,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:30,505 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:35,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:40,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:45,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:50,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:20:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:20:55,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:00,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:05,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:15,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:25,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:35,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:40,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:45,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:50,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:21:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:21:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:05,498 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:05,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:30,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:22:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:22:55,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:05,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:20,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:30,504 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:30,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:35,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:40,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:45,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:50,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:23:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:23:55,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:35,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:40,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:50,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:24:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:24:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:00,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:05,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:45,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:25:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:25:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:00,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:20,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:25,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:30,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:35,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:40,519 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:26:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:26:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:00,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:05,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:25,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:30,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:35,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:40,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:45,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:27:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:27:55,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:00,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:10,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:15,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:30,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:35,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:40,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:28:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:28:55,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:05,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:10,526 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:15,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:30,505 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:30,544 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:35,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:40,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:45,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:29:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:29:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:05,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:15,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:35,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:40,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:45,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:50,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:30:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:30:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:00,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:35,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:45,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:50,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:31:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:31:55,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:15,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:35,502 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:35,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:40,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:45,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:32:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:32:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:00,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:10,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:15,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:20,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:45,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:50,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:33:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:33:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:05,503 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:05,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:15,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:20,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:40,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:45,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:34:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:34:55,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:35,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:40,503 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:45,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:50,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:35:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:35:55,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:10,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:15,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:35,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:45,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:50,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:36:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:36:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:10,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:15,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:20,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:25,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:30,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:35,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:50,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:37:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:37:55,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:00,519 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:20,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:35,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:40,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:45,506 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:50,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:38:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:38:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:00,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:05,515 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:15,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:40,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:50,519 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:39:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:39:55,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:00,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:05,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:40,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:50,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:40:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:40:55,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:20,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:25,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:30,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:35,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:40,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:50,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:41:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:41:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:00,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:10,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:15,499 [screen.py:show_screensaver()] - Showing Screensaver
2024-05-05 19:42:15,503 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:15,521 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:40,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:42:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:42:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:00,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:20,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:25,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:35,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:50,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:43:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:43:55,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:00,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:10,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:30,525 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:35,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:40,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:45,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:44:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:44:55,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:10,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:20,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:35,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:40,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:45,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:50,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:45:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:45:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:05,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:35,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:40,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:50,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:46:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:46:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:05,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:35,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:50,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:47:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:47:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:15,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:30,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:35,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:40,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:50,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:48:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:48:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:00,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:10,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:20,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:25,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:35,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:50,521 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:49:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:49:55,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:20,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:25,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:30,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:35,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:45,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:50,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:50:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:50:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:00,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:05,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:15,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:20,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:25,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:30,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:35,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:40,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:51:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:51:55,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:00,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:05,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:20,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:25,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:40,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:50,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:52:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:52:55,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:05,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:10,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:15,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:25,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:35,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:40,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:45,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:53:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:53:55,519 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:35,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:40,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:45,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:50,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:54:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:54:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:35,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:40,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:55:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:55:55,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:00,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:10,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:25,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:30,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:50,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:56:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:56:55,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:10,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:15,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:20,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:30,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:40,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:50,520 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:57:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:57:55,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:05,542 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:10,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:15,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:25,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:50,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:58:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:58:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:10,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:15,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:20,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:25,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:30,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:35,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:45,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:50,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 19:59:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 19:59:55,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:00,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:15,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:35,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:40,543 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:00:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:00:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:20,543 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:25,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:30,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:35,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:40,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:45,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:50,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:01:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:01:55,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:00,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:10,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:15,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:40,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:45,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:02:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:02:55,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:20,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:40,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:45,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:03:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:03:55,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:10,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:15,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:45,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:50,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:04:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:04:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:25,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:30,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:35,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:45,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:05:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:05:55,520 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:10,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:15,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:30,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:40,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:50,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:06:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:06:55,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:15,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:40,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:50,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:07:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:07:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:00,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:05,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:20,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:35,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:45,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:50,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:08:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:08:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:00,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:05,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:10,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:20,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:25,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:30,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:40,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:09:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:09:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:00,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:30,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:40,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:45,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:50,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:10:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:10:55,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:25,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:35,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:40,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:11:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:11:55,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:00,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:15,543 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:30,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:35,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:40,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:12:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:12:55,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:20,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:30,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:35,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:40,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:13:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:13:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:00,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:25,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:50,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:14:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:14:55,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:10,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:15,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:25,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:30,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:40,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:45,543 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:15:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:15:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:00,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:20,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:40,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:50,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:16:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:16:55,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:20,542 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:25,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:40,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:45,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:50,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:17:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:17:55,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:00,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:10,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:15,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:25,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:30,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:35,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:40,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:50,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:18:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:18:55,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:00,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:10,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:15,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:20,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:25,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:35,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:19:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:19:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:00,520 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:20,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:30,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:35,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:40,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:45,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:50,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:20:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:20:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:20,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:25,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:40,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:45,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:21:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:21:55,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:00,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:15,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:35,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:40,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:22:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:22:55,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:05,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:10,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:20,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:35,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:40,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:40,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:23:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:23:55,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:05,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:10,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:15,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:25,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:35,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:45,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:50,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:24:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:24:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:15,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:20,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:35,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:45,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:25:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:25:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:00,503 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:00,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:05,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:30,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:35,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:45,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:50,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:26:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:26:55,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:15,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:20,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:30,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:35,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:40,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:27:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:27:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:05,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:50,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:28:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:28:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:05,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:30,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:35,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:40,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:29:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:29:55,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:00,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:05,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:15,545 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:20,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:25,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:30,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:35,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:40,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:45,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:50,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:30:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:30:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:10,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:20,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:50,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:31:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:31:55,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:00,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:05,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:10,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:20,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:30,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:35,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:32:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:32:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:00,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:05,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:15,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:20,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:30,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:35,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:40,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:33:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:33:55,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:00,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:05,515 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:25,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:30,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:35,542 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:40,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:45,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:34:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:34:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:00,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:20,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:25,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:30,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:40,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:50,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:35:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:35:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:00,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:05,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:25,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:30,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:35,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:45,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:50,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:36:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:36:55,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:00,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:10,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:30,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:40,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:37:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:37:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:00,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:05,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:15,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:35,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:40,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:45,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:38:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:38:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:00,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:30,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:35,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:40,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:45,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:39:55,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:39:55,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:00,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:05,520 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:15,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:50,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:40:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:40:55,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:00,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:05,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:10,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:20,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:25,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:30,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:35,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:45,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:50,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:41:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:41:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:00,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:05,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:10,498 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:10,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:25,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:30,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:45,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:45,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:42:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:42:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:15,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:20,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:30,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:35,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:43:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:43:55,515 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:10,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:15,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:20,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:50,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:44:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:44:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:00,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:15,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:25,544 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:30,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:50,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:45:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:45:55,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:00,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:05,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:10,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:15,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:25,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:35,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:40,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:46:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:46:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:00,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:10,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:10,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:30,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:35,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:45,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:47:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:47:55,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:10,518 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:30,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:35,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:50,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:48:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:48:55,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:00,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:10,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:15,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:20,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:30,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:35,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:50,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:49:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:49:55,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:00,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:05,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:10,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:15,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:35,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:40,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:50,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:50:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:50:55,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:00,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:10,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:15,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:20,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:25,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:30,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:40,540 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:50,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:51:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:51:55,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:00,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:05,543 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:10,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:20,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:25,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:30,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:40,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:45,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:52:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:52:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:00,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:00,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:05,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:05,541 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:15,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:20,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:25,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:30,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:35,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:40,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:45,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:50,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:53:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:53:55,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:00,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:05,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:10,517 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:15,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:15,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:20,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:30,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:30,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:35,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:35,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:40,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:45,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:54:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:54:55,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:00,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:05,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:10,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:15,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:20,529 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:25,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:30,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:35,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:40,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:45,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:45,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:50,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:50,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:55:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:55:55,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:00,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:05,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:10,527 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:15,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:25,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:25,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:30,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:35,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:40,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:45,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:50,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:56:55,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:56:55,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:00,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:05,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:10,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:15,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:20,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:25,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:30,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:35,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:40,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:40,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:45,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:50,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:57:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:57:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:00,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:00,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:05,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:05,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:10,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:10,531 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:15,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:15,516 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:20,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:20,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:25,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:25,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:30,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:30,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:35,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:35,528 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:40,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:40,533 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:45,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:45,530 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:50,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:50,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:58:55,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:58:55,532 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:59:17,195 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-05-05 20:59:17,195 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-05-05 20:59:17,195 [functions.py:log_start()] - Python version: 3.11
2024-05-05 20:59:17,447 [config.py:get_config_file_location()] - Passed config (-c): .
2024-05-05 20:59:17,447 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-05-05 20:59:17,475 [config.py:log_config()] -  ===== Config File =====

=======================
2024-05-05 20:59:17,476 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_asc

[graph Printer]
extruder = False
temperature_sensor chamber = False
heater_bed = False

=======================
2024-05-05 20:59:17,477 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-05-05 20:59:17,698 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-05-05 20:59:17,700 [config.py:install_language()] - Using lang en
2024-05-05 20:59:17,724 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-05-05 20:59:17,725 [screen.py:__init__()] - Wayland: False Display name: :0
2024-05-05 20:59:17,727 [screen.py:__init__()] - Screen resolution: 800x480
2024-05-05 20:59:17,733 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-05-05 20:59:19,109 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-05-05 20:59:19,109 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-05-05 20:59:19,116 [screen.py:initial_connection()] - Default printer: None
2024-05-05 20:59:19,150 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-05-05 20:59:19,150 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-05-05 20:59:19,218 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-05 20:59:19,228 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 20:59:19,228 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 20:59:19,245 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-05-05 20:59:29,940 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-05 20:59:29,940 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 20:59:29,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-05-05 20:59:29,955 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-05-05 20:59:29,961 [_logging.py:info()] - Websocket connected
2024-05-05 20:59:29,961 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-05-05 20:59:29,961 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-05 20:59:29,968 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-05 20:59:29,974 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-05 20:59:29,974 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-352-g326d23a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-05 20:59:29,975 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-05 20:59:29,982 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-05 20:59:30,081 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.536', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}'}, 'gcode_macro COMPARE_BELTS_RESPONSES': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro CREATE_VIBRATIONS_PROFILE': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.536, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro compare_belts_responses': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro create_vibrations_profile': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-05 20:59:30,085 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-05 20:59:30,086 [printer.py:reinit()] - Klipper version: v0.12.0-179-g434770ea-dirty
2024-05-05 20:59:30,086 [printer.py:reinit()] - # Extruders: 1
2024-05-05 20:59:30,086 [printer.py:reinit()] - # Temperature devices: 3
2024-05-05 20:59:30,086 [printer.py:reinit()] - # Fans: 5
2024-05-05 20:59:30,086 [printer.py:reinit()] - # Output pins: 1
2024-05-05 20:59:30,086 [printer.py:reinit()] - # Leds: 2
2024-05-05 20:59:30,086 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-05 20:59:30,098 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-05 20:59:30,100 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-05 20:59:30,384 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-05 20:59:30,385 [screen.py:init_klipper()] - Printer initialized
2024-05-05 20:59:30,385 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-05-05 20:59:30,385 [printer.py:change_state()] - Adding callback for state: ready
2024-05-05 20:59:30,386 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-05 20:59:30,388 [screen.py:_load_panel()] - Loading panel: main_menu
2024-05-05 20:59:30,470 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-05 20:59:30,483 [main_menu.py:add_device()] - Adding device: extruder
2024-05-05 20:59:30,488 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-05 20:59:30,494 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-05 20:59:30,498 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-05 20:59:30,532 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-05 20:59:30,533 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:59:30,546 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-05 20:59:35,940 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-05 20:59:35,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:03:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:03:46,961 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:03:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:03:51,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:03:52,195 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 14:03:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:03:56,962 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:01,963 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:06,963 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:09,757 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 14:04:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:11,963 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:13,890 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 14:04:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:16,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:21,975 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:26,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:31,972 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:36,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:41,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:46,962 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:51,975 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:04:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:04:56,976 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:01,975 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:06,976 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:11,975 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:16,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:21,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:26,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:31,976 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:36,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:41,963 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:46,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:51,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:05:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:05:56,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:01,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:11,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:16,975 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:21,976 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:26,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:31,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:36,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:41,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:46,973 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:51,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:06:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:06:56,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:01,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:06,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:11,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:16,974 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:26,962 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:31,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:36,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:41,963 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:46,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:51,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:07:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:07:56,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:01,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:11,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:16,975 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:21,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:26,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:31,974 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:36,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:41,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:46,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:51,974 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:08:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:08:56,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:01,964 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:06,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:11,964 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:16,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:21,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:26,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:31,964 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:36,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:41,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:51,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:09:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:09:56,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:01,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:16,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:26,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:31,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:36,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:41,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:46,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:10:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:10:56,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:06,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:11,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:16,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:21,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:26,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:36,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:41,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:46,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:51,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:11:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:11:56,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:01,976 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:11,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:16,956 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:16,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:21,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:26,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:41,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:46,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:51,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:12:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:12:56,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:06,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:11,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:16,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:21,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:26,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:31,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:36,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:41,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:46,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:51,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:13:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:13:56,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:11,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:16,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:21,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:26,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:36,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:41,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:46,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:51,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:14:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:14:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:01,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:06,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:11,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:21,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:31,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:36,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:41,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:51,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:15:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:15:56,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:06,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:11,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:16,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:21,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:26,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:36,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:41,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:51,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:16:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:16:56,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:06,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:11,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:16,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:21,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:26,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:31,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:36,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:41,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:46,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:51,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:17:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:17:56,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:16,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:21,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:26,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:41,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:46,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:51,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:18:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:18:56,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:01,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:06,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:11,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:16,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:21,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:26,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:31,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:41,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:46,971 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:51,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:19:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:19:56,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:11,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:16,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:21,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:36,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:41,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:46,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:51,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:20:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:20:56,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:06,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:16,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:26,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:36,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:41,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:46,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:21:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:21:56,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:06,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:11,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:21,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:31,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:36,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:46,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:51,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:22:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:22:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:01,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:11,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:16,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:21,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:31,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:36,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:46,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:23:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:23:56,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:06,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:11,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:16,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:21,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:26,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:36,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:41,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:46,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:51,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:24:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:24:56,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:01,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:11,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:16,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:21,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:31,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:36,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:41,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:46,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:51,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:25:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:25:56,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:01,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:11,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:16,970 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:21,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:31,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:36,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:41,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:46,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:51,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:26:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:26:56,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:01,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:11,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:21,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:26,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:31,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:36,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:41,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:46,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:51,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:27:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:27:56,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:01,956 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:01,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:06,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:11,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:21,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:26,993 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:31,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:36,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:46,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:28:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:28:56,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:06,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:11,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:16,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:21,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:26,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:31,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:36,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:41,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:46,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:51,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:29:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:29:56,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:01,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:11,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:16,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:21,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:26,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:31,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:36,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:41,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:30:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:30:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:06,953 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:06,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:11,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:16,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:21,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:31,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:36,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:41,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:46,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:31:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:31:56,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:11,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:16,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:21,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:26,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:36,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:41,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:46,958 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:46,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:51,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:32:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:32:56,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:01,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:06,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:11,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:16,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:21,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:36,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:41,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:46,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:46,972 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:51,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:33:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:33:56,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:01,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:11,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:16,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:21,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:26,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:31,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:36,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:46,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:51,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:34:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:34:56,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:11,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:16,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:26,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:31,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:36,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:41,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:46,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:51,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:35:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:35:56,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:01,956 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:01,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:16,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:21,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:26,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:36,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:41,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:46,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:51,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:36:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:36:56,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:01,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:06,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:11,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:21,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:26,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:31,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:31,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:36,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:41,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:46,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:51,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:37:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:37:56,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:01,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:11,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:16,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:21,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:25,251 [screen.py:show_popup_message()] - echo: "Z not homed do UNSAFE_LIFT_HEAD"
2024-05-08 14:38:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:26,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:31,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:36,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:41,969 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:45,157 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 14:38:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:46,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:51,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:38:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:38:56,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:01,955 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:01,992 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:04,194 [screen.py:show_popup_message()] - echo: Target temp reached!
2024-05-08 14:39:04,210 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-05-08 14:39:04,210 [printer.py:change_state()] - Adding callback for state: shutdown
2024-05-08 14:39:04,254 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-08 14:39:04,256 [screen.py:show_panel()] - Reinitializing panel
2024-05-08 14:39:04,313 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-08 14:39:06,281 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-05-08 14:39:06,281 [printer.py:change_state()] - Adding callback for state: disconnected
2024-05-08 14:39:06,281 [screen.py:state_disconnected()] - ### Going to disconnected
2024-05-08 14:39:06,281 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-08 14:39:06,282 [screen.py:show_panel()] - Reinitializing panel
2024-05-08 14:39:06,323 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-08 14:39:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:06,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:09,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-08 14:39:09,959 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-08 14:39:09,973 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-08 14:39:09,973 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-352-g326d23a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-08 14:39:09,973 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-08 14:39:09,986 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-08 14:39:10,027 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.536', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}'}, 'gcode_macro COMPARE_BELTS_RESPONSES': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro CREATE_VIBRATIONS_PROFILE': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.536, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro compare_belts_responses': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro create_vibrations_profile': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-08 14:39:10,034 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-08 14:39:10,036 [printer.py:reinit()] - Klipper version: v0.12.0-179-g434770ea-dirty
2024-05-08 14:39:10,036 [printer.py:reinit()] - # Extruders: 1
2024-05-08 14:39:10,036 [printer.py:reinit()] - # Temperature devices: 3
2024-05-08 14:39:10,036 [printer.py:reinit()] - # Fans: 5
2024-05-08 14:39:10,036 [printer.py:reinit()] - # Output pins: 1
2024-05-08 14:39:10,036 [printer.py:reinit()] - # Leds: 2
2024-05-08 14:39:10,037 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-08 14:39:10,051 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-08 14:39:10,053 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-08 14:39:10,316 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-08 14:39:10,316 [screen.py:init_klipper()] - Printer initialized
2024-05-08 14:39:10,316 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-05-08 14:39:10,316 [printer.py:change_state()] - Adding callback for state: startup
2024-05-08 14:39:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:11,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:12,256 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-05-08 14:39:12,257 [printer.py:change_state()] - Adding callback for state: ready
2024-05-08 14:39:12,257 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-08 14:39:12,260 [screen.py:show_panel()] - Reinitializing panel
2024-05-08 14:39:12,325 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-08 14:39:12,339 [main_menu.py:add_device()] - Adding device: extruder
2024-05-08 14:39:12,344 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-08 14:39:12,349 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-08 14:39:12,354 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-08 14:39:12,392 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-08 14:39:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:16,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:21,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:26,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:31,572 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 14:39:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:31,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:36,972 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:41,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:46,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:49,209 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 14:39:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:51,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:39:53,352 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 14:39:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:39:56,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:06,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:11,953 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:16,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:21,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:26,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:31,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:36,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:51,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:40:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:40:56,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:06,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:11,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:13,468 [screen.py:show_popup_message()] - echo: Clean Nozzle requested
2024-05-08 14:41:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:16,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:21,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:26,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:36,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:51,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:41:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:41:56,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:11,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:13,918 [screen.py:show_popup_message()] - echo: Nozzle cleaning finished!
2024-05-08 14:42:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:16,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:18,369 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 14:42:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:21,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:31,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:51,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:42:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:42:56,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:01,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:06,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:11,954 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:11,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:16,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:21,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:36,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:41,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:46,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:51,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:43:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:43:56,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:01,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:11,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:16,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:16,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:21,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:26,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:36,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:46,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:46,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:44:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:44:56,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:06,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:16,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:21,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:26,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:31,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:36,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:36,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:46,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:51,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:45:56,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:45:56,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:01,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:04,888 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-05-08 14:46:04,888 [printer.py:change_state()] - Adding callback for state: printing
2024-05-08 14:46:04,897 [screen.py:_load_panel()] - Loading panel: job_status
2024-05-08 14:46:05,047 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-05-08 14:46:05,053 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-05-08 14:46:05,071 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1.gcode Size: 50514
2024-05-08 14:46:05,072 [job_status.py:show_file_thumbnail()] - Body1.gcode
2024-05-08 14:46:05,072 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-05-08 14:46:06,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:06,970 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:11,974 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:16,954 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:16,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:21,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:21,972 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:22,397 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 14:46:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:26,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:31,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:36,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:36,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:41,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:46,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:51,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:46:56,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:46:56,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:06,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:06,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:11,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:16,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:21,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:26,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:31,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:36,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:46,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:51,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:47:56,955 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:47:56,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:06,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:06,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:11,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:16,970 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:21,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:26,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:28,539 [screen.py:show_popup_message()] - echo: Clean Nozzle requested
2024-05-08 14:48:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:31,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:36,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:46,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:51,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:48:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:48:56,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:06,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:11,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:16,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:21,963 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:21,999 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:26,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:27,212 [screen.py:show_popup_message()] - echo: Nozzle cleaning finished!
2024-05-08 14:49:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:31,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:33,353 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 14:49:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:36,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:41,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:46,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:51,974 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:49:56,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:49:56,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:06,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:06,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:11,975 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:16,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:16,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:21,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:26,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:36,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:36,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:41,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:46,969 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:51,956 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:51,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:50:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:50:56,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:06,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:11,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:16,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:16,993 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:21,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:36,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:46,976 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:51,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:51:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:51:56,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:01,889 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-05-08 14:52:01,890 [printer.py:change_state()] - Adding callback for state: ready
2024-05-08 14:52:01,898 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-05-08 14:52:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:01,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:06,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:11,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:16,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:21,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:26,969 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:31,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:36,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:36,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:46,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:51,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:52:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:52:56,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:01,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:06,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:11,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:16,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:21,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:26,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:36,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:36,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:41,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:46,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:51,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:53:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:53:56,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:01,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:06,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:06,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:11,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:16,993 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:21,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:26,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:36,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:36,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:51,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:54:56,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:54:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:01,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:06,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:11,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:21,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:26,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:36,954 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:36,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:41,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:46,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:55:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:55:56,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:06,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:11,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:16,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:21,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:26,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:31,977 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:36,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:41,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:46,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:51,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:56:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:56:56,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:06,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:11,959 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:11,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:16,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:26,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:31,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:36,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:36,992 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:41,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:46,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:51,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:57:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:57:56,969 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:11,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:16,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:21,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:26,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:36,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:36,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:46,958 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:46,993 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:51,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:58:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:58:56,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:06,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:11,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:16,995 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:21,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:36,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:46,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:51,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 14:59:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 14:59:56,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:06,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:06,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:11,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:16,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:21,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:21,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:26,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:31,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:36,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:36,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:41,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:46,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:51,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:00:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:00:56,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:01,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:11,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:16,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:21,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:26,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:36,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:51,957 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:51,992 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:01:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:01:56,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:01,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:06,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:06,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:11,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:21,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:26,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:31,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:36,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:36,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:02:56,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:02:56,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:06,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:06,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:16,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:16,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:21,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:21,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:24,958 [screen.py:show_screensaver()] - Showing Screensaver
2024-05-08 15:03:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:31,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:36,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:41,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:41,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:46,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:51,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:03:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:03:56,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:01,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:01,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:11,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:16,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:21,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:21,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:26,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:51,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:04:56,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:04:56,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:11,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:11,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:16,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:26,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:36,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:46,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:51,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:05:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:05:56,970 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:06,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:11,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:16,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:21,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:21,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:26,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:31,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:36,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:41,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:46,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:51,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:06:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:06:56,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:11,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:16,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:26,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:31,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:36,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:46,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:51,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:07:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:07:56,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:01,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:11,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:16,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:21,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:26,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:36,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:41,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:46,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:51,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:08:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:08:56,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:01,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:06,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:11,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:16,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:21,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:41,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:51,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:51,993 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:09:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:09:56,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:01,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:26,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:36,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:41,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:46,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:46,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:51,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:10:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:10:56,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:01,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:01,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:06,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:16,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:21,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:26,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:31,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:36,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:46,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:51,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:11:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:11:56,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:01,970 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:06,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:11,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:16,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:21,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:26,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:31,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:31,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:36,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:41,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:51,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:51,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:12:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:12:56,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:01,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:01,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:06,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:16,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:21,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:41,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:46,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:51,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:13:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:13:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:01,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:06,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:11,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:16,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:21,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:21,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:26,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:31,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:36,969 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:41,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:46,993 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:51,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:14:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:14:56,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:06,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:11,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:16,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:21,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:26,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:36,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:46,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:51,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:15:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:15:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:01,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:06,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:11,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:16,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:21,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:21,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:31,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:36,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:46,993 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:51,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:16:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:16:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:06,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:11,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:16,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:21,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:26,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:36,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:36,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:41,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:51,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:17:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:17:56,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:01,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:06,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:11,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:16,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:21,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:26,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:31,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:36,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:41,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:46,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:51,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:18:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:18:56,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:01,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:06,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:11,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:16,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:16,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:21,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:26,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:36,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:46,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:51,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:19:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:19:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:01,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:06,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:11,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:16,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:21,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:36,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:46,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:51,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:51,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:20:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:20:56,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:11,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:16,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:21,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:26,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:31,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:41,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:46,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:51,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:21:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:21:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:01,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:11,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:21,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:26,993 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:31,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:36,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:41,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:46,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:51,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:22:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:22:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:06,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:11,992 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:16,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:21,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:31,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:36,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:46,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:51,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:51,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:23:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:23:56,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:01,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:06,968 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:11,992 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:16,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:21,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:36,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:41,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:41,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:46,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:51,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:24:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:24:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:06,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:11,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:16,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:26,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:36,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:41,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:51,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:25:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:25:56,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:01,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:01,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:06,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:11,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:16,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:26,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:36,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:41,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:46,992 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:51,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:51,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:26:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:26:56,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:01,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:01,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:06,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:11,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:16,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:21,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:26,992 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:31,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:36,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:46,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:27:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:27:56,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:01,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:06,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:11,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:21,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:21,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:26,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:31,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:31,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:36,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:41,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:46,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:51,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:51,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:28:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:28:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:01,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:06,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:11,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:21,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:31,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:36,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:41,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:46,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:51,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:29:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:29:56,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:06,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:11,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:16,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:26,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:31,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:31,992 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:46,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:51,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:30:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:30:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:01,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:11,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:16,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:21,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:26,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:31,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:36,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:46,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:46,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:51,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:51,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:31:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:31:56,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:06,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:16,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:21,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:26,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:36,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:41,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:46,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:51,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:32:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:32:56,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:11,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:11,992 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:16,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:21,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:26,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:31,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:36,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:46,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:33:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:33:56,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:01,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:06,967 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:11,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:16,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:21,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:26,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:36,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:41,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:41,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:46,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:51,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:34:56,953 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:34:56,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:01,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:11,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:16,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:21,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:26,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:36,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:41,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:46,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:51,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:35:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:35:56,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:06,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:16,993 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:21,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:31,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:36,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:46,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:51,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:36:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:36:56,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:06,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:11,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:21,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:26,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:36,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:41,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:41,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:46,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:51,953 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:51,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:37:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:37:56,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:01,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:06,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:16,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:21,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:26,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:31,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:36,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:41,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:51,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:38:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:38:56,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:11,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:16,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:21,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:26,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:31,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:31,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:36,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:41,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:46,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:51,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:39:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:39:56,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:01,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:11,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:16,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:21,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:26,979 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:31,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:36,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:41,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:46,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:51,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:40:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:40:56,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:06,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:11,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:16,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:21,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:26,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:31,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:36,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:41,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:46,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:51,980 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:41:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:41:56,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:06,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:11,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:16,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:16,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:21,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:26,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:36,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:41,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:51,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:51,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:42:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:42:56,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:11,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:16,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:16,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:21,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:31,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:36,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:36,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:41,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:46,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:51,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:43:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:43:56,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:01,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:06,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:11,965 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:31,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:36,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:41,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:46,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:46,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:51,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:44:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:44:56,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:01,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:06,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:11,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:16,969 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:21,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:26,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:26,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:31,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:36,988 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:41,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:46,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:51,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:45:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:45:56,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:01,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:06,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:11,948 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:11,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:16,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:21,981 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:26,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:31,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:31,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:36,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:41,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:46,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:51,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:46:56,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:46:56,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:01,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:06,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:06,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:11,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:16,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:16,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:21,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:26,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:26,985 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:31,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:31,987 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:36,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:36,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:41,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:41,978 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:46,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:46,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:51,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:51,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:47:56,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:47:56,986 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:48:01,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:48:01,984 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:48:06,950 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:48:06,982 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:48:11,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:48:11,966 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:48:16,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:48:16,990 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:48:21,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:48:21,989 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:48:26,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:48:26,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:48:47,718 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-05-08 15:48:47,719 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-05-08 15:48:47,719 [functions.py:log_start()] - Python version: 3.11
2024-05-08 15:48:47,961 [config.py:get_config_file_location()] - Passed config (-c): .
2024-05-08 15:48:47,961 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-05-08 15:48:47,984 [config.py:log_config()] -  ===== Config File =====

=======================
2024-05-08 15:48:47,986 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False
print_sort_dir = date_asc

[graph Printer]
extruder = False
temperature_sensor chamber = False
heater_bed = False

=======================
2024-05-08 15:48:47,987 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-05-08 15:48:48,209 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-05-08 15:48:48,209 [config.py:install_language()] - Using lang en
2024-05-08 15:48:48,233 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-05-08 15:48:48,234 [screen.py:__init__()] - Wayland: False Display name: :0
2024-05-08 15:48:48,236 [screen.py:__init__()] - Screen resolution: 800x480
2024-05-08 15:48:48,241 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-05-08 15:48:49,784 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-05-08 15:48:49,784 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-05-08 15:48:49,790 [screen.py:initial_connection()] - Default printer: None
2024-05-08 15:48:49,828 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-05-08 15:48:49,828 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-05-08 15:48:49,903 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-05-08 15:48:49,916 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-08 15:48:49,916 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-08 15:48:49,933 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-05-08 15:48:59,852 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-05-08 15:48:59,852 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-08 15:48:59,860 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-05-08 15:48:59,867 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-05-08 15:48:59,874 [_logging.py:info()] - Websocket connected
2024-05-08 15:48:59,874 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-05-08 15:48:59,874 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-05-08 15:48:59,881 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-05-08 15:48:59,888 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-05-08 15:48:59,888 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-352-g326d23a', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-05-08 15:48:59,888 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-05-08 15:48:59,895 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-05-08 15:48:59,969 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '50.0', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': '-0.536', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!"}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}'}, 'gcode_macro COMPARE_BELTS_RESPONSES': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro CREATE_VIBRATIONS_PROFILE': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n40,20\n40,290\n310,290\n310,20', 'speed': '8000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '2000', 'horizontal_move_z': '5', 'probe_count': '10,10', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40,20', 'mesh_max': '310,290', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'cartographer model default': {'model_coef': '1.5282262102702657,\n1.9784019208749202,\n0.7493652190129672,\n0.2565104402156574,\n0.29454125966992806,\n0.3866660681119613,\n-0.1917147018401866,\n-0.3486461232267452,\n0.1683943600965849,\n0.17757717090753733', 'model_domain': '3.277322687607684e-07,3.3373393023542463e-07', 'model_range': '0.100000,5.000000', 'model_temp': '23.704901'}, 'bed_mesh default': {'version': '1', 'points': '\n0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464\n0.149036, 0.140840, 0.131396, 0.124760, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554\n0.165520, 0.145079, 0.118323, 0.101400, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721\n0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163\n0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.004540, 0.043783, 0.100031\n0.109870, 0.098092, 0.077907, 0.052886, 0.028002, 0.004490, 0.021459, 0.056617, 0.109022\n0.172838, 0.162496, 0.141390, 0.115295, 0.096236, 0.070510, 0.096238, 0.124214, 0.176123\n0.147461, 0.144600, 0.125358, 0.090689, 0.071184, 0.048718, 0.078980, 0.106263, 0.157105\n0.122352, 0.116644, 0.090143, 0.054710, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128', 'x_count': '9', 'y_count': '9', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '40.0', 'max_x': '330.0', 'min_y': '40.0', 'max_y': '310.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 50.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [10, 10], 'mesh_min': [40.0, 20.0], 'mesh_max': [310.0, 290.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 2000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.152566, 0.160695, 0.142579, 0.119164, 0.102178, 0.043722, 0.055308, 0.119195, 0.174464], [0.149036, 0.14084, 0.131396, 0.12476, 0.090904, 0.036844, 0.052589, 0.104596, 0.163554], [0.16552, 0.145079, 0.118323, 0.1014, 0.088695, 0.046415, 0.065902, 0.109886, 0.160721], [0.096014, 0.082796, 0.071287, 0.043301, 0.000535, -0.030675, 0.006844, 0.051115, 0.104163], [0.088725, 0.077879, 0.058013, 0.030478, -0.001065, -0.020911, 0.00454, 0.043783, 0.100031], [0.10987, 0.098092, 0.077907, 0.052886, 0.028002, 0.00449, 0.021459, 0.056617, 0.109022], [0.172838, 0.162496, 0.14139, 0.115295, 0.096236, 0.07051, 0.096238, 0.124214, 0.176123], [0.147461, 0.1446, 0.125358, 0.090689, 0.071184, 0.048718, 0.07898, 0.106263, 0.157105], [0.122352, 0.116644, 0.090143, 0.05471, 0.039943, 0.027619, 0.050508, 0.078702, 0.137128]], 'min_x': 40.0, 'max_x': 330.0, 'min_y': 40.0, 'max_y': 310.0, 'x_count': 9, 'y_count': 9, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\nG0 X175 Y175 F8000\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG90\nG4 P1000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in printer.toolhead.homed_axes %}\nSAVE_Z\n{% endif %}\n\n{% set home_all = \'X\' not in params and \'Y\' not in params and \'Z\' not in params %}\n\n{% if home_all or \'X\' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or \'Y\' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or \'Z\' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z\nG0 Z25\n{% endif %}\nCHECK_HOMING'}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': '!EBBCan: PB9', 'position_endstop': -0.536, 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR\nBED_MESH_PROFILE LOAD=default\n\n\nDO_HOMING', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\n\n{% if not \'z\' in homed_axes_xyz %}\nM118 "Z not homed do UNSAFE_LIFT_HEAD"\nUNSAFE_LIFT_HEAD\n{% endif %}\n\n{% if \'z\' in homed_axes_xyz %}\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n{% if pos.z < ( 25 ) %}\nG90\nG0 Z25 F25000\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\n\nG0 Z2.0 F1000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG4 P3000\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=160.0\nM118 Nozzle cleaning finished!\n\nG0 Z25 X175 Y175 F8000\nG28 Z\nM106 S0\n\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TTEMP}\nM118 Restored target temp to {TTEMP}', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': "\nM118 Send head to front for service!\n{% if not 'z' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!", 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\nCLEAN_NOZZLE\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nBED_MESH_PROFILE LOAD=default\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none or scv == "" %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if max_sm == "" %}\n{% set max_sm = none %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n{% endif %}', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro compare_belts_responses': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro create_vibrations_profile': {'gcode': '\n{% set size = params.SIZE|default(100)|int %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(0)|int %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set min_speed = 2 * 60 %}\n{% set nb_speed_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set kinematics = printer.configfile.settings.printer.kinematics %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting machine vibrations profile measurement")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x } Y{mid_y} F{feedrate_travel}\n\n\n{% if kinematics == "cartesian" %}\n\nRESPOND MSG="Cartesian kinematics mode"\n{% set main_angles = [0, 90] %}\n{% elif kinematics == "corexy" %}\n\nRESPOND MSG="CoreXY kinematics mode"\n{% set main_angles = [45, 135] %}\n{% else %}\n{ action_raise_error("Only Cartesian and CoreXY kinematics are supported at the moment for the vibrations measurement tool!") }\n{% endif %}\n\n{% set pi = (3.141592653589793) | float %}\n{% set tau = (pi * 2) | float %}\n\n\n{% for curr_angle in main_angles %}\n{% for curr_speed_sample in range(0, nb_speed_samples) %}\n{% set curr_speed = min_speed + curr_speed_sample * speed_increment %}\n{% set rad_angle_full = (curr_angle|float * pi / 180) %}\n\n\n\n\n\n{% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}\n\n{% if rad_angle < (-(tau / 4)) %}\n{% set rad_angle = (rad_angle + (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% elif rad_angle > (tau / 4) %}\n{% set rad_angle = (rad_angle - (tau / 2)) | float %}\n{% set final_mult = (-1) %}\n{% else %}\n{% set final_mult = (1) %}\n{% endif %}\n\n{% set sin0 = (rad_angle) %}\n{% set sin1 = ((rad_angle ** 3) / 6) | float %}\n{% set sin2 = ((rad_angle ** 5) / 120) | float %}\n{% set sin3 = ((rad_angle ** 7) / 5040) | float %}\n{% set sin4 = ((rad_angle ** 9) / 362880) | float %}\n{% set sin5 = ((rad_angle ** 11) / 39916800) | float %}\n{% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}\n{% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}\n{% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}\n\n{% set cos0 = (1) | float %}\n{% set cos1 = ((rad_angle ** 2) / 2) | float %}\n{% set cos2 = ((rad_angle ** 4) / 24) | float %}\n{% set cos3 = ((rad_angle ** 6) / 720) | float %}\n{% set cos4 = ((rad_angle ** 8) / 40320) | float %}\n{% set cos5 = ((rad_angle ** 10) / 3628800) | float %}\n{% set cos6 = ((rad_angle ** 12) / 479001600) | float %}\n{% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}\n{% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}\n\n\n\n\n\n\n{% if curr_speed < (100 * 60) %}\n{% set segment_length_multiplier = 1/5 + 4/5 * (curr_speed / 60) / 100 %}\n{% else %}\n{% set segment_length_multiplier = 1 %}\n{% endif %}\n\n\n{% set dx = (size / 2) * cos * segment_length_multiplier %}\n{% set dy = (size / 2) * sin * segment_length_multiplier %}\nG1 X{mid_x - dx} Y{mid_y - dy} F{feedrate_travel}\n\n\n\n{% set movements = 3 %}\n{% if curr_speed < (150 * 60) %}\n{% set movements = 1 %}\n{% elif curr_speed < (250 * 60) %}\n{% set movements = 2 %}\n{% endif %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n\n\n{% for n in range(movements) %}\nG1 X{mid_x + dx} Y{mid_y + dy} F{curr_speed}\nG1 X{mid_x - dx} Y{mid_y - dy} F{curr_speed}\n{% endfor %}\n\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=an{("%.2f" % curr_angle|float)|replace(\'.\',\'_\')}sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}\nG4 P300\n\nM400\n{% endfor %}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\n\n{% set ns_x = namespace(path=\'\') %}\n{% set ns_y = namespace(path=\'\') %}\n\n{% for item in printer %}\n{% set parts = item.split() %}\n{% if parts|length == 2 and parts[0].startswith(\'tmc\') and parts[0][3:].isdigit() %}\n{% if parts[1] == \'stepper_x\' %}\n{% set ns_x.path = parts[0] %}\n{% elif parts[1] == \'stepper_y\' %}\n{% set ns_y.path = parts[0] %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if ns_x.path and ns_y.path %}\n{% set metadata =\n"stepper_x_tmc:" ~ ns_x.path ~ "|"\n"stepper_x_run_current:" ~ (printer[ns_x.path + \' stepper_x\'].run_current | round(2) | string) ~ "|"\n"stepper_x_hold_current:" ~ (printer[ns_x.path + \' stepper_x\'].hold_current | round(2) | string) ~ "|"\n"stepper_y_tmc:" ~ ns_y.path ~ "|"\n"stepper_y_run_current:" ~ (printer[ns_y.path + \' stepper_y\'].run_current | round(2) | string) ~ "|"\n"stepper_y_hold_current:" ~ (printer[ns_y.path + \' stepper_y\'].hold_current | round(2) | string) ~ "|"\n%}\n\n{% set autotune_x = printer.configfile.config[\'autotune_tmc stepper_x\'] if \'autotune_tmc stepper_x\' in printer.configfile.config else none %}\n{% set autotune_y = printer.configfile.config[\'autotune_tmc stepper_y\'] if \'autotune_tmc stepper_y\' in printer.configfile.config else none %}\n{% if autotune_x and autotune_y %}\n{% set stepper_x_voltage = autotune_x.voltage if autotune_x.voltage else \'24.0\' %}\n{% set stepper_y_voltage = autotune_y.voltage if autotune_y.voltage else \'24.0\' %}\n{% set metadata = metadata ~\n"autotune_enabled:True|"\n"stepper_x_motor:" ~ autotune_x.motor ~ "|"\n"stepper_x_voltage:" ~ stepper_x_voltage ~ "|"\n"stepper_y_motor:" ~ autotune_y.motor ~ "|"\n"stepper_y_voltage:" ~ stepper_y_voltage ~ "|"\n%}\n{% else %}\n{% set metadata = metadata ~ "autotune_enabled:False|" %}\n{% endif %}\n\nDUMP_TMC STEPPER=stepper_x\nDUMP_TMC STEPPER=stepper_y\n\n{% else %}\n{ action_respond_info("No TMC drivers found for X and Y steppers") }\n{% endif %}\n\nRESPOND MSG="Machine vibrations profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --accel {accel|int} --kinematics {kinematics} {% if metadata %}--metadata {metadata}{% endif %} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %} --keep_results {keep_results}"\n\nRESTORE_GCODE_STATE NAME=CREATE_VIBRATIONS_PROFILE', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[40.0, 20.0], [40.0, 290.0], [310.0, 290.0], [310.0, 20.0]], 'speed': 8000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'cartographer model default': {'model_coef': [1.5282262102702657, 1.9784019208749202, 0.7493652190129672, 0.2565104402156574, 0.29454125966992806, 0.3866660681119613, -0.1917147018401866, -0.3486461232267452, 0.1683943600965849, 0.17757717090753733], 'model_temp': 23.704901, 'model_domain': [3.277322687607684e-07, 3.3373393023542463e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.0}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-05-08 15:48:59,973 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-05-08 15:48:59,975 [printer.py:reinit()] - Klipper version: v0.12.0-179-g434770ea-dirty
2024-05-08 15:48:59,975 [printer.py:reinit()] - # Extruders: 1
2024-05-08 15:48:59,975 [printer.py:reinit()] - # Temperature devices: 3
2024-05-08 15:48:59,975 [printer.py:reinit()] - # Fans: 5
2024-05-08 15:48:59,975 [printer.py:reinit()] - # Output pins: 1
2024-05-08 15:48:59,975 [printer.py:reinit()] - # Leds: 2
2024-05-08 15:48:59,975 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-05-08 15:48:59,987 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-05-08 15:48:59,989 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-05-08 15:49:00,269 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-05-08 15:49:00,269 [screen.py:init_klipper()] - Printer initialized
2024-05-08 15:49:00,270 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-05-08 15:49:00,270 [printer.py:change_state()] - Adding callback for state: ready
2024-05-08 15:49:00,270 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-05-08 15:49:00,273 [screen.py:_load_panel()] - Loading panel: main_menu
2024-05-08 15:49:00,352 [main_menu.py:__init__()] - ### Making MainMenu
2024-05-08 15:49:00,365 [main_menu.py:add_device()] - Adding device: extruder
2024-05-08 15:49:00,373 [main_menu.py:add_device()] - Adding device: heater_bed
2024-05-08 15:49:00,379 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-05-08 15:49:00,383 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-05-08 15:49:00,417 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-05-08 15:49:00,418 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:49:00,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 15:49:05,852 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 15:49:05,867 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:40:08,571 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 22:40:09,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:40:09,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:40:14,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:40:14,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:40:19,523 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:40:19,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:40:24,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:40:24,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:40:26,238 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 22:40:29,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:40:29,534 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:40:30,363 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 22:40:34,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:40:34,546 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:40:39,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:40:39,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:40:44,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:40:44,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:40:49,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:40:49,548 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:40:54,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:40:54,547 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:40:59,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:40:59,545 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:04,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:04,552 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:09,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:09,548 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:14,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:14,555 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:19,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:19,548 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:24,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:24,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:29,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:29,547 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:34,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:34,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:39,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:39,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:44,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:44,554 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:49,525 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:49,559 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:54,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:54,553 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:41:59,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:41:59,552 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:04,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:04,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:09,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:09,552 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:14,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:14,551 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:19,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:19,548 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:24,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:24,553 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:29,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:29,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:34,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:34,552 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:39,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:39,546 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:44,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:44,546 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:49,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:49,553 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:54,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:54,545 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:42:59,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:42:59,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:04,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:04,556 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:09,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:09,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:14,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:14,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:19,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:19,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:24,526 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:24,555 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:29,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:29,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:34,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:34,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:39,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:39,559 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:44,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:44,555 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:49,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:49,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:54,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:54,556 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:43:59,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:43:59,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:04,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:04,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:09,523 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:09,553 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:14,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:14,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:19,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:19,551 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:24,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:24,547 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:29,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:29,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:34,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:34,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:39,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:39,557 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:44,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:44,535 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:49,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:49,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:54,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:54,553 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:44:59,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:44:59,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:04,522 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:04,554 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:09,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:09,552 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:14,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:14,552 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:19,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:19,554 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:24,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:24,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:29,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:29,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:34,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:34,552 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:39,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:39,556 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:44,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:44,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:49,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:49,547 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:54,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:54,554 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:45:59,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:45:59,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:04,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:04,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:09,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:09,556 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:14,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:14,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:19,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:19,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:24,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:24,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:29,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:29,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:34,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:34,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:39,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:39,559 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:44,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:44,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:49,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:49,552 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:54,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:54,551 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:46:59,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:46:59,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:04,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:04,555 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:09,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:09,553 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:14,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:14,549 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:19,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:19,551 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:24,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:24,551 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:29,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:29,548 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:34,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:34,537 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:39,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:39,552 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:44,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:44,547 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:49,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:49,550 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:54,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:54,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:47:59,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:47:59,554 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:48:04,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:48:04,538 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:48:09,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:48:09,552 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:48:14,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:48:14,536 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:48:16,102 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-05-08 22:48:16,102 [printer.py:change_state()] - Adding callback for state: printing
2024-05-08 22:48:16,111 [screen.py:_load_panel()] - Loading panel: job_status
2024-05-08 22:48:16,244 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-05-08 22:48:16,250 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-05-08 22:48:16,266 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1.gcode Size: 385833
2024-05-08 22:48:16,266 [job_status.py:show_file_thumbnail()] - Body1.gcode
2024-05-08 22:48:16,266 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-05-08 22:48:19,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:48:19,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:48:24,522 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:48:24,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:48:29,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:48:29,546 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:48:34,523 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:48:34,556 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:48:36,209 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-05-08 22:48:39,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-05-08 22:48:39,548 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-05-08 22:48:44,522 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
