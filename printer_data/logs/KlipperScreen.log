2024-04-22 01:00:43,801 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '5.', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\n\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'lis2dw': {'cs_pin': 'cartographer:PA3', 'spi_bus': 'spi1'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}, 'cartographer model default': {'model_coef': '1.4711812019653276,\n1.9094745664628197,\n0.7622228301595559,\n0.3272285810884628,\n0.35005214332292356,\n0.3321280355049826,\n-0.2625227207315976,\n-0.2864279763879038,\n0.22967673647312103,\n0.16966370873812742', 'model_domain': '3.247181162459674e-07,3.333975001478977e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.797560', 'model_offset': '0.10500'}, 'cartographer model FlatSingle-Cold': {'model_coef': '1.4711812019653276,\n1.9094745664628197,\n0.7622228301595559,\n0.3272285810884628,\n0.35005214332292356,\n0.3321280355049826,\n-0.2625227207315976,\n-0.2864279763879038,\n0.22967673647312103,\n0.16966370873812742', 'model_domain': '3.247181162459674e-07,3.333975001478977e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.797560', 'model_offset': '-0.03000'}, 'cartographer model StructSingle-Cold': {'model_coef': '1.3518075164383603,\n1.7863674140091501,\n0.7491022161421897,\n0.3418034486422346,\n0.474786021574374,\n0.466327567527803,\n-0.36077266680925035,\n-0.4233856645228799,\n0.3341420760703143,\n0.2789694162262722', 'model_domain': '3.1806767070840717e-07,3.3272009864110665e-07', 'model_range': '0.100000,5.000000', 'model_temp': '27.516956', 'model_offset': '-0.10500'}, 'cartographer model StrucktDbl-Cold': {'model_coef': '1.4539724547957718,\n1.890512457294597,\n0.7738465232272026,\n0.35584469223771087,\n0.3058002859398506,\n0.2538645469905682,\n-0.15927877633630289,\n-0.15992801513549426,\n0.17525677096686262,\n0.11070473232515006', 'model_domain': '3.239643669724778e-07,3.332857136863782e-07', 'model_range': '0.100000,5.000000', 'model_temp': '27.161944', 'model_offset': '0.21500'}, 'cartographer model DiamondDbl-Cold': {'model_coef': '1.46311906240812,\n1.9097451316039786,\n0.7860367034010269,\n0.2979412543104158,\n0.25188048441647043,\n0.42375248063163695,\n-0.09331589610001519,\n-0.39478873981561685,\n0.1425927310786974,\n0.21482543483049402', 'model_domain': '3.2466691052783215e-07,3.3339049405392883e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.966772', 'model_offset': '-0.07500'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 5.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\n\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'lis2dw': {'axes_map': ['x', 'y', 'z'], 'cs_pin': 'cartographer:PA3', 'spi_speed': 5000000, 'spi_bus': 'spi1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'cartographer model default': {'model_coef': [1.4711812019653276, 1.9094745664628197, 0.7622228301595559, 0.3272285810884628, 0.35005214332292356, 0.3321280355049826, -0.2625227207315976, -0.2864279763879038, 0.22967673647312103, 0.16966370873812742], 'model_temp': 26.79756, 'model_domain': [3.247181162459674e-07, 3.333975001478977e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.105}, 'cartographer model flatsingle-cold': {'model_coef': [1.4711812019653276, 1.9094745664628197, 0.7622228301595559, 0.3272285810884628, 0.35005214332292356, 0.3321280355049826, -0.2625227207315976, -0.2864279763879038, 0.22967673647312103, 0.16966370873812742], 'model_temp': 26.79756, 'model_domain': [3.247181162459674e-07, 3.333975001478977e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.03}, 'cartographer model structsingle-cold': {'model_coef': [1.3518075164383603, 1.7863674140091501, 0.7491022161421897, 0.3418034486422346, 0.474786021574374, 0.466327567527803, -0.36077266680925035, -0.4233856645228799, 0.3341420760703143, 0.2789694162262722], 'model_temp': 27.516956, 'model_domain': [3.1806767070840717e-07, 3.3272009864110665e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.105}, 'cartographer model strucktdbl-cold': {'model_coef': [1.4539724547957718, 1.890512457294597, 0.7738465232272026, 0.35584469223771087, 0.3058002859398506, 0.2538645469905682, -0.15927877633630289, -0.15992801513549426, 0.17525677096686262, 0.11070473232515006], 'model_temp': 27.161944, 'model_domain': [3.239643669724778e-07, 3.332857136863782e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.215}, 'cartographer model diamonddbl-cold': {'model_coef': [1.46311906240812, 1.9097451316039786, 0.7860367034010269, 0.2979412543104158, 0.25188048441647043, 0.42375248063163695, -0.09331589610001519, -0.39478873981561685, 0.1425927310786974, 0.21482543483049402], 'model_temp': 26.966772, 'model_domain': [3.2466691052783215e-07, 3.3339049405392883e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.075}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-22 01:00:43,806 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 01:00:43,807 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-22 01:00:43,807 [printer.py:reinit()] - # Extruders: 1
2024-04-22 01:00:43,807 [printer.py:reinit()] - # Temperature devices: 3
2024-04-22 01:00:43,807 [printer.py:reinit()] - # Fans: 5
2024-04-22 01:00:43,807 [printer.py:reinit()] - # Output pins: 1
2024-04-22 01:00:43,807 [printer.py:reinit()] - # Leds: 2
2024-04-22 01:00:43,807 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-22 01:00:43,812 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-22 01:00:43,812 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-04-22 01:00:43,812 [functions.py:log_start()] - Python version: 3.11
2024-04-22 01:00:43,824 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-22 01:00:43,831 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-22 01:00:44,084 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-22 01:00:44,084 [screen.py:init_klipper()] - Printer initialized
2024-04-22 01:00:44,084 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-22 01:00:44,085 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 01:00:44,086 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-22 01:00:44,088 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-22 01:00:44,171 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-22 01:00:44,186 [main_menu.py:add_device()] - Adding device: extruder
2024-04-22 01:00:44,194 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-22 01:00:44,200 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-22 01:00:44,205 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-22 01:00:44,242 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 01:00:44,243 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 01:00:44,257 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 01:00:49,585 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 01:00:49,615 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:32:49,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:32:49,342 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:32:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:32:54,356 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:32:59,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:32:59,354 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:04,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:09,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:14,342 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:19,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:24,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:29,352 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:34,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:34,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:39,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:44,355 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:49,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:49,341 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:54,352 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:33:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:33:59,354 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:04,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:04,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:09,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:14,342 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:19,354 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:24,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:29,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:29,352 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:34,341 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:39,342 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:44,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:49,342 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:54,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:34:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:34:59,342 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:04,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:09,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:14,342 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:16,417 [main_menu.py:toggle_visibility()] - Graph show False: extruder
2024-04-22 09:35:18,462 [screen.py:_load_panel()] - Loading panel: temperature
2024-04-22 09:35:18,477 [temperature.py:add_device()] - Adding device: extruder
2024-04-22 09:35:18,482 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-22 09:35:18,487 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-22 09:35:18,491 [temperature.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-22 09:35:18,497 [temperature.py:select_heater()] - Selecting extruder
2024-04-22 09:35:18,498 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-22 09:35:18,536 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-04-22 09:35:19,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:19,341 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:19,745 [temperature.py:select_heater()] - Deselecting extruder
2024-04-22 09:35:21,217 [temperature.py:select_heater()] - Selecting extruder
2024-04-22 09:35:21,850 [temperature.py:select_heater()] - Deselecting heater_bed
2024-04-22 09:35:24,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:24,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:29,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:29,341 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:29,757 [temperature.py:set_temperature()] - {'bed': 80.0, 'extruder': 240.0}
2024-04-22 09:35:29,757 [temperature.py:set_temperature()] - {'bed': 80.0, 'extruder': 240.0}
2024-04-22 09:35:29,757 [temperature.py:set_temperature()] - name match extruder
2024-04-22 09:35:29,757 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S240.0
2024-04-22 09:35:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:34,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:39,355 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:44,354 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:49,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:50,861 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 09:35:50,939 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 09:35:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:54,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:35:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:35:59,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:04,355 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:05,177 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-22 09:36:05,252 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-22 09:36:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:09,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:11,497 [extrude.py:change_distance()] - ### Distance 25
2024-04-22 09:36:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:14,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:15,841 [extrude.py:change_speed()] - ### Speed 25
2024-04-22 09:36:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:19,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:24,285 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-22 09:36:24,287 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2024-04-22 09:36:24,404 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:24,419 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:27,528 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-22 09:36:27,529 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2024-04-22 09:36:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:29,342 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:30,589 [extrude.py:change_speed()] - ### Speed 5
2024-04-22 09:36:31,533 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-22 09:36:31,534 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-04-22 09:36:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:34,356 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:39,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:40,352 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-22 09:36:40,353 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-04-22 09:36:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:44,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:49,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:51,100 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-04-22 09:36:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:54,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:36:54,688 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2024-04-22 09:36:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:36:59,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:04,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:04,342 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:05,357 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 09:37:05,420 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-04-22 09:37:09,161 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-04-22 09:37:09,161 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-04-22 09:37:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:09,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:14,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:19,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:24,354 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:29,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:34,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:39,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:40,985 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 09:37:41,054 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 09:37:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:44,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:49,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:54,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:37:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:37:59,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:04,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:09,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:14,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:14,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:19,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:24,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:29,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:34,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:39,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:44,344 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:49,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:54,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:38:59,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:38:59,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:04,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:09,335 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:09,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:14,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:19,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:24,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:29,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:34,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:39,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:44,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:49,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:54,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:39:59,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:39:59,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:04,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:09,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:14,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:19,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:24,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:29,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:34,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:39,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:44,099 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-22 09:40:44,100 [printer.py:change_state()] - Adding callback for state: printing
2024-04-22 09:40:44,108 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-22 09:40:44,244 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-22 09:40:44,249 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-22 09:40:44,265 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1.gcode Size: 684964
2024-04-22 09:40:44,265 [job_status.py:show_file_thumbnail()] - Body1.gcode
2024-04-22 09:40:44,265 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-22 09:40:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:44,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:49,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:54,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:40:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:40:59,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:04,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:05,481 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-22 09:41:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:09,353 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:14,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:19,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:19,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:24,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:29,437 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-22 09:41:33,727 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-22 09:41:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:34,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:39,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:44,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:44,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:49,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:49,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:54,334 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:54,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:41:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:41:59,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:04,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:04,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:09,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:14,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:14,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:19,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:24,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:24,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:29,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:34,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:34,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:39,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:44,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:49,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:54,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:42:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:42:59,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:04,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:09,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:14,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:14,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:19,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:24,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:24,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:29,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:34,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:34,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:39,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:44,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:44,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:49,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:54,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:54,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:43:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:43:59,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:04,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:04,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:09,354 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:14,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:19,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:24,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:29,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:34,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:34,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:39,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:44,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:49,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:54,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:44:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:44:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:04,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:04,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:09,341 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:09,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:14,333 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:14,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:19,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:24,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:24,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:34,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:34,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:39,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:44,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:44,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:49,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:54,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:45:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:45:59,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:04,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:04,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:09,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:14,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:14,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:19,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:24,340 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:24,373 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:29,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:29,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:34,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:34,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:39,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:44,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:44,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:49,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:54,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:54,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:46:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:46:59,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:04,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:04,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:09,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:14,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:19,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:24,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:24,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:29,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:34,350 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:39,356 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:44,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:44,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:49,334 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:49,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:54,335 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:54,375 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:47:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:47:59,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:04,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:09,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:14,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:14,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:19,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:19,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:24,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:24,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:29,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:34,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:39,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:44,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:49,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:54,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:54,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:48:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:48:59,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:04,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:04,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:09,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:14,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:14,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:19,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:19,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:24,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:24,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:29,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:34,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:39,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:44,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:49,354 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:54,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:54,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:49:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:49:59,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:04,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:04,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:09,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:14,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:19,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:19,344 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:24,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:29,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:34,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:39,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:44,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:49,356 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:54,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:50:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:50:59,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:04,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:09,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:14,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:19,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:19,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:24,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:24,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:29,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:34,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:39,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:44,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:49,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:54,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:51:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:51:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:04,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:04,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:09,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:14,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:19,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:19,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:24,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:29,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:34,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:39,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:44,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:49,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:54,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:54,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:52:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:52:59,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:04,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:09,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:14,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:19,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:24,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:34,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:39,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:44,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:49,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:54,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:53:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:53:59,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:04,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:09,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:14,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:14,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:19,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:19,351 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:24,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:29,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:34,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:39,351 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:44,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:49,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:54,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:54,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:54:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:54:59,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:04,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:09,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:14,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:19,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:24,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:34,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:39,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:44,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:49,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:54,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:55:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:55:59,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:04,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:09,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:14,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:19,338 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:19,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:24,336 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:24,353 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:34,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:34,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:39,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:44,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:49,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:54,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:56:59,337 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:56:59,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:04,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:09,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:14,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:19,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:24,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:29,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:34,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:39,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:39,350 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:44,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:49,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:50,346 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-22 09:57:50,346 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 09:57:50,352 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'standby'
2024-04-22 09:57:54,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:54,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:57:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:57:59,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:04,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:04,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:09,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:14,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:14,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:19,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:24,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:29,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:34,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:34,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:39,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:44,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:49,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:54,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:54,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:58:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:58:59,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:04,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:04,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:09,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:09,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:14,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:14,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:19,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:24,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:24,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:29,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:34,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:39,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:44,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:49,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:54,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:54,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 09:59:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 09:59:59,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:04,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:04,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:09,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:14,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:14,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:19,145 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1.gcode Size: 712491
2024-04-22 10:00:19,145 [job_status.py:show_file_thumbnail()] - Body1.gcode
2024-04-22 10:00:19,145 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-22 10:00:19,259 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-22 10:00:19,260 [printer.py:change_state()] - Adding callback for state: printing
2024-04-22 10:00:19,265 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-22 10:00:19,273 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1.gcode Size: 712491
2024-04-22 10:00:19,273 [job_status.py:show_file_thumbnail()] - Body1.gcode
2024-04-22 10:00:19,273 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-22 10:00:19,295 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 10:00:19,415 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-22 10:00:19,420 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-22 10:00:19,431 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1.gcode Size: 712491
2024-04-22 10:00:19,432 [job_status.py:show_file_thumbnail()] - Body1.gcode
2024-04-22 10:00:19,432 [job_status.py:show_file_thumbnail()] - no pixbuf
2024-04-22 10:00:19,435 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:19,455 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:24,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:29,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:34,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:34,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:34,516 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-22 10:00:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:39,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:44,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:49,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:54,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:54,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:00:58,220 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-22 10:00:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:00:59,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:02,521 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-22 10:01:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:04,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:09,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:09,371 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:14,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:19,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:24,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:29,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:34,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:39,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:44,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:49,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:54,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:01:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:01:59,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:04,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:09,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:09,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:14,356 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:19,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:24,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:29,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:34,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:39,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:44,342 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:44,375 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:49,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:54,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:02:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:02:59,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:09,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:14,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:19,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:24,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:29,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:34,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:39,338 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:39,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:44,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:44,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:49,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:54,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:03:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:03:59,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:04,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:09,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:09,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:14,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:19,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:24,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:29,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:34,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:39,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:44,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:49,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:54,334 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:54,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:04:59,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:04:59,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:04,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:09,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:09,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:14,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:19,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:24,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:24,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:29,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:34,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:39,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:44,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:49,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:54,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:05:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:05:59,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:09,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:14,340 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:14,373 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:19,334 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:19,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:24,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:34,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:39,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:44,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:49,350 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:54,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:06:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:06:59,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:04,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:09,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:14,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:19,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:24,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:29,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:34,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:39,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:44,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:49,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:54,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:07:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:07:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:04,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:09,350 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:14,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:19,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:24,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:29,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:34,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:39,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:44,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:49,352 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:54,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:08:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:08:59,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:04,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:09,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:14,334 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:14,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:19,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:24,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:29,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:34,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:39,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:44,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:49,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:54,355 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:09:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:09:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:09,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:09,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:14,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:19,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:19,352 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:24,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:29,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:34,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:39,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:44,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:49,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:54,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:10:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:10:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:04,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:09,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:14,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:19,350 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:24,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:34,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:39,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:39,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:44,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:49,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:54,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:11:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:11:59,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:09,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:14,356 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:19,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:24,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:29,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:34,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:39,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:44,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:49,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:54,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:12:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:12:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:04,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:09,352 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:14,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:19,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:24,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:29,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:34,337 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:34,373 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:39,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:44,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:49,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:54,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:13:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:13:59,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:09,353 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:14,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:19,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:24,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:34,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:39,354 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:44,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:49,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:54,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:14:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:14:59,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:04,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:09,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:14,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:19,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:24,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:29,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:34,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:39,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:44,335 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:44,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:49,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:54,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:15:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:15:59,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:04,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:09,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:14,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:19,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:24,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:29,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:34,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:39,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:44,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:44,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:49,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:54,341 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:54,373 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:16:59,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:16:59,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:04,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:09,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:14,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:19,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:24,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:29,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:34,356 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:39,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:44,353 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:49,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:49,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:54,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:54,344 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:17:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:17:59,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:04,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:09,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:14,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:19,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:19,350 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:24,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:34,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:39,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:39,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:44,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:49,350 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:54,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:18:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:18:59,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:04,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:09,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:14,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:19,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:24,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:29,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:34,343 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:34,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:39,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:44,344 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:49,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:49,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:54,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:19:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:19:59,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:09,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:14,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:19,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:24,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:34,337 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:34,355 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:39,338 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:39,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:44,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:49,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:54,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:20:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:20:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:09,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:14,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:19,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:24,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:34,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:39,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:44,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:49,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:49,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:54,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:21:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:21:59,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:09,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:09,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:14,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:14,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:19,354 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:24,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:34,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:39,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:44,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:44,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:49,335 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:49,372 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:54,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:22:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:22:59,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:04,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:09,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:14,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:14,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:19,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:24,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:29,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:34,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:39,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:44,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:44,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:49,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:49,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:54,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:23:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:23:59,378 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:09,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:14,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:19,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:24,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:29,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:34,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:39,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:39,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:44,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:49,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:54,351 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:24:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:24:59,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:04,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:09,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:14,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:19,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:24,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:24,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:29,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:34,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:39,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:39,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:44,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:49,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:49,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:54,340 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:54,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:25:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:25:59,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:04,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:09,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:14,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:19,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:24,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:29,372 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:34,356 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:39,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:44,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:49,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:54,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:26:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:26:59,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:04,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:09,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:14,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:19,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:24,356 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:29,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:34,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:39,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:44,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:44,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:49,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:49,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:54,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:27:59,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:27:59,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:09,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:14,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:19,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:24,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:29,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:34,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:39,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:44,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:44,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:49,334 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:49,351 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:54,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:28:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:28:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:04,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:09,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:14,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:19,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:24,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:29,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:34,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:39,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:44,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:49,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:54,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:29:59,336 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:29:59,375 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:04,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:04,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:09,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:14,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:19,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:24,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:29,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:34,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:39,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:44,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:44,356 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:49,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:54,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:30:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:30:59,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:04,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:09,341 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:09,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:14,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:19,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:24,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:34,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:39,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:44,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:49,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:54,356 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:31:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:31:59,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:04,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:09,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:14,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:19,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:19,371 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:24,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:29,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:34,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:39,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:44,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:44,344 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:49,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:54,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:32:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:32:59,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:09,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:14,336 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:14,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:19,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:19,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:24,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:29,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:34,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:39,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:44,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:49,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:54,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:54,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:33:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:33:59,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:04,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:09,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:14,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:19,351 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:24,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:29,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:34,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:39,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:44,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:49,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:49,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:54,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:34:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:34:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:09,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:14,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:19,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:24,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:24,349 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:29,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:29,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:34,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:39,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:44,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:49,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:54,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:35:54,696 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-22 10:35:54,696 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 10:35:54,706 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-04-22 10:35:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:35:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:04,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:09,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:09,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:14,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:19,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:24,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:29,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:29,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:34,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:39,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:39,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:44,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:49,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:49,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:54,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:36:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:36:59,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:04,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:09,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:14,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:19,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:24,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:29,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:34,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:39,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:41,327 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-22 10:37:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:44,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:49,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:54,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:37:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:37:59,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:04,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:09,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:14,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:19,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:24,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:29,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:34,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:39,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:44,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:49,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:54,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:38:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:38:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:04,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:09,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:14,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:19,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:24,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:29,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:34,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:39,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:44,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:49,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:54,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:39:59,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:39:59,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:04,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:09,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:14,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:19,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:24,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:29,375 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:34,348 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:39,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:44,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:49,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:54,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:40:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:40:59,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:04,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:09,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:14,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:19,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:24,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:29,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:34,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:39,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:44,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:49,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:54,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:41:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:41:59,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:04,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:09,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:14,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:19,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:24,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:29,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:34,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:39,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:44,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:49,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:54,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:42:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:42:59,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:09,332 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:09,371 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:14,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:19,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:24,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:29,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:34,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:39,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:44,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:49,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:54,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:43:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:43:59,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:04,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:09,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:14,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:19,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:24,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:29,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:34,371 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:39,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:44,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:49,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:54,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:44:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:44:59,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:09,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:14,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:19,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:24,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:29,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:34,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:39,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:44,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:49,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:54,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:45:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:45:59,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:04,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:09,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:14,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:19,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:24,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:29,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:34,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:39,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:44,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:49,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:54,373 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:46:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:46:59,373 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:04,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:09,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:14,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:19,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:24,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:29,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:34,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:39,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:44,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:49,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:54,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:47:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:47:59,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:04,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:09,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:14,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:19,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:24,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:29,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:34,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:39,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:44,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:49,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:54,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:48:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:48:59,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:04,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:09,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:14,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:19,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:24,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:29,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:34,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:39,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:44,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:49,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:54,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:49:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:49:59,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:04,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:09,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:14,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:19,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:24,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:29,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:34,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:39,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:44,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:49,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:54,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:50:59,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:50:59,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:04,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:09,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:14,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:19,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:24,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:29,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:34,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:39,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:44,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:49,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:54,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:51:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:51:59,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:04,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:09,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:14,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:19,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:24,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:29,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:34,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:39,371 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:44,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:49,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:54,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:52:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:52:59,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:04,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:09,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:14,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:19,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:24,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:29,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:34,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:39,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:44,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:49,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:54,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:53:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:53:59,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:04,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:09,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:14,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:19,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:24,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:29,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:34,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:39,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:44,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:49,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:54,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:54:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:54:59,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:09,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:14,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:19,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:24,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:29,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:34,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:39,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:44,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:49,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:54,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:55:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:55:59,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:04,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:09,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:09,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:14,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:19,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:24,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:29,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:34,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:39,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:44,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:49,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:54,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:56:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:56:59,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:04,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:09,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:14,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:19,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:24,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:29,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:29,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:34,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:39,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:44,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:49,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:54,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:57:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:57:59,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:04,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:09,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:14,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:19,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:24,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:29,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:34,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:39,372 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:44,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:49,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:54,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:58:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:58:59,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:04,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:09,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:14,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:19,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:24,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:29,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:34,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:39,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:44,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:49,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:49,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:54,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 10:59:59,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 10:59:59,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:04,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:09,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:14,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:19,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:24,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:29,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:34,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:39,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:44,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:49,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:54,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:00:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:00:59,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:04,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:09,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:14,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:19,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:24,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:29,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:34,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:39,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:44,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:49,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:49,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:54,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:01:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:01:59,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:04,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:09,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:14,373 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:19,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:19,371 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:24,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:29,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:34,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:39,371 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:44,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:49,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:54,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:02:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:02:59,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:04,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:09,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:09,346 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:14,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:19,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:24,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:29,367 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:34,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:39,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:39,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:44,345 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:49,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:54,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:03:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:03:59,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:04,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:09,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:14,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:19,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:24,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:29,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:29,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:34,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:39,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:44,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:49,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:54,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:04:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:04:59,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:04,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:04,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:09,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:14,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:19,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:24,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:29,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:34,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:34,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:39,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:44,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:44,358 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:49,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:54,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:05:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:05:59,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:04,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:09,371 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:14,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:14,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:19,365 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:24,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:24,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:29,368 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:34,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:39,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:44,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:49,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:54,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:06:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:06:59,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:04,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:09,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:14,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:14,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:19,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:19,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:24,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:24,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:29,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:29,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:34,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:34,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:39,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:44,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:44,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:49,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:49,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:54,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:54,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:07:59,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:07:59,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:08:04,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:08:04,357 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:08:04,359 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-22 11:08:26,842 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-22 11:08:26,842 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-04-22 11:08:26,843 [functions.py:log_start()] - Python version: 3.11
2024-04-22 11:08:27,062 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-22 11:08:27,062 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-22 11:08:27,088 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-22 11:08:27,089 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

[graph Printer]
extruder = False

=======================
2024-04-22 11:08:27,090 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-22 11:08:27,298 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-22 11:08:27,298 [config.py:install_language()] - Using lang en
2024-04-22 11:08:27,326 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-22 11:08:27,327 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-22 11:08:27,330 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-22 11:08:27,335 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-22 11:08:28,898 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-22 11:08:28,899 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-22 11:08:28,909 [screen.py:initial_connection()] - Default printer: None
2024-04-22 11:08:28,953 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-22 11:08:28,954 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-22 11:08:29,036 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 11:08:29,046 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-22 11:08:29,046 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 11:08:29,068 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-22 11:08:38,899 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-22 11:08:38,899 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 11:08:38,910 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-22 11:08:38,918 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-22 11:08:38,924 [_logging.py:info()] - Websocket connected
2024-04-22 11:08:38,924 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-22 11:08:38,924 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 11:08:38,931 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-22 11:08:38,938 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-22 11:08:38,938 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 11:08:38,938 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-22 11:08:38,946 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-22 11:08:39,077 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '5.', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\n\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'lis2dw': {'cs_pin': 'cartographer:PA3', 'spi_bus': 'spi1'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}, 'cartographer model default': {'model_coef': '1.4711812019653276,\n1.9094745664628197,\n0.7622228301595559,\n0.3272285810884628,\n0.35005214332292356,\n0.3321280355049826,\n-0.2625227207315976,\n-0.2864279763879038,\n0.22967673647312103,\n0.16966370873812742', 'model_domain': '3.247181162459674e-07,3.333975001478977e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.797560', 'model_offset': '0.10500'}, 'cartographer model FlatSingle-Cold': {'model_coef': '1.4711812019653276,\n1.9094745664628197,\n0.7622228301595559,\n0.3272285810884628,\n0.35005214332292356,\n0.3321280355049826,\n-0.2625227207315976,\n-0.2864279763879038,\n0.22967673647312103,\n0.16966370873812742', 'model_domain': '3.247181162459674e-07,3.333975001478977e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.797560', 'model_offset': '-0.03000'}, 'cartographer model StructSingle-Cold': {'model_coef': '1.3518075164383603,\n1.7863674140091501,\n0.7491022161421897,\n0.3418034486422346,\n0.474786021574374,\n0.466327567527803,\n-0.36077266680925035,\n-0.4233856645228799,\n0.3341420760703143,\n0.2789694162262722', 'model_domain': '3.1806767070840717e-07,3.3272009864110665e-07', 'model_range': '0.100000,5.000000', 'model_temp': '27.516956', 'model_offset': '-0.10500'}, 'cartographer model StrucktDbl-Cold': {'model_coef': '1.4539724547957718,\n1.890512457294597,\n0.7738465232272026,\n0.35584469223771087,\n0.3058002859398506,\n0.2538645469905682,\n-0.15927877633630289,\n-0.15992801513549426,\n0.17525677096686262,\n0.11070473232515006', 'model_domain': '3.239643669724778e-07,3.332857136863782e-07', 'model_range': '0.100000,5.000000', 'model_temp': '27.161944', 'model_offset': '0.21500'}, 'cartographer model DiamondDbl-Cold': {'model_coef': '1.46311906240812,\n1.9097451316039786,\n0.7860367034010269,\n0.2979412543104158,\n0.25188048441647043,\n0.42375248063163695,\n-0.09331589610001519,\n-0.39478873981561685,\n0.1425927310786974,\n0.21482543483049402', 'model_domain': '3.2466691052783215e-07,3.3339049405392883e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.966772', 'model_offset': '-0.07500'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 5.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\n\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'lis2dw': {'axes_map': ['x', 'y', 'z'], 'cs_pin': 'cartographer:PA3', 'spi_speed': 5000000, 'spi_bus': 'spi1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'cartographer model default': {'model_coef': [1.4711812019653276, 1.9094745664628197, 0.7622228301595559, 0.3272285810884628, 0.35005214332292356, 0.3321280355049826, -0.2625227207315976, -0.2864279763879038, 0.22967673647312103, 0.16966370873812742], 'model_temp': 26.79756, 'model_domain': [3.247181162459674e-07, 3.333975001478977e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.105}, 'cartographer model flatsingle-cold': {'model_coef': [1.4711812019653276, 1.9094745664628197, 0.7622228301595559, 0.3272285810884628, 0.35005214332292356, 0.3321280355049826, -0.2625227207315976, -0.2864279763879038, 0.22967673647312103, 0.16966370873812742], 'model_temp': 26.79756, 'model_domain': [3.247181162459674e-07, 3.333975001478977e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.03}, 'cartographer model structsingle-cold': {'model_coef': [1.3518075164383603, 1.7863674140091501, 0.7491022161421897, 0.3418034486422346, 0.474786021574374, 0.466327567527803, -0.36077266680925035, -0.4233856645228799, 0.3341420760703143, 0.2789694162262722], 'model_temp': 27.516956, 'model_domain': [3.1806767070840717e-07, 3.3272009864110665e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.105}, 'cartographer model strucktdbl-cold': {'model_coef': [1.4539724547957718, 1.890512457294597, 0.7738465232272026, 0.35584469223771087, 0.3058002859398506, 0.2538645469905682, -0.15927877633630289, -0.15992801513549426, 0.17525677096686262, 0.11070473232515006], 'model_temp': 27.161944, 'model_domain': [3.239643669724778e-07, 3.332857136863782e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.215}, 'cartographer model diamonddbl-cold': {'model_coef': [1.46311906240812, 1.9097451316039786, 0.7860367034010269, 0.2979412543104158, 0.25188048441647043, 0.42375248063163695, -0.09331589610001519, -0.39478873981561685, 0.1425927310786974, 0.21482543483049402], 'model_temp': 26.966772, 'model_domain': [3.2466691052783215e-07, 3.3339049405392883e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.075}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-22 11:08:39,081 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 11:08:39,082 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-22 11:08:39,082 [printer.py:reinit()] - # Extruders: 1
2024-04-22 11:08:39,082 [printer.py:reinit()] - # Temperature devices: 3
2024-04-22 11:08:39,082 [printer.py:reinit()] - # Fans: 5
2024-04-22 11:08:39,082 [printer.py:reinit()] - # Output pins: 1
2024-04-22 11:08:39,082 [printer.py:reinit()] - # Leds: 2
2024-04-22 11:08:39,082 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-22 11:08:39,096 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-22 11:08:39,098 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-22 11:08:39,373 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-22 11:08:39,373 [screen.py:init_klipper()] - Printer initialized
2024-04-22 11:08:39,374 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-22 11:08:39,374 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 11:08:39,375 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-22 11:08:39,377 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-22 11:08:39,466 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-22 11:08:39,480 [main_menu.py:add_device()] - Adding device: extruder
2024-04-22 11:08:39,489 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-22 11:08:39,495 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-22 11:08:39,500 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-22 11:08:39,537 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 11:08:39,538 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:08:39,552 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 11:08:44,898 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 11:08:44,924 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:03:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:03:41,283 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:03:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:03:46,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:03:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:03:51,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:03:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:03:56,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:01,282 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:06,295 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:11,282 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:16,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:21,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:26,281 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:31,294 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:36,282 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:41,295 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:46,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:46,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:51,291 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:04:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:04:56,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:01,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:06,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:11,283 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:16,295 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:21,295 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:26,282 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:31,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:36,282 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:41,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:46,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:51,281 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:05:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:05:56,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:01,282 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:06,294 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:11,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:16,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:16,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:21,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:21,283 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:26,295 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:31,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:36,293 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:41,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:46,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:46,293 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:51,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:06:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:06:56,282 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:01,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:06,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:11,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:16,283 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:21,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:26,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:31,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:36,282 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:41,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:46,282 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:51,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:07:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:07:56,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:01,282 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:06,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:11,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:16,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:21,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:26,273 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:26,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:31,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:36,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:41,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:46,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:51,283 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:08:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:08:56,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:01,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:06,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:11,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:16,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:16,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:21,295 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:26,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:31,283 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:36,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:41,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:46,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:51,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:09:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:09:56,283 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:01,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:06,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:11,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:16,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:16,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:21,307 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:26,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:31,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:36,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:41,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:46,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:51,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:10:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:10:56,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:01,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:06,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:11,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:11,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:16,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:16,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:21,306 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:26,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:31,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:36,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:41,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:46,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:46,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:51,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:11:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:11:56,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:01,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:06,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:11,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:11,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:16,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:16,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:21,269 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:21,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:26,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:31,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:36,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:41,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:46,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:51,287 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:12:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:12:56,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:01,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:06,270 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:06,289 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:11,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:16,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:21,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:26,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:31,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:36,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:41,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:46,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:51,306 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:13:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:13:56,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:01,234 [screen.py:_load_panel()] - Loading panel: print
2024-04-22 23:14:01,276 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-04-22 23:14:01,278 [print.py:__init__()] - thumbs
2024-04-22 23:14:01,283 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-04-22 23:14:01,309 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-04-22 23:14:01,316 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:01,334 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:01,405 [print.py:load_files()] - Loaded in 0.071 seconds
2024-04-22 23:14:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:06,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:11,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:16,294 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:21,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:21,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:26,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:31,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:36,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:41,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:46,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:51,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:14:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:14:56,306 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:01,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:06,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:08,813 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 23:15:08,888 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 23:15:11,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:11,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:16,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:16,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:21,269 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:21,287 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:26,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:31,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:36,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:41,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:46,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:51,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:15:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:15:56,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:01,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:06,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:11,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:11,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:16,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:21,307 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:26,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:31,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:36,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:41,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:46,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:51,306 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:16:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:16:56,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:01,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:06,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:11,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:11,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:16,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:21,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:21,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:26,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:31,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:36,269 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:36,291 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:41,288 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:46,307 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:51,306 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:17:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:17:56,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:01,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:06,306 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:11,308 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:16,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:16,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:21,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:26,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:31,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:36,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:41,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:46,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:46,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:51,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:18:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:18:56,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:01,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:06,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:11,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:11,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:16,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:21,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:26,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:31,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:36,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:41,287 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:46,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:51,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:19:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:19:56,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:01,269 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:01,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:06,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:11,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:11,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:16,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:21,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:26,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:31,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:36,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:41,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:46,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:51,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:55,859 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-22 23:20:55,927 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-22 23:20:56,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:20:56,471 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:20:59,820 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 23:20:59,893 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 23:21:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:01,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:21:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:06,307 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:21:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:11,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:21:16,269 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:16,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:21:21,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:21,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:21:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:26,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:21:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:31,306 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:21:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:36,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:21:37,942 [screen.py:_load_panel()] - Loading panel: temperature
2024-04-22 23:21:37,957 [temperature.py:add_device()] - Adding device: extruder
2024-04-22 23:21:37,963 [temperature.py:add_device()] - Adding device: heater_bed
2024-04-22 23:21:37,968 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-22 23:21:37,974 [temperature.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-22 23:21:37,979 [temperature.py:select_heater()] - Selecting extruder
2024-04-22 23:21:37,980 [temperature.py:select_heater()] - Selecting heater_bed
2024-04-22 23:21:38,021 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-04-22 23:21:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:41,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:21:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:46,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:21:49,284 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S10.0
2024-04-22 23:21:49,285 [temperature.py:change_target_temp_incremental()] - Setting extruder to 10.0
2024-04-22 23:21:49,285 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S10.0
2024-04-22 23:21:49,285 [temperature.py:change_target_temp_incremental()] - Setting heater_bed to 10.0
2024-04-22 23:21:49,756 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S20.0
2024-04-22 23:21:49,757 [temperature.py:change_target_temp_incremental()] - Setting extruder to 20.0
2024-04-22 23:21:49,757 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S20.0
2024-04-22 23:21:49,758 [temperature.py:change_target_temp_incremental()] - Setting heater_bed to 20.0
2024-04-22 23:21:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:51,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:21:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:21:56,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:00,793 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2024-04-22 23:22:00,794 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S0
2024-04-22 23:22:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:01,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:02,757 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 23:22:02,833 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 23:22:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:06,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:11,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:16,269 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:16,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:21,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:21,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:26,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:31,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:36,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:41,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:46,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:51,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:22:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:22:56,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:01,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:06,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:11,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:16,296 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:21,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:21,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:26,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:31,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:36,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:41,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:46,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:46,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:51,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:23:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:23:56,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:01,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:06,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:11,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:16,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:16,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:21,308 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:26,271 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:26,307 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:31,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:36,307 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:41,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:46,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:46,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:51,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:24:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:24:56,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:01,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:06,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:11,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:16,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:21,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:21,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:26,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:31,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:36,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:41,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:46,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:51,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:25:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:25:56,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:01,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:06,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:11,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:16,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:16,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:21,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:26,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:31,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:36,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:41,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:46,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:51,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:26:56,270 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:26:56,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:01,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:06,269 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:06,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:11,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:11,311 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:16,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:21,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:21,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:26,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:31,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:36,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:41,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:46,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:51,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:27:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:27:56,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:01,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:06,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:11,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:16,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:16,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:21,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:21,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:26,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:31,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:36,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:41,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:46,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:46,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:51,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:28:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:28:56,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:01,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:06,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:06,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:11,306 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:16,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:21,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:26,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:31,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:36,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:41,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:46,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:51,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:51,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:29:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:29:56,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:01,272 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:01,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:06,286 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:11,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:16,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:16,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:19,320 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-04-22 23:30:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:21,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:26,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:31,307 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:36,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:41,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:46,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:46,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:51,308 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:30:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:30:56,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:01,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:06,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:11,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:11,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:16,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:21,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:21,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:26,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:26,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:31,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:36,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:41,285 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:46,306 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:51,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:31:56,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:31:56,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:01,306 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:06,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:11,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:11,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:16,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:21,297 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:26,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:31,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:31,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:36,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:36,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:41,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:41,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:46,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:46,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:51,305 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:32:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:32:56,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:01,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:01,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:06,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:11,271 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:11,310 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:16,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:16,303 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:21,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:21,301 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:26,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:26,306 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:31,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:31,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:36,268 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:36,307 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:41,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:41,287 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:46,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:46,304 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:51,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:51,302 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:33:56,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:33:56,299 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:34:01,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:34:01,300 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:34:03,813 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-22 23:34:03,875 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 23:34:05,629 [screen.py:_load_panel()] - Loading panel: shutdown
2024-04-22 23:34:05,667 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > shutdown
2024-04-22 23:34:06,267 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:34:06,284 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:34:08,064 [shutdown.py:reboot_poweroff()] - http://127.0.0.1:7125
2024-04-22 23:34:08,141 [KlippyGtk.py:Dialog()] - Showing dialog Shutdown (width=800, height=480)
2024-04-22 23:34:09,384 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-22 23:34:26,556 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-22 23:34:26,556 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-04-22 23:34:26,556 [functions.py:log_start()] - Python version: 3.11
2024-04-22 23:34:26,680 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-22 23:34:26,681 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-22 23:34:26,695 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-22 23:34:26,696 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

[graph Printer]
extruder = False

=======================
2024-04-22 23:34:26,697 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-22 23:34:26,781 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-22 23:34:26,781 [config.py:install_language()] - Using lang en
2024-04-22 23:34:26,796 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-22 23:34:26,796 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-22 23:34:26,798 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-22 23:34:26,801 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-22 23:34:27,707 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-22 23:34:27,708 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-22 23:34:27,714 [screen.py:initial_connection()] - Default printer: None
2024-04-22 23:34:27,757 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-22 23:34:27,758 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-22 23:34:27,860 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 23:34:27,875 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-22 23:34:27,875 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 23:34:27,900 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-22 23:34:37,873 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-22 23:34:37,873 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 23:34:37,891 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-22 23:34:37,906 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-22 23:34:37,915 [_logging.py:info()] - Websocket connected
2024-04-22 23:34:37,915 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-22 23:34:37,917 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 23:34:37,926 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-22 23:34:37,935 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-22 23:34:37,935 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 23:34:37,936 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-22 23:34:37,953 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-22 23:34:38,038 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '5.', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\n\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'lis2dw': {'cs_pin': 'cartographer:PA3', 'spi_bus': 'spi1'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}, 'cartographer model default': {'model_coef': '1.4711812019653276,\n1.9094745664628197,\n0.7622228301595559,\n0.3272285810884628,\n0.35005214332292356,\n0.3321280355049826,\n-0.2625227207315976,\n-0.2864279763879038,\n0.22967673647312103,\n0.16966370873812742', 'model_domain': '3.247181162459674e-07,3.333975001478977e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.797560', 'model_offset': '0.10500'}, 'cartographer model FlatSingle-Cold': {'model_coef': '1.4711812019653276,\n1.9094745664628197,\n0.7622228301595559,\n0.3272285810884628,\n0.35005214332292356,\n0.3321280355049826,\n-0.2625227207315976,\n-0.2864279763879038,\n0.22967673647312103,\n0.16966370873812742', 'model_domain': '3.247181162459674e-07,3.333975001478977e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.797560', 'model_offset': '-0.03000'}, 'cartographer model StructSingle-Cold': {'model_coef': '1.3518075164383603,\n1.7863674140091501,\n0.7491022161421897,\n0.3418034486422346,\n0.474786021574374,\n0.466327567527803,\n-0.36077266680925035,\n-0.4233856645228799,\n0.3341420760703143,\n0.2789694162262722', 'model_domain': '3.1806767070840717e-07,3.3272009864110665e-07', 'model_range': '0.100000,5.000000', 'model_temp': '27.516956', 'model_offset': '-0.10500'}, 'cartographer model StrucktDbl-Cold': {'model_coef': '1.4539724547957718,\n1.890512457294597,\n0.7738465232272026,\n0.35584469223771087,\n0.3058002859398506,\n0.2538645469905682,\n-0.15927877633630289,\n-0.15992801513549426,\n0.17525677096686262,\n0.11070473232515006', 'model_domain': '3.239643669724778e-07,3.332857136863782e-07', 'model_range': '0.100000,5.000000', 'model_temp': '27.161944', 'model_offset': '0.21500'}, 'cartographer model DiamondDbl-Cold': {'model_coef': '1.46311906240812,\n1.9097451316039786,\n0.7860367034010269,\n0.2979412543104158,\n0.25188048441647043,\n0.42375248063163695,\n-0.09331589610001519,\n-0.39478873981561685,\n0.1425927310786974,\n0.21482543483049402', 'model_domain': '3.2466691052783215e-07,3.3339049405392883e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.966772', 'model_offset': '-0.07500'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 5.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\n\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'lis2dw': {'axes_map': ['x', 'y', 'z'], 'cs_pin': 'cartographer:PA3', 'spi_speed': 5000000, 'spi_bus': 'spi1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'cartographer model default': {'model_coef': [1.4711812019653276, 1.9094745664628197, 0.7622228301595559, 0.3272285810884628, 0.35005214332292356, 0.3321280355049826, -0.2625227207315976, -0.2864279763879038, 0.22967673647312103, 0.16966370873812742], 'model_temp': 26.79756, 'model_domain': [3.247181162459674e-07, 3.333975001478977e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.105}, 'cartographer model flatsingle-cold': {'model_coef': [1.4711812019653276, 1.9094745664628197, 0.7622228301595559, 0.3272285810884628, 0.35005214332292356, 0.3321280355049826, -0.2625227207315976, -0.2864279763879038, 0.22967673647312103, 0.16966370873812742], 'model_temp': 26.79756, 'model_domain': [3.247181162459674e-07, 3.333975001478977e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.03}, 'cartographer model structsingle-cold': {'model_coef': [1.3518075164383603, 1.7863674140091501, 0.7491022161421897, 0.3418034486422346, 0.474786021574374, 0.466327567527803, -0.36077266680925035, -0.4233856645228799, 0.3341420760703143, 0.2789694162262722], 'model_temp': 27.516956, 'model_domain': [3.1806767070840717e-07, 3.3272009864110665e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.105}, 'cartographer model strucktdbl-cold': {'model_coef': [1.4539724547957718, 1.890512457294597, 0.7738465232272026, 0.35584469223771087, 0.3058002859398506, 0.2538645469905682, -0.15927877633630289, -0.15992801513549426, 0.17525677096686262, 0.11070473232515006], 'model_temp': 27.161944, 'model_domain': [3.239643669724778e-07, 3.332857136863782e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.215}, 'cartographer model diamonddbl-cold': {'model_coef': [1.46311906240812, 1.9097451316039786, 0.7860367034010269, 0.2979412543104158, 0.25188048441647043, 0.42375248063163695, -0.09331589610001519, -0.39478873981561685, 0.1425927310786974, 0.21482543483049402], 'model_temp': 26.966772, 'model_domain': [3.2466691052783215e-07, 3.3339049405392883e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.075}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-22 23:34:38,043 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 23:34:38,045 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-22 23:34:38,045 [printer.py:reinit()] - # Extruders: 1
2024-04-22 23:34:38,045 [printer.py:reinit()] - # Temperature devices: 3
2024-04-22 23:34:38,046 [printer.py:reinit()] - # Fans: 5
2024-04-22 23:34:38,046 [printer.py:reinit()] - # Output pins: 1
2024-04-22 23:34:38,046 [printer.py:reinit()] - # Leds: 2
2024-04-22 23:34:38,046 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-22 23:34:38,070 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-22 23:34:38,073 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-22 23:34:38,353 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-22 23:34:38,353 [screen.py:init_klipper()] - Printer initialized
2024-04-22 23:34:38,354 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-22 23:34:38,354 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 23:34:38,355 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-22 23:34:38,365 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-22 23:34:38,503 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-22 23:34:38,533 [main_menu.py:add_device()] - Adding device: extruder
2024-04-22 23:34:38,550 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-22 23:34:38,564 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-22 23:34:38,575 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-22 23:34:38,632 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 23:34:38,633 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:34:38,654 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:34:38,691 [screen.py:show_popup_message()] - echo: 
2024-04-22 23:34:43,872 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:34:43,886 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:34:48,876 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:34:48,901 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:39:26,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:39:26,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:39:31,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:39:31,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:39:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:39:36,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:39:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:39:41,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:39:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:39:46,369 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:39:51,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:39:51,359 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:39:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:39:56,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:01,375 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:06,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:11,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:16,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:16,372 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:21,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:21,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:26,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:26,373 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:31,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:31,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:36,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:36,372 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:41,371 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:46,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:51,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:51,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:40:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:40:56,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:01,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:06,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:11,375 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:16,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:21,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:21,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:26,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:26,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:31,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:31,378 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:36,373 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:41,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:46,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:51,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:51,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:41:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:41:56,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:01,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:06,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:11,375 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:16,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:21,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:21,375 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:26,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:26,372 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:31,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:31,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:36,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:41,360 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:46,372 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:51,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:51,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:42:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:42:56,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:01,382 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:06,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:11,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:16,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:21,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:21,375 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:26,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:26,382 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:31,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:31,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:36,383 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:41,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:46,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:46,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:51,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:51,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:43:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:43:56,378 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:01,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:01,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:06,382 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:11,375 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:16,380 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:21,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:21,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:26,351 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:26,366 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:31,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:31,378 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:36,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:41,375 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:46,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:51,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:51,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:44:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:44:56,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:01,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:01,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:06,385 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:11,383 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:16,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:21,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:21,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:26,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:26,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:31,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:31,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:36,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:36,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:41,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:46,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:51,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:51,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:45:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:45:56,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:01,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:06,383 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:11,382 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:16,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:21,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:21,378 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:26,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:26,361 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:31,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:31,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:36,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:41,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:46,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:51,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:51,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:46:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:46:56,378 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:01,380 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:06,378 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:11,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:11,373 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:16,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:21,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:21,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:26,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:26,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:31,352 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:31,384 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:36,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:41,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:46,378 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:51,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:51,384 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:47:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:47:56,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:01,383 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:06,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:06,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:11,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:16,380 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:21,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:21,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:26,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:26,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:31,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:31,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:36,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:36,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:41,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:41,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:46,374 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:51,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:51,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:48:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:48:56,382 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:01,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:06,380 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:11,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:16,382 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:21,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:21,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:26,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:26,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:31,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:31,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:36,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:41,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:46,370 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:51,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:51,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:49:56,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:49:56,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:01,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:06,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:11,380 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:16,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:21,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:21,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:26,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:26,380 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:31,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:31,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:36,383 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:41,384 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:46,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:51,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:51,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:50:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:50:56,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:01,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:06,380 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:11,384 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:16,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:16,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:21,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:21,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:26,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:26,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:31,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:31,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:36,378 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:41,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:46,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:46,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:51,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:51,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:51:56,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:51:56,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:01,376 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:06,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:11,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:11,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:16,388 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:21,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:21,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:26,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:26,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:31,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:31,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:36,378 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:41,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:46,379 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:51,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:51,378 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:52:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:52:56,383 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:01,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:01,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:06,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:11,362 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:16,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:21,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:21,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:26,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:26,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:31,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:31,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:36,383 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:41,353 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:41,387 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:46,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:46,381 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:51,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:51,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:53:56,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:53:56,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:54:01,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:54:01,384 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:54:06,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:54:06,364 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:54:11,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:54:11,377 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:54:16,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:54:16,363 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:54:37,818 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-22 23:54:37,818 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-04-22 23:54:37,818 [functions.py:log_start()] - Python version: 3.11
2024-04-22 23:54:38,030 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-22 23:54:38,031 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-22 23:54:38,057 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-22 23:54:38,059 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

[graph Printer]
extruder = False

=======================
2024-04-22 23:54:38,059 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-22 23:54:38,230 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-22 23:54:38,230 [config.py:install_language()] - Using lang en
2024-04-22 23:54:38,246 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-22 23:54:38,247 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-22 23:54:38,249 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-22 23:54:38,255 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-22 23:54:39,755 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-22 23:54:39,755 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-22 23:54:39,761 [screen.py:initial_connection()] - Default printer: None
2024-04-22 23:54:39,796 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-22 23:54:39,796 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-22 23:54:39,863 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 23:54:39,875 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-22 23:54:39,875 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 23:54:39,900 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-22 23:54:49,810 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-22 23:54:49,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 23:54:49,818 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-22 23:54:49,826 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-22 23:54:49,832 [_logging.py:info()] - Websocket connected
2024-04-22 23:54:49,832 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-22 23:54:49,833 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 23:54:49,839 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-22 23:54:49,846 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-22 23:54:49,846 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 23:54:49,846 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-22 23:54:49,853 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-22 23:54:49,925 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '5.', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\n\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'lis2dw': {'cs_pin': 'cartographer:PA3', 'spi_bus': 'spi1'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}, 'cartographer model default': {'model_coef': '1.4711812019653276,\n1.9094745664628197,\n0.7622228301595559,\n0.3272285810884628,\n0.35005214332292356,\n0.3321280355049826,\n-0.2625227207315976,\n-0.2864279763879038,\n0.22967673647312103,\n0.16966370873812742', 'model_domain': '3.247181162459674e-07,3.333975001478977e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.797560', 'model_offset': '0.10500'}, 'cartographer model FlatSingle-Cold': {'model_coef': '1.4711812019653276,\n1.9094745664628197,\n0.7622228301595559,\n0.3272285810884628,\n0.35005214332292356,\n0.3321280355049826,\n-0.2625227207315976,\n-0.2864279763879038,\n0.22967673647312103,\n0.16966370873812742', 'model_domain': '3.247181162459674e-07,3.333975001478977e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.797560', 'model_offset': '-0.03000'}, 'cartographer model StructSingle-Cold': {'model_coef': '1.3518075164383603,\n1.7863674140091501,\n0.7491022161421897,\n0.3418034486422346,\n0.474786021574374,\n0.466327567527803,\n-0.36077266680925035,\n-0.4233856645228799,\n0.3341420760703143,\n0.2789694162262722', 'model_domain': '3.1806767070840717e-07,3.3272009864110665e-07', 'model_range': '0.100000,5.000000', 'model_temp': '27.516956', 'model_offset': '-0.10500'}, 'cartographer model StrucktDbl-Cold': {'model_coef': '1.4539724547957718,\n1.890512457294597,\n0.7738465232272026,\n0.35584469223771087,\n0.3058002859398506,\n0.2538645469905682,\n-0.15927877633630289,\n-0.15992801513549426,\n0.17525677096686262,\n0.11070473232515006', 'model_domain': '3.239643669724778e-07,3.332857136863782e-07', 'model_range': '0.100000,5.000000', 'model_temp': '27.161944', 'model_offset': '0.21500'}, 'cartographer model DiamondDbl-Cold': {'model_coef': '1.46311906240812,\n1.9097451316039786,\n0.7860367034010269,\n0.2979412543104158,\n0.25188048441647043,\n0.42375248063163695,\n-0.09331589610001519,\n-0.39478873981561685,\n0.1425927310786974,\n0.21482543483049402', 'model_domain': '3.2466691052783215e-07,3.3339049405392883e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.966772', 'model_offset': '-0.07500'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 5.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\n\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'lis2dw': {'axes_map': ['x', 'y', 'z'], 'cs_pin': 'cartographer:PA3', 'spi_speed': 5000000, 'spi_bus': 'spi1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'cartographer model default': {'model_coef': [1.4711812019653276, 1.9094745664628197, 0.7622228301595559, 0.3272285810884628, 0.35005214332292356, 0.3321280355049826, -0.2625227207315976, -0.2864279763879038, 0.22967673647312103, 0.16966370873812742], 'model_temp': 26.79756, 'model_domain': [3.247181162459674e-07, 3.333975001478977e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.105}, 'cartographer model flatsingle-cold': {'model_coef': [1.4711812019653276, 1.9094745664628197, 0.7622228301595559, 0.3272285810884628, 0.35005214332292356, 0.3321280355049826, -0.2625227207315976, -0.2864279763879038, 0.22967673647312103, 0.16966370873812742], 'model_temp': 26.79756, 'model_domain': [3.247181162459674e-07, 3.333975001478977e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.03}, 'cartographer model structsingle-cold': {'model_coef': [1.3518075164383603, 1.7863674140091501, 0.7491022161421897, 0.3418034486422346, 0.474786021574374, 0.466327567527803, -0.36077266680925035, -0.4233856645228799, 0.3341420760703143, 0.2789694162262722], 'model_temp': 27.516956, 'model_domain': [3.1806767070840717e-07, 3.3272009864110665e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.105}, 'cartographer model strucktdbl-cold': {'model_coef': [1.4539724547957718, 1.890512457294597, 0.7738465232272026, 0.35584469223771087, 0.3058002859398506, 0.2538645469905682, -0.15927877633630289, -0.15992801513549426, 0.17525677096686262, 0.11070473232515006], 'model_temp': 27.161944, 'model_domain': [3.239643669724778e-07, 3.332857136863782e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.215}, 'cartographer model diamonddbl-cold': {'model_coef': [1.46311906240812, 1.9097451316039786, 0.7860367034010269, 0.2979412543104158, 0.25188048441647043, 0.42375248063163695, -0.09331589610001519, -0.39478873981561685, 0.1425927310786974, 0.21482543483049402], 'model_temp': 26.966772, 'model_domain': [3.2466691052783215e-07, 3.3339049405392883e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.075}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-22 23:54:49,929 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 23:54:49,930 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-22 23:54:49,930 [printer.py:reinit()] - # Extruders: 1
2024-04-22 23:54:49,930 [printer.py:reinit()] - # Temperature devices: 3
2024-04-22 23:54:49,930 [printer.py:reinit()] - # Fans: 5
2024-04-22 23:54:49,930 [printer.py:reinit()] - # Output pins: 1
2024-04-22 23:54:49,930 [printer.py:reinit()] - # Leds: 2
2024-04-22 23:54:49,930 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-22 23:54:49,942 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-22 23:54:49,943 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-22 23:54:50,235 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-22 23:54:50,235 [screen.py:init_klipper()] - Printer initialized
2024-04-22 23:54:50,235 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-22 23:54:50,236 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 23:54:50,236 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-22 23:54:50,239 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-22 23:54:50,331 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-22 23:54:50,345 [main_menu.py:add_device()] - Adding device: extruder
2024-04-22 23:54:50,352 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-22 23:54:50,358 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-22 23:54:50,363 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-22 23:54:50,396 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 23:54:50,397 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:54:50,409 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-22 23:54:55,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 23:54:55,835 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:14:14,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:14:14,823 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:14:19,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:14:19,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:14:24,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:14:24,823 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:14:29,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:14:29,835 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:14:34,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:14:34,823 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:14:39,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:14:39,836 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:14:44,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:14:44,837 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:14:49,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:14:49,835 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:14:54,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:14:54,835 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:14:59,813 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:14:59,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:04,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:04,835 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:09,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:09,823 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:14,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:14,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:19,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:19,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:24,847 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:29,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:29,823 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:34,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:34,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:39,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:39,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:44,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:44,836 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:49,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:49,836 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:54,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:54,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:15:59,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:15:59,823 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:04,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:04,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:09,823 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:14,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:14,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:19,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:19,833 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:24,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:29,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:29,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:34,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:34,823 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:39,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:39,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:44,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:44,824 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:49,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:49,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:54,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:54,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:16:59,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:16:59,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:04,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:04,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:09,824 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:14,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:14,836 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:19,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:19,824 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:24,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:29,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:29,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:34,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:34,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:39,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:39,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:44,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:44,824 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:49,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:49,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:54,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:54,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:17:59,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:17:59,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:04,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:04,824 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:09,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:09,824 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:14,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:14,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:19,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:19,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:24,845 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:29,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:29,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:34,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:34,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:39,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:39,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:44,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:44,846 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:49,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:49,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:54,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:54,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:18:59,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:18:59,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:04,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:04,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:09,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:14,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:14,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:19,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:19,844 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:24,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:29,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:29,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:34,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:34,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:39,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:39,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:44,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:44,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:49,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:49,846 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:54,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:54,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:19:59,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:19:59,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:04,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:04,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:09,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:14,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:14,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:19,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:19,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:24,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:24,845 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:29,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:29,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:34,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:34,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:39,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:39,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:44,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:44,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:49,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:49,845 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:54,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:54,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:20:59,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:20:59,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:04,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:04,824 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:09,811 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:09,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:14,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:14,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:19,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:19,845 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:24,827 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:29,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:29,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:34,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:34,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:39,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:39,848 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:44,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:44,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:49,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:49,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:54,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:54,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:21:59,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:21:59,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:04,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:04,837 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:09,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:14,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:14,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:19,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:19,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:24,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:29,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:29,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:34,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:34,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:39,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:39,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:44,816 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:44,846 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:49,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:49,845 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:54,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:54,846 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:22:59,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:22:59,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:04,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:04,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:09,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:14,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:14,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:19,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:19,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:24,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:29,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:29,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:34,811 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:34,844 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:39,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:39,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:44,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:44,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:49,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:49,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:54,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:54,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:23:59,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:23:59,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:04,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:04,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:09,827 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:14,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:14,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:19,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:19,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:24,827 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:29,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:29,844 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:34,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:34,827 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:39,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:39,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:44,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:44,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:49,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:49,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:54,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:54,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:24:59,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:24:59,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:04,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:04,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:09,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:14,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:14,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:19,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:19,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:24,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:29,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:29,844 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:34,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:34,847 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:39,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:39,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:44,813 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:44,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:49,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:49,828 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:54,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:54,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:25:59,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:25:59,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:04,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:04,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:09,827 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:14,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:14,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:19,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:19,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:24,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:24,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:29,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:29,837 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:34,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:34,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:39,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:39,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:44,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:44,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:49,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:49,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:54,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:54,827 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:26:59,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:26:59,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:04,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:04,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:09,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:14,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:14,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:19,813 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:19,845 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:24,827 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:29,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:29,844 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:34,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:34,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:39,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:39,845 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:44,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:44,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:49,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:49,847 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:54,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:54,844 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:27:59,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:27:59,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:04,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:04,828 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:09,829 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:14,811 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:14,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:19,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:19,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:24,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:24,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:29,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:29,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:34,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:34,847 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:39,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:39,845 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:44,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:44,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:49,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:49,845 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:54,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:54,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:28:59,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:28:59,847 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:04,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:04,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:09,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:09,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:14,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:14,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:19,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:19,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:24,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:24,846 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:29,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:29,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:34,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:34,845 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:35,758 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-24 16:29:35,758 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-24 16:29:35,762 [screen.py:_load_panel()] - Loading panel: menu
2024-04-24 16:29:36,013 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 16:29:36,025 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 16:29:36,030 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 16:29:36,040 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 16:29:36,051 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 16:29:39,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:39,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:43,504 [screen.py:_load_panel()] - Loading panel: pins
2024-04-24 16:29:43,511 [pins.py:add_pin()] - Adding pin: output_pin caselight 
2024-04-24 16:29:43,568 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > pins
2024-04-24 16:29:44,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:44,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:46,498 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 16:29:46,532 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 16:29:46,545 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 16:29:46,552 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 16:29:46,563 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 16:29:46,572 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 16:29:49,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:49,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:51,709 [screen.py:_load_panel()] - Loading panel: system
2024-04-24 16:29:51,734 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/system_info
2024-04-24 16:29:51,805 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-04-24 16:29:51,824 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': None, 'github_requests_remaining': None, 'github_limit_reset_time': None, 'version_info': {'system': {'package_count': 1, 'package_list': ['rpi-eeprom']}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-325', 'remote_version': 'v0.8.0-327', 'rollback_version': 'v0.8.0-325', 'current_hash': '99b97afc7de1ed16ddc7db29ab6354bd6ea3dfb7', 'remote_hash': '9447494bd50dcc254525a8edc2eb2c90a9528b2c', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '9447494bd50dcc254525a8edc2eb2c90a9528b2c', 'author': 'Eric Callahan', 'date': '1713540481', 'subject': 'file_manager: static type checking fixes', 'message': '', 'tag': None}, {'sha': '44a560003802fea1488118172fedd700cbe0734c', 'author': 'Eric Callahan', 'date': '1712276133', 'subject': 'job_state; check stored state on disconnect', 'message': 'If Klipper disconnects while printing manually set the state\nto "error".\n\nSigned-off-by:  Eric Callahan <arksine.code@gmail.com>', 'tag': None}], 'commits_behind_count': 2, 'git_messages': [], 'full_version_string': 'v0.8.0-325-g99b97afc', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-155', 'remote_version': 'v0.12.0-159', 'rollback_version': 'v0.12.0-143', 'current_hash': '4cfa266e007d57b1a70773a228170c1bd7b2ad14', 'remote_hash': '2425a74638baa87efef3ca02253804d126101c8a', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '2425a74638baa87efef3ca02253804d126101c8a', 'author': "Kevin O'Connor", 'date': '1713204636', 'subject': 'virtual_sdcard: Define a default for on_gcode_error', 'message': "If on_gcode_error is not specified, default to running the\nTURN_OFF_HEATERS command.\n\nSigned-off-by: Kevin O'Connor <kevin@koconnor.net>", 'tag': None}, {'sha': '36f9b26ef9ca7ff7d3c4887b7b1c3534252f5ea4', 'author': 'TheFeralEngineer', 'date': '1712939256', 'subject': 'config: Artillery Sidewinder X3 (#6534)', 'message': 'Signed-off-by: Phil Timpson <theferalengineer@gmail.com>', 'tag': None}, {'sha': '75d7c17656883484d43d15080cfd0441d2b8e322', 'author': 'trofen', 'date': '1712938655', 'subject': ' docs: Fix typo in Resonance_Compensation.md', 'message': 'Signed-off-by: Plynskiy Nikita <nikita53ne@yandex.ru>', 'tag': None}, {'sha': 'c37329e9e22f7d00128e9f52b3cb17075b929ec1', 'author': 'Pedro Lamas', 'date': '1712938385', 'subject': 'homing_override: Adds rawparams support', 'message': 'Signed-off-by: Pedro Lamas <pedrolamas@gmail.com>', 'tag': None}], 'commits_behind_count': 4, 'git_messages': [], 'full_version_string': 'v0.12.0-155-g4cfa266e', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['klippy/extras/gcode_shell_command.py', 'klippy/extras/led_effect.py']"]}, 'fluidd-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'fluidd-core', 'repo_name': 'fluidd-config', 'remote_url': 'https://github.com/fluidd-core/fluidd-config.git', 'recovery_url': 'https://github.com/fluidd-core/fluidd-config.git', 'version': 'v1.2.0-0', 'remote_version': 'v1.2.0-0', 'rollback_version': 'v1.2.0-0', 'current_hash': 'ce48c5854e9ca3ca72b63d0327069fac20e94c7c', 'remote_hash': 'ce48c5854e9ca3ca72b63d0327069fac20e94c7c', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.0-0-gce48c585', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'fluidd': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'fluidd', 'repo_name': 'fluidd', 'owner': 'fluidd-core', 'version': 'v1.29.1', 'remote_version': 'v1.29.1', 'rollback_version': 'v1.29.1', 'last_error': '', 'warnings': [], 'anomalies': []}, 'cartographer': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': ['desc=Cartographer Probe'], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Cartographer3D', 'repo_name': 'cartographer-klipper', 'remote_url': 'https://github.com/Cartographer3D/cartographer-klipper.git', 'recovery_url': 'https://github.com/Cartographer3D/cartographer-klipper.git', 'version': 'v1.0.0-35', 'remote_version': 'v1.0.0-35', 'rollback_version': 'v1.0.0-34', 'current_hash': '77a0a1c66718c1e349e0d3c28895f84e95fab316', 'remote_hash': '77a0a1c66718c1e349e0d3c28895f84e95fab316', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.0.0-35-g77a0a1c6', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'Klipper-Adaptive-Meshing-Purging': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'kyleisah', 'repo_name': 'Klipper-Adaptive-Meshing-Purging', 'remote_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'recovery_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'version': 'v1.1.2-12', 'remote_version': 'v1.1.2-12', 'rollback_version': 'v1.1.2-12', 'current_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'remote_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.1.2-12-gd657271f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'led_effect': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'julianschill', 'repo_name': 'klipper-led_effect', 'remote_url': 'https://github.com/julianschill/klipper-led_effect.git', 'recovery_url': 'https://github.com/julianschill/klipper-led_effect.git', 'version': 'v0.0.10-1', 'remote_version': 'v0.0.10-1', 'rollback_version': 'v0.0.10-1', 'current_hash': 'c735fe52e1070632919f125513a0552e03739a5f', 'remote_hash': 'c735fe52e1070632919f125513a0552e03739a5f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.10-1-gc735fe52', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'klipper-backup': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': False, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'Staubgeborener', 'repo_name': 'klipper-backup', 'remote_url': 'https://github.com/Staubgeborener/klipper-backup.git', 'recovery_url': 'https://github.com/Staubgeborener/klipper-backup.git', 'version': 'v1.2.2-1', 'remote_version': 'v1.2.2-1', 'rollback_version': 'v1.2.2-1', 'current_hash': '62b7cd9c99d7be91e227709eaa6ef6b14261b728', 'remote_hash': '62b7cd9c99d7be91e227709eaa6ef6b14261b728', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.2-1-g62b7cd9c', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'crowsnest': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'crowsnest', 'remote_url': 'https://github.com/mainsail-crew/crowsnest.git', 'recovery_url': 'https://github.com/mainsail-crew/crowsnest.git', 'version': 'v4.1.8-1', 'remote_version': 'v4.1.8-1', 'rollback_version': 'v4.1.8-1', 'current_hash': '6ac4711e17f6f7c51998d1f928166fdaee383bf7', 'remote_hash': '6ac4711e17f6f7c51998d1f928166fdaee383bf7', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v4.1.8-1-g6ac4711e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'Klippain-ShakeTune': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'Frix-x', 'repo_name': 'klippain-shaketune', 'remote_url': 'https://github.com/Frix-x/klippain-shaketune.git', 'recovery_url': 'https://github.com/Frix-x/klippain-shaketune.git', 'version': 'v2.6.1-1', 'remote_version': 'v2.6.1-2', 'rollback_version': 'v2.6.1-1', 'current_hash': 'bf7a98d98b014ac48f1ab6e4499c2275286dd8b6', 'remote_hash': '1ce9fd5c2b6eeaf341b5ebcab50f97037350a6ee', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '1ce9fd5c2b6eeaf341b5ebcab50f97037350a6ee', 'author': 'Félix Boisselier', 'date': '1713353299', 'subject': 'Update README.md', 'message': '', 'tag': None}], 'commits_behind_count': 1, 'git_messages': [], 'full_version_string': 'v2.6.1-1-gbf7a98d9', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 8}
2024-04-24 16:29:51,826 [system.py:_needs_update()] - Klippain-ShakeTune v2.6.1-1 -> v2.6.1-2
2024-04-24 16:29:51,839 [system.py:_needs_update()] - klipper v0.12.0-155 -> v0.12.0-159
2024-04-24 16:29:51,840 [system.py:update_program_info()] - Invalid klipper-backup v1.2.2-1
2024-04-24 16:29:51,845 [system.py:_needs_update()] - moonraker v0.8.0-325 -> v0.8.0-327
2024-04-24 16:29:51,847 [system.py:_needs_update()] - system  -> 1
2024-04-24 16:29:54,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:54,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:29:57,611 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 16:29:57,678 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 16:29:57,704 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 16:29:57,713 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 16:29:57,729 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 16:29:57,740 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 16:29:59,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:29:59,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:30:04,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:30:04,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:30:09,592 [screen.py:_load_panel()] - Loading panel: limits
2024-04-24 16:30:09,605 [limits.py:add_option()] - Adding option: max_accel
2024-04-24 16:30:09,613 [limits.py:add_option()] - Adding option: minimum_cruise_ratio
2024-04-24 16:30:09,621 [limits.py:add_option()] - Adding option: max_velocity
2024-04-24 16:30:09,629 [limits.py:add_option()] - Adding option: square_corner_velocity
2024-04-24 16:30:09,676 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > limits
2024-04-24 16:30:09,677 [limits.py:update_option()] - max_accel 3500.0
2024-04-24 16:30:09,677 [limits.py:update_option()] - minimum_cruise_ratio 0.5
2024-04-24 16:30:09,677 [limits.py:update_option()] - max_velocity 900.0
2024-04-24 16:30:09,678 [limits.py:update_option()] - square_corner_velocity 5.0
2024-04-24 16:30:09,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:30:09,825 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:30:10,982 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 16:30:11,016 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 16:30:11,030 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 16:30:11,035 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 16:30:11,044 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 16:30:11,054 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 16:30:13,078 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 16:30:13,111 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 16:30:14,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:30:14,848 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:30:19,181 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-24 16:30:19,251 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-04-24 16:30:20,101 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:30:20,119 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:30:23,467 [screen.py:show_popup_message()] - echo: ACC_QUERY 
2024-04-24 16:30:23,477 [screen.py:_send_action()] - printer.gcode.script: {'script': 'ACC_QUERY'}
2024-04-24 16:30:25,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:30:25,839 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:30:30,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:30:30,828 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:30:35,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:30:35,842 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:30:40,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:30:40,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:30:45,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:30:45,840 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:30:50,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:30:50,838 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:30:53,863 [screen_panel.py:load_menu()] - loading menu options
2024-04-24 16:30:55,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:30:55,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:00,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:00,849 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:03,806 [screen_panel.py:unload_menu()] - self.menu: ['macros_menu', 'options_menu']
2024-04-24 16:31:05,390 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 16:31:05,474 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 16:31:05,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:05,827 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:10,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:10,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:15,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:15,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:20,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:20,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:25,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:25,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:30,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:30,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:35,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:35,827 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:40,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:40,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:45,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:45,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:50,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:50,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:31:55,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:31:55,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:32:00,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:32:00,843 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:32:07,561 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-24 16:32:07,561 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-04-24 16:32:07,561 [functions.py:log_start()] - Python version: 3.11
2024-04-24 16:32:07,630 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-24 16:32:07,631 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-24 16:32:07,642 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-24 16:32:07,643 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

[graph Printer]
extruder = False

=======================
2024-04-24 16:32:07,644 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-24 16:32:07,695 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-24 16:32:07,695 [config.py:install_language()] - Using lang en
2024-04-24 16:32:07,705 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-24 16:32:07,706 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-24 16:32:07,707 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-24 16:32:07,711 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-24 16:32:07,937 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-24 16:32:07,937 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-24 16:32:07,943 [screen.py:initial_connection()] - Default printer: None
2024-04-24 16:32:07,972 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-24 16:32:07,973 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-24 16:32:08,008 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 16:32:08,017 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-24 16:32:08,017 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 16:32:08,026 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-24 16:32:08,032 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-24 16:32:08,039 [_logging.py:info()] - Websocket connected
2024-04-24 16:32:08,040 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-24 16:32:08,118 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 16:32:08,125 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 16:32:08,132 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 16:32:08,132 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 16:32:08,132 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 16:32:08,139 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 16:32:08,378 [screen.py:init_klipper()] - {'configfile': {'config': {'cartographer': {'canbus_uuid': '89eb26f14edf', 'speed': '40.', 'lift_speed': '5.', 'backlash_comp': '0.5', 'x_offset': '0.', 'y_offset': '21.1', 'trigger_distance': '2.', 'trigger_dive_threshold': '1.5', 'trigger_hysteresis': '0.006', 'cal_nozzle_z': '0.1', 'cal_floor': '0.1', 'cal_ceil': '5.', 'cal_speed': '1.0', 'cal_move_speed': '10.', 'default_model_name': 'default', 'mesh_main_direction': 'x', 'mesh_cluster_size': '1', 'mesh_runs': '2'}, 'gcode_macro A_CARTOGRAPHER_CALIBRATE': {'gcode': '\n\n\nCARTOGRAPHER_CALIBRATE'}, 'gcode_macro B_PROBE_ACCURACY': {'gcode': '\nG28\nPROBE_ACCURACY'}, 'gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH'}, 'gcode_macro D_CARTOGRAPHER_MODEL_LIST': {'gcode': '\nCARTOGRAPHER_MODEL_LIST'}, 'gcode_macro E_CARTOGRAPHER_MODEL_SELECT': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}'}, 'gcode_macro F_CARTOGRAPHER_MODEL_SAVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}'}, 'gcode_macro G_CARTOGRAPHER_MODEL_REMOVE': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}'}, 'gcode_macro H_BED_MESH_CALIBRATE': {'gcode': '\nG28\nBED_MESH_CALIBRATE'}, 'gcode_macro I_BED_MESH_PROFILE_SAVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}'}, 'gcode_macro J_BED_MESH_PROFILE_LOAD': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}'}, 'gcode_macro K_BED_MESH_PROFILE_REMOVE': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}'}, 'gcode_macro L_Z_OFFSET_APPLY_PROBE': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'lis2dw': {'cs_pin': 'cartographer:PA3', 'spi_bus': 'spi1'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}, 'cartographer model default': {'model_coef': '1.4711812019653276,\n1.9094745664628197,\n0.7622228301595559,\n0.3272285810884628,\n0.35005214332292356,\n0.3321280355049826,\n-0.2625227207315976,\n-0.2864279763879038,\n0.22967673647312103,\n0.16966370873812742', 'model_domain': '3.247181162459674e-07,3.333975001478977e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.797560', 'model_offset': '0.10500'}, 'cartographer model FlatSingle-Cold': {'model_coef': '1.4711812019653276,\n1.9094745664628197,\n0.7622228301595559,\n0.3272285810884628,\n0.35005214332292356,\n0.3321280355049826,\n-0.2625227207315976,\n-0.2864279763879038,\n0.22967673647312103,\n0.16966370873812742', 'model_domain': '3.247181162459674e-07,3.333975001478977e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.797560', 'model_offset': '-0.03000'}, 'cartographer model StructSingle-Cold': {'model_coef': '1.3518075164383603,\n1.7863674140091501,\n0.7491022161421897,\n0.3418034486422346,\n0.474786021574374,\n0.466327567527803,\n-0.36077266680925035,\n-0.4233856645228799,\n0.3341420760703143,\n0.2789694162262722', 'model_domain': '3.1806767070840717e-07,3.3272009864110665e-07', 'model_range': '0.100000,5.000000', 'model_temp': '27.516956', 'model_offset': '-0.10500'}, 'cartographer model StrucktDbl-Cold': {'model_coef': '1.4539724547957718,\n1.890512457294597,\n0.7738465232272026,\n0.35584469223771087,\n0.3058002859398506,\n0.2538645469905682,\n-0.15927877633630289,\n-0.15992801513549426,\n0.17525677096686262,\n0.11070473232515006', 'model_domain': '3.239643669724778e-07,3.332857136863782e-07', 'model_range': '0.100000,5.000000', 'model_temp': '27.161944', 'model_offset': '0.21500'}, 'cartographer model DiamondDbl-Cold': {'model_coef': '1.46311906240812,\n1.9097451316039786,\n0.7860367034010269,\n0.2979412543104158,\n0.25188048441647043,\n0.42375248063163695,\n-0.09331589610001519,\n-0.39478873981561685,\n0.1425927310786974,\n0.21482543483049402', 'model_domain': '3.2466691052783215e-07,3.3339049405392883e-07', 'model_range': '0.100000,5.000000', 'model_temp': '26.966772', 'model_offset': '-0.07500'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'cartographer': {'speed': 40.0, 'lift_speed': 5.0, 'backlash_comp': 0.5, 'x_offset': 0.0, 'y_offset': 21.1, 'trigger_distance': 2.0, 'trigger_dive_threshold': 1.5, 'trigger_hysteresis': 0.006, 'z_settling_time': 5, 'cal_nozzle_z': 0.1, 'cal_floor': 0.1, 'cal_ceil': 5.0, 'cal_speed': 1.0, 'cal_move_speed': 10.0, 'default_model_name': 'default', 'zero_reference_cluster_size': 1, 'mesh_main_direction': 'x', 'mesh_overscan': -1, 'mesh_cluster_size': 1.0, 'mesh_runs': 2, 'filter_alpha': 0.5, 'filter_beta': 1e-06, 'canbus_uuid': '89eb26f14edf', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro a_cartographer_calibrate': {'gcode': '\n\n\nCARTOGRAPHER_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro b_probe_accuracy': {'gcode': '\nG28\nPROBE_ACCURACY', 'description': 'G-Code macro'}, 'gcode_macro c_cartographer_estimate_backlash': {'gcode': '\nCARTOGRAPHER_ESTIMATE_BACKLASH', 'description': 'G-Code macro'}, 'gcode_macro d_cartographer_model_list': {'gcode': '\nCARTOGRAPHER_MODEL_LIST', 'description': 'G-Code macro'}, 'gcode_macro e_cartographer_model_select': {'gcode': '\n{% set model=params.MODEL|default(default) %}\nCARTOGRAPHER_MODEL_SELECT NAME={model}', 'description': 'G-Code macro'}, 'gcode_macro f_cartographer_model_save': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_SAVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro g_cartographer_model_remove': {'gcode': '\n{% set name=params.NAME|default(default) %}\nCARTOGRAPHER_MODEL_REMOVE NAME={name}', 'description': 'G-Code macro'}, 'gcode_macro h_bed_mesh_calibrate': {'gcode': '\nG28\nBED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro i_bed_mesh_profile_save': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE SAVE={name}', 'description': 'G-Code macro'}, 'gcode_macro j_bed_mesh_profile_load': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE LOAD={name}', 'description': 'G-Code macro'}, 'gcode_macro k_bed_mesh_profile_remove': {'gcode': '\n{% set name=params.NAME|default(none) %}\nBED_MESH_PROFILE REMOVE={name}', 'description': 'G-Code macro'}, 'gcode_macro l_z_offset_apply_probe': {'gcode': '\nG28\nZ_OFFSET_APPLY_PROBE', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'lis2dw': {'axes_map': ['x', 'y', 'z'], 'cs_pin': 'cartographer:PA3', 'spi_speed': 5000000, 'spi_bus': 'spi1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'cartographer model default': {'model_coef': [1.4711812019653276, 1.9094745664628197, 0.7622228301595559, 0.3272285810884628, 0.35005214332292356, 0.3321280355049826, -0.2625227207315976, -0.2864279763879038, 0.22967673647312103, 0.16966370873812742], 'model_temp': 26.79756, 'model_domain': [3.247181162459674e-07, 3.333975001478977e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.105}, 'cartographer model flatsingle-cold': {'model_coef': [1.4711812019653276, 1.9094745664628197, 0.7622228301595559, 0.3272285810884628, 0.35005214332292356, 0.3321280355049826, -0.2625227207315976, -0.2864279763879038, 0.22967673647312103, 0.16966370873812742], 'model_temp': 26.79756, 'model_domain': [3.247181162459674e-07, 3.333975001478977e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.03}, 'cartographer model structsingle-cold': {'model_coef': [1.3518075164383603, 1.7863674140091501, 0.7491022161421897, 0.3418034486422346, 0.474786021574374, 0.466327567527803, -0.36077266680925035, -0.4233856645228799, 0.3341420760703143, 0.2789694162262722], 'model_temp': 27.516956, 'model_domain': [3.1806767070840717e-07, 3.3272009864110665e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.105}, 'cartographer model strucktdbl-cold': {'model_coef': [1.4539724547957718, 1.890512457294597, 0.7738465232272026, 0.35584469223771087, 0.3058002859398506, 0.2538645469905682, -0.15927877633630289, -0.15992801513549426, 0.17525677096686262, 0.11070473232515006], 'model_temp': 27.161944, 'model_domain': [3.239643669724778e-07, 3.332857136863782e-07], 'model_range': [0.1, 5.0], 'model_offset': 0.215}, 'cartographer model diamonddbl-cold': {'model_coef': [1.46311906240812, 1.9097451316039786, 0.7860367034010269, 0.2979412543104158, 0.25188048441647043, 0.42375248063163695, -0.09331589610001519, -0.39478873981561685, 0.1425927310786974, 0.21482543483049402], 'model_temp': 26.966772, 'model_domain': [3.2466691052783215e-07, 3.3339049405392883e-07], 'model_range': [0.1, 5.0], 'model_offset': -0.075}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 16:32:08,382 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:32:08,383 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 16:32:08,383 [printer.py:reinit()] - # Extruders: 1
2024-04-24 16:32:08,383 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 16:32:08,383 [printer.py:reinit()] - # Fans: 5
2024-04-24 16:32:08,383 [printer.py:reinit()] - # Output pins: 1
2024-04-24 16:32:08,383 [printer.py:reinit()] - # Leds: 2
2024-04-24 16:32:08,383 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 16:32:08,394 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 16:32:08,396 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 16:32:08,687 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 16:32:08,687 [screen.py:init_klipper()] - Printer initialized
2024-04-24 16:32:08,687 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-24 16:32:08,687 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 16:32:08,689 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 16:32:08,692 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-24 16:32:08,755 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 16:32:08,768 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 16:32:08,773 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 16:32:08,778 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 16:32:08,783 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 16:32:08,817 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 16:32:08,818 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:32:08,834 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:32:13,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:32:13,826 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:32:18,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:32:18,844 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:32:23,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:32:23,828 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:32:28,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:32:28,841 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:32:32,722 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-24 16:32:32,722 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 16:32:32,723 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 16:32:32,723 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:32:32,726 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:32:32,794 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 16:32:33,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:32:33,830 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:32:35,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 16:32:35,817 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 16:32:35,822 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 16:32:35,823 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 16:32:35,823 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 16:32:35,829 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 16:32:36,006 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 16:32:36,006 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:32:36,007 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 16:32:36,007 [printer.py:reinit()] - # Extruders: 0
2024-04-24 16:32:36,007 [printer.py:reinit()] - # Temperature devices: 0
2024-04-24 16:32:36,007 [printer.py:reinit()] - # Fans: 0
2024-04-24 16:32:36,007 [printer.py:reinit()] - # Output pins: 0
2024-04-24 16:32:36,007 [printer.py:reinit()] - # Leds: 0
2024-04-24 16:32:36,007 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 16:32:36,016 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 16:32:36,017 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-04-24 16:32:36,258 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 16:32:36,258 [screen.py:init_klipper()] - Printer initialized
2024-04-24 16:32:36,259 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-04-24 16:32:36,259 [printer.py:change_state()] - Adding callback for state: error
2024-04-24 16:32:36,260 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:32:36,295 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 16:34:18,097 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-04-24 16:34:18,097 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 16:34:18,098 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 16:34:18,098 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:34:18,099 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:34:18,164 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 16:34:21,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 16:34:21,816 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 16:34:21,821 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 16:34:21,821 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 16:34:21,821 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 16:34:21,828 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 16:34:22,062 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 16:34:22,062 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:34:22,062 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 16:34:22,062 [printer.py:reinit()] - # Extruders: 0
2024-04-24 16:34:22,062 [printer.py:reinit()] - # Temperature devices: 0
2024-04-24 16:34:22,062 [printer.py:reinit()] - # Fans: 0
2024-04-24 16:34:22,062 [printer.py:reinit()] - # Output pins: 0
2024-04-24 16:34:22,062 [printer.py:reinit()] - # Leds: 0
2024-04-24 16:34:22,062 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 16:34:22,069 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 16:34:22,070 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-04-24 16:34:22,314 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 16:34:22,314 [screen.py:init_klipper()] - Printer initialized
2024-04-24 16:34:22,314 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-04-24 16:34:22,314 [printer.py:change_state()] - Adding callback for state: error
2024-04-24 16:34:22,317 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:34:22,353 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 16:36:13,111 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-04-24 16:36:13,111 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 16:36:13,112 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 16:36:13,112 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:36:13,113 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:36:13,160 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 16:36:16,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 16:36:16,820 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 16:36:16,829 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 16:36:16,829 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 16:36:16,830 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 16:36:16,850 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 16:36:16,886 [screen.py:init_klipper()] - {'configfile': {'config': {'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'probe': {'pin': 'EBBCan: PB9', 'z_offset': '0'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 16:36:16,892 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:36:16,893 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 16:36:16,893 [printer.py:reinit()] - # Extruders: 1
2024-04-24 16:36:16,894 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 16:36:16,894 [printer.py:reinit()] - # Fans: 5
2024-04-24 16:36:16,894 [printer.py:reinit()] - # Output pins: 1
2024-04-24 16:36:16,894 [printer.py:reinit()] - # Leds: 2
2024-04-24 16:36:16,894 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 16:36:16,908 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 16:36:16,910 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 16:36:17,202 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 16:36:17,202 [screen.py:init_klipper()] - Printer initialized
2024-04-24 16:36:17,203 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-24 16:36:17,203 [printer.py:change_state()] - Adding callback for state: startup
2024-04-24 16:36:17,550 [printer.py:change_state()] - Changing state from 'startup' to 'disconnected'
2024-04-24 16:36:17,550 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 16:36:17,550 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 16:36:17,550 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:36:17,551 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:36:17,589 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 16:36:20,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 16:36:20,817 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 16:36:20,823 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 16:36:20,823 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 16:36:20,823 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 16:36:20,830 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 16:36:20,852 [screen.py:init_klipper()] - {'configfile': {'config': {'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'probe': {'pin': 'EBBCan: PB9', 'z_offset': '0'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 16:36:20,856 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:36:20,857 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 16:36:20,857 [printer.py:reinit()] - # Extruders: 1
2024-04-24 16:36:20,857 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 16:36:20,857 [printer.py:reinit()] - # Fans: 5
2024-04-24 16:36:20,857 [printer.py:reinit()] - # Output pins: 1
2024-04-24 16:36:20,857 [printer.py:reinit()] - # Leds: 2
2024-04-24 16:36:20,857 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 16:36:20,868 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 16:36:20,869 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 16:36:21,149 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 16:36:21,149 [screen.py:init_klipper()] - Printer initialized
2024-04-24 16:36:21,149 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-24 16:36:21,149 [printer.py:change_state()] - Adding callback for state: startup
2024-04-24 16:36:22,844 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-24 16:36:22,845 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 16:36:22,845 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 16:36:22,846 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:36:22,907 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 16:36:22,919 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 16:36:22,924 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 16:36:22,928 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 16:36:22,933 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 16:36:22,966 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 16:36:22,967 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:36:22,983 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor cartographer_coil', 'heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:36:24,655 [screen.py:show_popup_message()] - echo: 
2024-04-24 16:36:27,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:36:27,828 [printer.py:init_temp_store()] - Tempstore has changed
2024-04-24 16:36:27,829 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 16:36:27,838 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:36:27,840 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-24 16:36:27,853 [screen.py:init_tempstore()] - Temperature store size: 600
2024-04-24 16:36:27,883 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 16:36:27,887 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:36:27,951 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 16:36:27,964 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 16:36:27,969 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 16:36:27,974 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 16:36:27,979 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 16:36:28,016 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 16:51:10,154 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-24 16:51:10,154 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 16:51:10,155 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 16:51:10,155 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:51:10,158 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:51:10,225 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 16:51:13,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 16:51:13,816 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 16:51:13,822 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 16:51:13,822 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 16:51:13,822 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 16:51:13,829 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 16:51:13,850 [screen.py:init_klipper()] - {'configfile': {'config': {'probe': {'pin': 'EBBCan: PB9', 'x_offset': '0', 'z_offset': '0', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 16:51:13,854 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:51:13,855 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 16:51:13,855 [printer.py:reinit()] - # Extruders: 1
2024-04-24 16:51:13,856 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 16:51:13,856 [printer.py:reinit()] - # Fans: 5
2024-04-24 16:51:13,856 [printer.py:reinit()] - # Output pins: 1
2024-04-24 16:51:13,856 [printer.py:reinit()] - # Leds: 2
2024-04-24 16:51:13,856 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 16:51:13,867 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 16:51:13,868 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 16:51:14,143 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 16:51:14,143 [screen.py:init_klipper()] - Printer initialized
2024-04-24 16:51:14,143 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-24 16:51:14,143 [printer.py:change_state()] - Adding callback for state: startup
2024-04-24 16:51:14,632 [printer.py:change_state()] - Changing state from 'startup' to 'disconnected'
2024-04-24 16:51:14,632 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 16:51:14,633 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 16:51:14,633 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:51:14,635 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:51:14,675 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 16:51:17,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 16:51:17,815 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 16:51:17,821 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 16:51:17,821 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 16:51:17,821 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 16:51:17,829 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 16:51:17,851 [screen.py:init_klipper()] - {'configfile': {'config': {'probe': {'pin': 'EBBCan: PB9', 'x_offset': '0', 'z_offset': '0', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 16:51:17,855 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:51:17,856 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 16:51:17,856 [printer.py:reinit()] - # Extruders: 1
2024-04-24 16:51:17,856 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 16:51:17,856 [printer.py:reinit()] - # Fans: 5
2024-04-24 16:51:17,856 [printer.py:reinit()] - # Output pins: 1
2024-04-24 16:51:17,856 [printer.py:reinit()] - # Leds: 2
2024-04-24 16:51:17,856 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 16:51:17,867 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 16:51:17,868 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 16:51:18,144 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 16:51:18,144 [screen.py:init_klipper()] - Printer initialized
2024-04-24 16:51:18,144 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-24 16:51:18,144 [printer.py:change_state()] - Adding callback for state: startup
2024-04-24 16:51:21,351 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-24 16:51:21,351 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 16:51:21,352 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 16:51:21,355 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:51:21,431 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 16:51:21,443 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 16:51:21,448 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 16:51:21,452 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 16:51:21,457 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 16:51:21,491 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 16:51:21,492 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:51:21,508 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:51:21,509 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-24 16:51:21,516 [screen.py:init_tempstore()] - Temperature store size: 600
2024-04-24 16:51:23,329 [screen.py:show_popup_message()] - echo: 
2024-04-24 16:53:03,741 [screen.py:_load_panel()] - Loading panel: move
2024-04-24 16:53:03,860 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-24 16:53:06,418 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-04-24 16:53:06,420 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 16:53:06,447 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 25.000 0.000 [0.000]
2024-04-24 16:53:13,295 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-04-24 16:53:13,299 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 16:53:13,315 [screen.py:show_popup_message()] - error: Must home axis first: -25.000 0.000 0.000 [0.000]
2024-04-24 16:53:30,327 [screen_panel.py:load_menu()] - loading menu options
2024-04-24 16:53:36,906 [screen_panel.py:unload_menu()] - self.menu: ['move_menu', 'options_menu']
2024-04-24 16:53:42,442 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 16:53:42,504 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 16:53:47,937 [screen.py:_load_panel()] - Loading panel: print
2024-04-24 16:53:47,970 [print.py:__init__()] - Thumbsize: 114.20689655172413
2024-04-24 16:53:47,973 [print.py:__init__()] - thumbs
2024-04-24 16:53:47,981 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-04-24 16:53:48,018 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-04-24 16:53:48,076 [print.py:load_files()] - Loaded in 0.048 seconds
2024-04-24 16:53:49,526 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 16:53:49,558 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 16:53:50,450 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-24 16:53:50,450 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-24 16:53:50,454 [screen.py:_load_panel()] - Loading panel: menu
2024-04-24 16:53:50,637 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 16:53:50,647 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 16:53:50,653 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 16:53:50,663 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 16:53:50,673 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 16:53:52,799 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-04-24 16:53:52,838 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-04-24 16:54:07,967 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 16:54:08,084 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 16:54:08,102 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 16:54:08,109 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 16:54:08,118 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 16:54:08,128 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 16:54:09,494 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 16:54:09,527 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 16:56:34,678 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-24 16:56:34,679 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 16:56:34,679 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 16:56:34,679 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:56:34,683 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9ad03f90>>
2024-04-24 16:56:34,683 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:56:34,744 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 16:56:37,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 16:56:37,816 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 16:56:37,826 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 16:56:37,826 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 16:56:37,826 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 16:56:37,938 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 16:56:37,980 [screen.py:init_klipper()] - {'configfile': {'config': {'probe': {'pin': 'EBBCan: PB9', 'x_offset': '0', 'z_offset': '0', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 16:56:37,984 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 16:56:37,985 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 16:56:37,985 [printer.py:reinit()] - # Extruders: 1
2024-04-24 16:56:37,985 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 16:56:37,985 [printer.py:reinit()] - # Fans: 5
2024-04-24 16:56:37,985 [printer.py:reinit()] - # Output pins: 1
2024-04-24 16:56:37,985 [printer.py:reinit()] - # Leds: 2
2024-04-24 16:56:37,985 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 16:56:37,997 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 16:56:38,000 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 16:56:38,272 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 16:56:38,272 [screen.py:init_klipper()] - Printer initialized
2024-04-24 16:56:38,272 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-24 16:56:38,272 [printer.py:change_state()] - Adding callback for state: startup
2024-04-24 16:56:39,727 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-24 16:56:39,728 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 16:56:39,728 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 16:56:39,731 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9ad03f90>>
2024-04-24 16:56:39,731 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 16:56:39,818 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 16:56:39,831 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 16:56:39,835 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 16:56:39,840 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 16:56:39,845 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 16:56:39,878 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 16:56:39,879 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 16:56:39,894 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 16:56:39,895 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-24 16:56:39,902 [screen.py:init_tempstore()] - Temperature store size: 600
2024-04-24 16:56:41,668 [screen.py:show_popup_message()] - echo: 
2024-04-24 17:01:44,946 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-24 17:01:44,946 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 17:01:44,947 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 17:01:44,947 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 17:01:44,949 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9ad03f90>>
2024-04-24 17:01:44,950 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 17:01:45,004 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 17:01:47,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:01:47,815 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 17:01:47,821 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 17:01:47,821 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 17:01:47,821 [screen.py:init_klipper()] - Klipper not connected
2024-04-24 17:01:50,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:01:50,820 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 17:01:50,820 [screen.py:init_klipper()] - Klipper not connected
2024-04-24 17:01:53,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:01:53,817 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 17:01:53,817 [screen.py:init_klipper()] - Klipper not connected
2024-04-24 17:01:56,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:01:56,821 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 17:01:56,821 [screen.py:init_klipper()] - Klipper not connected
2024-04-24 17:01:59,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:01:59,816 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 17:01:59,816 [screen.py:init_klipper()] - Klipper not connected
2024-04-24 17:02:02,810 [screen.py:init_klipper()] - Stopping Retries
2024-04-24 17:04:31,481 [screen.py:show_popup_message()] - echo: 
2024-04-24 17:04:33,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:04:33,816 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 17:04:33,816 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 17:04:33,824 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 17:04:33,989 [screen.py:init_klipper()] - {'configfile': {'config': {'probe': {'pin': 'EBBCan: PB9', 'x_offset': '0', 'z_offset': '0', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 17:04:33,993 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 17:04:33,994 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 17:04:33,994 [printer.py:reinit()] - # Extruders: 1
2024-04-24 17:04:33,994 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 17:04:33,994 [printer.py:reinit()] - # Fans: 5
2024-04-24 17:04:33,994 [printer.py:reinit()] - # Output pins: 1
2024-04-24 17:04:33,994 [printer.py:reinit()] - # Leds: 2
2024-04-24 17:04:33,995 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 17:04:34,007 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 17:04:34,008 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 17:04:34,288 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 17:04:34,288 [screen.py:init_klipper()] - Printer initialized
2024-04-24 17:04:34,288 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-24 17:04:34,289 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 17:04:34,290 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 17:04:34,292 [files.py:remove_callback()] - callback not found <bound method Panel._callback of <panels.print.Panel object at 0x7f9ad03f90>>
2024-04-24 17:04:34,293 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 17:04:34,357 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 17:04:34,370 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 17:04:34,375 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 17:04:34,380 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 17:04:34,385 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 17:04:34,423 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 17:04:34,423 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 17:04:34,440 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 17:04:34,441 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-24 17:04:34,448 [screen.py:init_tempstore()] - Temperature store size: 600
2024-04-24 17:04:54,631 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-04-24 17:04:54,631 [screen.py:_go_to_submenu()] - #### Menu __main
2024-04-24 17:04:54,638 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 17:04:54,874 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 17:04:54,885 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 17:04:54,890 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 17:04:54,900 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 17:04:54,911 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 17:04:57,303 [screen.py:_load_panel()] - Loading panel: pins
2024-04-24 17:04:57,306 [pins.py:add_pin()] - Adding pin: output_pin caselight 
2024-04-24 17:04:57,335 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > pins
2024-04-24 17:05:00,006 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 17:05:00,068 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 17:05:00,084 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 17:05:00,090 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 17:05:00,099 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 17:05:00,110 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 17:05:11,133 [screen.py:_load_panel()] - Loading panel: limits
2024-04-24 17:05:11,136 [limits.py:add_option()] - Adding option: max_accel
2024-04-24 17:05:11,144 [limits.py:add_option()] - Adding option: minimum_cruise_ratio
2024-04-24 17:05:11,153 [limits.py:add_option()] - Adding option: max_velocity
2024-04-24 17:05:11,161 [limits.py:add_option()] - Adding option: square_corner_velocity
2024-04-24 17:05:11,211 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > limits
2024-04-24 17:05:11,212 [limits.py:update_option()] - max_accel 3500.0
2024-04-24 17:05:11,212 [limits.py:update_option()] - minimum_cruise_ratio 0.5
2024-04-24 17:05:11,212 [limits.py:update_option()] - max_velocity 900.0
2024-04-24 17:05:11,213 [limits.py:update_option()] - square_corner_velocity 5.0
2024-04-24 17:05:15,510 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5.0
2024-04-24 17:05:16,531 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 17:05:16,599 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 17:05:16,611 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 17:05:16,617 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 17:05:16,626 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 17:05:16,636 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 17:05:19,891 [screen.py:_load_panel()] - Loading panel: system
2024-04-24 17:05:19,893 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/machine/system_info
2024-04-24 17:05:19,931 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-04-24 17:05:19,941 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': None, 'github_requests_remaining': None, 'github_limit_reset_time': None, 'version_info': {'system': {'package_count': 1, 'package_list': ['rpi-eeprom']}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-325', 'remote_version': 'v0.8.0-327', 'rollback_version': 'v0.8.0-325', 'current_hash': '99b97afc7de1ed16ddc7db29ab6354bd6ea3dfb7', 'remote_hash': '9447494bd50dcc254525a8edc2eb2c90a9528b2c', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '9447494bd50dcc254525a8edc2eb2c90a9528b2c', 'author': 'Eric Callahan', 'date': '1713540481', 'subject': 'file_manager: static type checking fixes', 'message': '', 'tag': None}, {'sha': '44a560003802fea1488118172fedd700cbe0734c', 'author': 'Eric Callahan', 'date': '1712276133', 'subject': 'job_state; check stored state on disconnect', 'message': 'If Klipper disconnects while printing manually set the state\nto "error".\n\nSigned-off-by:  Eric Callahan <arksine.code@gmail.com>', 'tag': None}], 'commits_behind_count': 2, 'git_messages': [], 'full_version_string': 'v0.8.0-325-g99b97afc', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-155', 'remote_version': 'v0.12.0-159', 'rollback_version': 'v0.12.0-143', 'current_hash': '4cfa266e007d57b1a70773a228170c1bd7b2ad14', 'remote_hash': '2425a74638baa87efef3ca02253804d126101c8a', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '2425a74638baa87efef3ca02253804d126101c8a', 'author': "Kevin O'Connor", 'date': '1713204636', 'subject': 'virtual_sdcard: Define a default for on_gcode_error', 'message': "If on_gcode_error is not specified, default to running the\nTURN_OFF_HEATERS command.\n\nSigned-off-by: Kevin O'Connor <kevin@koconnor.net>", 'tag': None}, {'sha': '36f9b26ef9ca7ff7d3c4887b7b1c3534252f5ea4', 'author': 'TheFeralEngineer', 'date': '1712939256', 'subject': 'config: Artillery Sidewinder X3 (#6534)', 'message': 'Signed-off-by: Phil Timpson <theferalengineer@gmail.com>', 'tag': None}, {'sha': '75d7c17656883484d43d15080cfd0441d2b8e322', 'author': 'trofen', 'date': '1712938655', 'subject': ' docs: Fix typo in Resonance_Compensation.md', 'message': 'Signed-off-by: Plynskiy Nikita <nikita53ne@yandex.ru>', 'tag': None}, {'sha': 'c37329e9e22f7d00128e9f52b3cb17075b929ec1', 'author': 'Pedro Lamas', 'date': '1712938385', 'subject': 'homing_override: Adds rawparams support', 'message': 'Signed-off-by: Pedro Lamas <pedrolamas@gmail.com>', 'tag': None}], 'commits_behind_count': 4, 'git_messages': [], 'full_version_string': 'v0.12.0-155-g4cfa266e', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['klippy/extras/gcode_shell_command.py', 'klippy/extras/led_effect.py']"]}, 'fluidd-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'fluidd-core', 'repo_name': 'fluidd-config', 'remote_url': 'https://github.com/fluidd-core/fluidd-config.git', 'recovery_url': 'https://github.com/fluidd-core/fluidd-config.git', 'version': 'v1.2.0-0', 'remote_version': 'v1.2.0-0', 'rollback_version': 'v1.2.0-0', 'current_hash': 'ce48c5854e9ca3ca72b63d0327069fac20e94c7c', 'remote_hash': 'ce48c5854e9ca3ca72b63d0327069fac20e94c7c', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.0-0-gce48c585', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'fluidd': {'channel': 'stable', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'web', 'info_tags': [], 'name': 'fluidd', 'repo_name': 'fluidd', 'owner': 'fluidd-core', 'version': 'v1.29.1', 'remote_version': 'v1.29.1', 'rollback_version': 'v1.29.1', 'last_error': '', 'warnings': [], 'anomalies': []}, 'cartographer': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': ['desc=Cartographer Probe'], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Cartographer3D', 'repo_name': 'cartographer-klipper', 'remote_url': 'https://github.com/Cartographer3D/cartographer-klipper.git', 'recovery_url': 'https://github.com/Cartographer3D/cartographer-klipper.git', 'version': 'v1.0.0-35', 'remote_version': 'v1.0.0-35', 'rollback_version': 'v1.0.0-34', 'current_hash': '77a0a1c66718c1e349e0d3c28895f84e95fab316', 'remote_hash': '77a0a1c66718c1e349e0d3c28895f84e95fab316', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.0.0-35-g77a0a1c6', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'Klipper-Adaptive-Meshing-Purging': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'kyleisah', 'repo_name': 'Klipper-Adaptive-Meshing-Purging', 'remote_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'recovery_url': 'https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git', 'version': 'v1.1.2-12', 'remote_version': 'v1.1.2-12', 'rollback_version': 'v1.1.2-12', 'current_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'remote_hash': 'd657271f13fc429b5ca36a4f8956b67c9ddf0558', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.1.2-12-gd657271f', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'led_effect': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'julianschill', 'repo_name': 'klipper-led_effect', 'remote_url': 'https://github.com/julianschill/klipper-led_effect.git', 'recovery_url': 'https://github.com/julianschill/klipper-led_effect.git', 'version': 'v0.0.10-1', 'remote_version': 'v0.0.10-1', 'rollback_version': 'v0.0.10-1', 'current_hash': 'c735fe52e1070632919f125513a0552e03739a5f', 'remote_hash': 'c735fe52e1070632919f125513a0552e03739a5f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.10-1-gc735fe52', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'klipper-backup': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': False, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'Staubgeborener', 'repo_name': 'klipper-backup', 'remote_url': 'https://github.com/Staubgeborener/klipper-backup.git', 'recovery_url': 'https://github.com/Staubgeborener/klipper-backup.git', 'version': 'v1.2.2-1', 'remote_version': 'v1.2.2-1', 'rollback_version': 'v1.2.2-1', 'current_hash': '62b7cd9c99d7be91e227709eaa6ef6b14261b728', 'remote_hash': '62b7cd9c99d7be91e227709eaa6ef6b14261b728', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.2-1-g62b7cd9c', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'crowsnest': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'crowsnest', 'remote_url': 'https://github.com/mainsail-crew/crowsnest.git', 'recovery_url': 'https://github.com/mainsail-crew/crowsnest.git', 'version': 'v4.1.8-1', 'remote_version': 'v4.1.8-1', 'rollback_version': 'v4.1.8-1', 'current_hash': '6ac4711e17f6f7c51998d1f928166fdaee383bf7', 'remote_hash': '6ac4711e17f6f7c51998d1f928166fdaee383bf7', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v4.1.8-1-g6ac4711e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'Klippain-ShakeTune': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'Frix-x', 'repo_name': 'klippain-shaketune', 'remote_url': 'https://github.com/Frix-x/klippain-shaketune.git', 'recovery_url': 'https://github.com/Frix-x/klippain-shaketune.git', 'version': 'v2.6.1-1', 'remote_version': 'v2.6.1-2', 'rollback_version': 'v2.6.1-1', 'current_hash': 'bf7a98d98b014ac48f1ab6e4499c2275286dd8b6', 'remote_hash': '1ce9fd5c2b6eeaf341b5ebcab50f97037350a6ee', 'is_dirty': False, 'detached': False, 'commits_behind': [{'sha': '1ce9fd5c2b6eeaf341b5ebcab50f97037350a6ee', 'author': 'Félix Boisselier', 'date': '1713353299', 'subject': 'Update README.md', 'message': '', 'tag': None}], 'commits_behind_count': 1, 'git_messages': [], 'full_version_string': 'v2.6.1-1-gbf7a98d9', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 52}
2024-04-24 17:05:19,943 [system.py:_needs_update()] - Klippain-ShakeTune v2.6.1-1 -> v2.6.1-2
2024-04-24 17:05:19,956 [system.py:_needs_update()] - klipper v0.12.0-155 -> v0.12.0-159
2024-04-24 17:05:19,957 [system.py:update_program_info()] - Invalid klipper-backup v1.2.2-1
2024-04-24 17:05:19,963 [system.py:_needs_update()] - moonraker v0.8.0-325 -> v0.8.0-327
2024-04-24 17:05:19,964 [system.py:_needs_update()] - system  -> 1
2024-04-24 17:05:28,233 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 17:05:28,297 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 17:05:28,320 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 17:05:28,327 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 17:05:28,338 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 17:05:28,348 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 17:05:33,704 [screen.py:_load_panel()] - Loading panel: zcalibrate
2024-04-24 17:05:33,731 [printer.py:get_probe()] - Probe type: probe
2024-04-24 17:05:33,731 [zcalibrate.py:__init__()] - Offset X:0.0 Y:0.0 Z:0.0
2024-04-24 17:05:33,758 [zcalibrate.py:set_functions()] - Mesh: {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}
2024-04-24 17:05:33,759 [zcalibrate.py:set_functions()] - Available functions for calibration: ['probe']
2024-04-24 17:05:33,793 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > zcalibrate
2024-04-24 17:05:36,322 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 17:05:36,356 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 17:05:36,368 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 17:05:36,374 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 17:05:36,385 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 17:05:36,395 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 17:05:38,223 [screen.py:_load_panel()] - Loading panel: bed_mesh
2024-04-24 17:05:38,259 [bed_mesh.py:add_profile()] - Adding Profile: default
2024-04-24 17:05:38,288 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > bed_mesh
2024-04-24 17:05:38,289 [bed_mesh.py:activate_mesh()] - Clearing active profile
2024-04-24 17:05:38,289 [bed_mesh.py:activate_mesh()] - Clearing active profile
2024-04-24 17:05:41,179 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 17:05:41,242 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-04-24 17:05:41,254 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-04-24 17:05:41,259 [menu.py:arrangeMenuItems()] - X > more retraction
2024-04-24 17:05:41,268 [menu.py:arrangeMenuItems()] - X > more power
2024-04-24 17:05:41,282 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-04-24 17:05:44,954 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 17:05:44,987 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 17:05:48,968 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 17:05:49,076 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-24 17:05:51,314 [screen_panel.py:load_menu()] - loading menu options
2024-04-24 17:05:53,749 [screen_panel.py:switch_config_option()] - [main] invert_z toggled True
2024-04-24 17:06:01,776 [screen_panel.py:switch_config_option()] - [main] invert_z toggled False
2024-04-24 17:06:02,539 [screen_panel.py:unload_menu()] - self.menu: ['move_menu', 'options_menu']
2024-04-24 17:12:39,486 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-24 17:12:39,486 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-04-24 17:12:39,486 [functions.py:log_start()] - Python version: 3.11
2024-04-24 17:12:39,732 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-24 17:12:39,733 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-24 17:12:39,760 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-24 17:12:39,762 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

[graph Printer]
extruder = False

=======================
2024-04-24 17:12:39,762 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-24 17:12:40,028 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-24 17:12:40,029 [config.py:install_language()] - Using lang en
2024-04-24 17:12:40,055 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-24 17:12:40,057 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-24 17:12:40,060 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-24 17:12:40,065 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-24 17:12:41,451 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-24 17:12:41,451 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-24 17:12:41,458 [screen.py:initial_connection()] - Default printer: None
2024-04-24 17:12:41,506 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-24 17:12:41,506 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-24 17:12:41,582 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 17:12:41,605 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-24 17:12:41,605 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:12:41,623 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-24 17:12:51,829 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-24 17:12:51,829 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:12:51,836 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-24 17:12:51,843 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-24 17:12:51,848 [_logging.py:info()] - Websocket connected
2024-04-24 17:12:51,848 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-24 17:12:51,849 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:12:51,855 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 17:12:51,862 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 17:12:51,862 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 17:12:51,862 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 17:12:51,871 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 17:12:52,072 [screen.py:init_klipper()] - {'configfile': {'config': {'probe': {'pin': 'EBBCan: PB9', 'x_offset': '0', 'z_offset': '0', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 17:12:52,075 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 17:12:52,076 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 17:12:52,076 [printer.py:reinit()] - # Extruders: 1
2024-04-24 17:12:52,077 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 17:12:52,077 [printer.py:reinit()] - # Fans: 5
2024-04-24 17:12:52,077 [printer.py:reinit()] - # Output pins: 1
2024-04-24 17:12:52,077 [printer.py:reinit()] - # Leds: 2
2024-04-24 17:12:52,077 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 17:12:52,088 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 17:12:52,089 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 17:12:52,378 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 17:12:52,378 [screen.py:init_klipper()] - Printer initialized
2024-04-24 17:12:52,378 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-24 17:12:52,378 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 17:12:52,380 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 17:12:52,382 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-24 17:12:52,461 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 17:12:52,474 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 17:12:52,482 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 17:12:52,487 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 17:12:52,492 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 17:12:52,527 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 17:12:52,528 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 17:12:52,540 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 17:12:52,541 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-24 17:12:52,549 [screen.py:init_tempstore()] - Temperature store size: 600
2024-04-24 17:29:31,069 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-24 17:29:31,070 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-04-24 17:29:31,070 [functions.py:log_start()] - Python version: 3.11
2024-04-24 17:29:31,294 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-24 17:29:31,295 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-24 17:29:31,313 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-24 17:29:31,314 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

[graph Printer]
extruder = False

=======================
2024-04-24 17:29:31,315 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-24 17:29:31,463 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-24 17:29:31,463 [config.py:install_language()] - Using lang en
2024-04-24 17:29:31,479 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-24 17:29:31,481 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-24 17:29:31,484 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-24 17:29:31,490 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-24 17:29:32,869 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-24 17:29:32,869 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-24 17:29:32,881 [screen.py:initial_connection()] - Default printer: None
2024-04-24 17:29:32,932 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-24 17:29:32,933 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-24 17:29:32,993 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 17:29:33,009 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-24 17:29:33,009 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:29:33,024 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-24 17:29:43,036 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-24 17:29:43,036 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:29:43,044 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-24 17:29:43,052 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-24 17:29:43,058 [_logging.py:info()] - Websocket connected
2024-04-24 17:29:43,058 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-24 17:29:43,059 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:29:43,068 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 17:29:43,074 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 17:29:43,074 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 17:29:43,074 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 17:29:43,082 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 17:29:43,180 [screen.py:init_klipper()] - {'configfile': {'config': {'probe': {'pin': 'EBBCan: PB9', 'x_offset': '0', 'z_offset': '0', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 2.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 17:29:43,184 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 17:29:43,185 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 17:29:43,186 [printer.py:reinit()] - # Extruders: 1
2024-04-24 17:29:43,186 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 17:29:43,186 [printer.py:reinit()] - # Fans: 5
2024-04-24 17:29:43,186 [printer.py:reinit()] - # Output pins: 1
2024-04-24 17:29:43,186 [printer.py:reinit()] - # Leds: 2
2024-04-24 17:29:43,187 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 17:29:43,200 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 17:29:43,202 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 17:29:43,479 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 17:29:43,480 [screen.py:init_klipper()] - Printer initialized
2024-04-24 17:29:43,480 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-24 17:29:43,480 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 17:29:43,481 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 17:29:43,483 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-24 17:29:43,577 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 17:29:43,591 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 17:29:43,600 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 17:29:43,606 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 17:29:43,611 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 17:29:43,649 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 17:29:43,650 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 17:29:43,664 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 17:29:43,665 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-24 17:29:43,674 [screen.py:init_tempstore()] - Temperature store size: 600
2024-04-24 17:49:27,466 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-24 17:49:27,466 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 17:49:27,468 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 17:49:27,468 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 17:49:27,472 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 17:49:27,543 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 17:49:30,815 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:49:30,822 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 17:49:30,829 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 17:49:30,829 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 17:49:30,830 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 17:49:30,861 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 17:49:30,901 [screen.py:init_klipper()] - {'configfile': {'config': {'probe': {'pin': '!EBBCan: PB9', 'x_offset': '0', 'z_offset': '0', 'speed': '5', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '!EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 3}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 17:49:30,906 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 17:49:30,907 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 17:49:30,907 [printer.py:reinit()] - # Extruders: 1
2024-04-24 17:49:30,907 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 17:49:30,907 [printer.py:reinit()] - # Fans: 5
2024-04-24 17:49:30,907 [printer.py:reinit()] - # Output pins: 1
2024-04-24 17:49:30,907 [printer.py:reinit()] - # Leds: 2
2024-04-24 17:49:30,907 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 17:49:30,918 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 17:49:30,920 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 17:49:31,195 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 17:49:31,195 [screen.py:init_klipper()] - Printer initialized
2024-04-24 17:49:31,196 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-24 17:49:31,196 [printer.py:change_state()] - Adding callback for state: startup
2024-04-24 17:49:32,647 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-24 17:49:32,648 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 17:49:32,648 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 17:49:32,650 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 17:49:32,709 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 17:49:32,722 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 17:49:32,726 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 17:49:32,731 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 17:49:32,736 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 17:49:32,768 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 17:49:32,769 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 17:49:32,785 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 17:49:32,786 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-24 17:49:32,793 [screen.py:init_tempstore()] - Temperature store size: 600
2024-04-24 17:49:34,603 [screen.py:show_popup_message()] - echo: 
2024-04-24 17:50:10,913 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-24 17:50:10,913 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-11-g574066d
2024-04-24 17:50:10,913 [functions.py:log_start()] - Python version: 3.11
2024-04-24 17:50:11,156 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-24 17:50:11,157 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-24 17:50:11,185 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-24 17:50:11,186 [config.py:__init__()] - ====== Saved Def ======

[main]
use_dpms = False

[graph Printer]
extruder = False

=======================
2024-04-24 17:50:11,187 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-24 17:50:11,327 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-24 17:50:11,328 [config.py:install_language()] - Using lang en
2024-04-24 17:50:11,349 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-24 17:50:11,351 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-24 17:50:11,354 [screen.py:__init__()] - Screen resolution: 800x480
2024-04-24 17:50:11,359 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-04-24 17:50:12,683 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-24 17:50:12,683 [screen.py:set_screenblanking_timeout()] - Not using DPMS
2024-04-24 17:50:12,692 [screen.py:initial_connection()] - Default printer: None
2024-04-24 17:50:12,734 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-24 17:50:12,734 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-24 17:50:12,792 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 17:50:12,803 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-24 17:50:12,803 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:50:12,821 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-24 17:50:22,778 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-24 17:50:22,778 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:50:22,785 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-24 17:50:22,792 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-24 17:50:22,796 [_logging.py:info()] - Websocket connected
2024-04-24 17:50:22,797 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-24 17:50:22,797 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 17:50:22,803 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 17:50:22,809 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 17:50:22,810 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 17:50:22,810 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 17:50:22,817 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 17:50:22,886 [screen.py:init_klipper()] - {'configfile': {'config': {'probe': {'pin': '!EBBCan: PB9', 'x_offset': '0', 'z_offset': '0', 'speed': '5', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '!EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 3}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\nUNSAFE_LIFT_HEAD\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 17:50:22,889 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 17:50:22,890 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 17:50:22,890 [printer.py:reinit()] - # Extruders: 1
2024-04-24 17:50:22,890 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 17:50:22,890 [printer.py:reinit()] - # Fans: 5
2024-04-24 17:50:22,890 [printer.py:reinit()] - # Output pins: 1
2024-04-24 17:50:22,890 [printer.py:reinit()] - # Leds: 2
2024-04-24 17:50:22,891 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 17:50:22,904 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 17:50:22,905 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 17:50:23,193 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 17:50:23,193 [screen.py:init_klipper()] - Printer initialized
2024-04-24 17:50:23,193 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-24 17:50:23,193 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 17:50:23,194 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 17:50:23,196 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-24 17:50:23,286 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 17:50:23,298 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 17:50:23,306 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 17:50:23,312 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 17:50:23,316 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 17:50:23,351 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 17:50:23,352 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 17:50:23,364 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 17:50:23,365 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-24 17:50:23,373 [screen.py:init_tempstore()] - Temperature store size: 600
2024-04-24 17:55:43,065 [screen.py:show_popup_message()] - echo: "Homed axes: x"
2024-04-24 17:55:58,215 [screen.py:show_popup_message()] - echo: "Homed axes: y"
2024-04-24 17:56:10,388 [screen.py:show_popup_message()] - error: Unable to parse move 'G0 X175 Y175 F8000#'
2024-04-24 17:56:15,444 [screen.py:show_popup_message()] - error: Must home axis first: 515.002 527.003 10.000 [0.000]
2024-04-24 17:56:43,509 [screen.py:show_popup_message()] - echo: "Homed axes: xy"
2024-04-24 17:56:45,459 [screen.py:show_popup_message()] - error: Move out of range: 515.002 527.003 10.000 [0.000]
2024-04-24 18:01:23,289 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-24 18:03:10,522 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-24 18:03:15,299 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-24 18:06:40,967 [screen.py:show_popup_message()] - error: Move out of range: -3.000 350.000 3.000 [0.000]
2024-04-24 18:09:52,498 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-24 18:09:52,499 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 18:09:52,499 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 18:09:52,500 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:09:52,503 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:09:52,568 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 18:09:56,131 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 18:09:56,136 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 18:09:56,142 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 18:09:56,142 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 18:09:56,143 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 18:09:56,149 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 18:09:56,289 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 18:09:56,290 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:09:56,290 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 18:09:56,290 [printer.py:reinit()] - # Extruders: 0
2024-04-24 18:09:56,290 [printer.py:reinit()] - # Temperature devices: 0
2024-04-24 18:09:56,290 [printer.py:reinit()] - # Fans: 0
2024-04-24 18:09:56,290 [printer.py:reinit()] - # Output pins: 0
2024-04-24 18:09:56,290 [printer.py:reinit()] - # Leds: 0
2024-04-24 18:09:56,291 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 18:09:56,299 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 18:09:56,299 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-04-24 18:09:56,541 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 18:09:56,542 [screen.py:init_klipper()] - Printer initialized
2024-04-24 18:09:56,542 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-04-24 18:09:56,542 [printer.py:change_state()] - Adding callback for state: error
2024-04-24 18:09:56,545 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:09:56,582 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 18:10:27,005 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-04-24 18:10:27,006 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 18:10:27,006 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 18:10:27,006 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:10:27,007 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:10:27,042 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 18:10:30,130 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 18:10:30,136 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 18:10:30,142 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 18:10:30,142 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 18:10:30,142 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 18:10:30,149 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 18:10:30,170 [screen.py:init_klipper()] - {'configfile': {'config': {'probe': {'pin': '!EBBCan: PB9', 'x_offset': '0', 'z_offset': '0', 'speed': '5', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\n\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '352', 'position_max': '352', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '!EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 3}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\n\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 352.0, 'position_min': 0.0, 'position_max': 352.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 18:10:30,174 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:10:30,175 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 18:10:30,175 [printer.py:reinit()] - # Extruders: 1
2024-04-24 18:10:30,175 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 18:10:30,175 [printer.py:reinit()] - # Fans: 5
2024-04-24 18:10:30,175 [printer.py:reinit()] - # Output pins: 1
2024-04-24 18:10:30,175 [printer.py:reinit()] - # Leds: 2
2024-04-24 18:10:30,175 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 18:10:30,186 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 18:10:30,187 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 18:10:30,478 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 18:10:30,478 [screen.py:init_klipper()] - Printer initialized
2024-04-24 18:10:30,478 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-24 18:10:30,478 [printer.py:change_state()] - Adding callback for state: startup
2024-04-24 18:10:32,160 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-24 18:10:32,160 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 18:10:32,161 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 18:10:32,163 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:10:32,227 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 18:10:32,240 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 18:10:32,246 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 18:10:32,251 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 18:10:32,256 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 18:10:32,292 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 18:10:32,293 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 18:10:32,309 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 18:10:32,310 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-24 18:10:32,317 [screen.py:init_tempstore()] - Temperature store size: 600
2024-04-24 18:10:34,107 [screen.py:show_popup_message()] - echo: 
2024-04-24 18:10:55,030 [screen.py:show_popup_message()] - echo: "Homed axes: x"
2024-04-24 18:11:31,343 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-24 18:12:01,605 [screen.py:show_popup_message()] - error: Unable to parse move 'G0 X350#'
2024-04-24 18:14:04,768 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-24 18:14:04,768 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 18:14:04,769 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 18:14:04,769 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:14:04,772 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:14:04,834 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 18:14:08,130 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 18:14:08,135 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 18:14:08,144 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 18:14:08,144 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 18:14:08,144 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 18:14:08,152 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 18:14:08,297 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 18:14:08,298 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:14:08,298 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 18:14:08,298 [printer.py:reinit()] - # Extruders: 0
2024-04-24 18:14:08,298 [printer.py:reinit()] - # Temperature devices: 0
2024-04-24 18:14:08,298 [printer.py:reinit()] - # Fans: 0
2024-04-24 18:14:08,298 [printer.py:reinit()] - # Output pins: 0
2024-04-24 18:14:08,299 [printer.py:reinit()] - # Leds: 0
2024-04-24 18:14:08,299 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 18:14:08,306 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 18:14:08,307 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-04-24 18:14:08,552 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 18:14:08,552 [screen.py:init_klipper()] - Printer initialized
2024-04-24 18:14:08,552 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-04-24 18:14:08,552 [printer.py:change_state()] - Adding callback for state: error
2024-04-24 18:14:08,553 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:14:08,589 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 18:14:24,971 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-04-24 18:14:24,971 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 18:14:24,972 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 18:14:24,972 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:14:24,974 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:14:25,037 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 18:14:28,130 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 18:14:28,135 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 18:14:28,141 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 18:14:28,142 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 18:14:28,142 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 18:14:28,148 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 18:14:28,182 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 18:14:28,183 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:14:28,183 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 18:14:28,183 [printer.py:reinit()] - # Extruders: 0
2024-04-24 18:14:28,183 [printer.py:reinit()] - # Temperature devices: 0
2024-04-24 18:14:28,183 [printer.py:reinit()] - # Fans: 0
2024-04-24 18:14:28,183 [printer.py:reinit()] - # Output pins: 0
2024-04-24 18:14:28,183 [printer.py:reinit()] - # Leds: 0
2024-04-24 18:14:28,183 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 18:14:28,191 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 18:14:28,192 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-04-24 18:14:28,436 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 18:14:28,436 [screen.py:init_klipper()] - Printer initialized
2024-04-24 18:14:28,437 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-04-24 18:14:28,437 [printer.py:change_state()] - Adding callback for state: error
2024-04-24 18:14:28,438 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:14:28,476 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 18:14:41,539 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-04-24 18:14:41,539 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 18:14:41,540 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 18:14:41,540 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:14:41,542 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:14:41,618 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 18:14:45,130 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 18:14:45,136 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 18:14:45,142 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 18:14:45,142 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 18:14:45,142 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 18:14:45,149 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 18:14:45,248 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 18:14:45,249 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:14:45,249 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 18:14:45,249 [printer.py:reinit()] - # Extruders: 0
2024-04-24 18:14:45,249 [printer.py:reinit()] - # Temperature devices: 0
2024-04-24 18:14:45,249 [printer.py:reinit()] - # Fans: 0
2024-04-24 18:14:45,249 [printer.py:reinit()] - # Output pins: 0
2024-04-24 18:14:45,249 [printer.py:reinit()] - # Leds: 0
2024-04-24 18:14:45,249 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 18:14:45,257 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 18:14:45,258 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-04-24 18:14:45,501 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 18:14:45,501 [screen.py:init_klipper()] - Printer initialized
2024-04-24 18:14:45,501 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-04-24 18:14:45,501 [printer.py:change_state()] - Adding callback for state: error
2024-04-24 18:14:45,504 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:14:45,538 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 18:15:12,376 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-04-24 18:15:12,376 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 18:15:12,377 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 18:15:12,378 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:15:12,379 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:15:12,450 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 18:15:16,130 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 18:15:16,136 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 18:15:16,141 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 18:15:16,142 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 18:15:16,142 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 18:15:16,148 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 18:15:16,169 [screen.py:init_klipper()] - {'configfile': {'config': {'probe': {'pin': '!EBBCan: PB9', 'x_offset': '0', 'z_offset': '0', 'speed': '5', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\n\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '0', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '!EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 3}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\n\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': 0.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 18:15:16,173 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:15:16,174 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 18:15:16,174 [printer.py:reinit()] - # Extruders: 1
2024-04-24 18:15:16,174 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 18:15:16,174 [printer.py:reinit()] - # Fans: 5
2024-04-24 18:15:16,174 [printer.py:reinit()] - # Output pins: 1
2024-04-24 18:15:16,174 [printer.py:reinit()] - # Leds: 2
2024-04-24 18:15:16,174 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 18:15:16,185 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 18:15:16,186 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 18:15:16,468 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 18:15:16,468 [screen.py:init_klipper()] - Printer initialized
2024-04-24 18:15:16,468 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-24 18:15:16,468 [printer.py:change_state()] - Adding callback for state: startup
2024-04-24 18:15:17,668 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-24 18:15:17,668 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 18:15:17,668 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 18:15:17,673 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:15:17,776 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 18:15:17,797 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 18:15:17,803 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 18:15:17,808 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 18:15:17,813 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 18:15:17,848 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 18:15:17,849 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 18:15:17,866 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 18:15:17,867 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-24 18:15:17,874 [screen.py:init_tempstore()] - Temperature store size: 600
2024-04-24 18:15:19,423 [screen.py:show_popup_message()] - echo: 
2024-04-24 18:15:50,142 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-24 18:18:06,482 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-24 18:18:06,483 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-24 18:18:06,483 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-24 18:18:06,483 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:18:06,486 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:18:06,552 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-24 18:18:10,131 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-24 18:18:10,137 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-24 18:18:10,143 [printer.py:configure_cameras()] - Cameras: [{'name': 'PiCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam3/?action=stream', 'snapshot_url': '/webcam3/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '2ad929dc-484a-433a-bf41-43d6a9491bce'}, {'name': 'TopCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer', 'stream_url': '/webcam2/?action=stream', 'snapshot_url': '/webcam2/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': '5dbb8bdc-9990-45c2-8af9-9526fd349219'}, {'name': 'CornerCam', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 5, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 180, 'source': 'database', 'extra_data': {}, 'uid': 'f9049fb9-1fbb-4ad7-b3ae-5e3ad435355c'}]
2024-04-24 18:18:10,143 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-24 18:18:10,143 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-24 18:18:10,150 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-24 18:18:10,171 [screen.py:init_klipper()] - {'configfile': {'config': {'probe': {'pin': '!EBBCan: PB9', 'x_offset': '0', 'z_offset': '0', 'speed': '5', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.005', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'gcode_macro _HOME_X': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'homing_override': {'axes': 'xy', 'gcode': "\n\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro CHECK_HOMING': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}'}, 'gcode_macro QUAD_GANTRY_LEVEL': {'rename_existing': '_QUAD_GANTRY_LEVEL', 'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}"}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'diag_pin': '^P1.29', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'diag_pin': '^P1.28', 'driver_sgthrs': '112', 'interpolate': 'false', 'run_current': '1.2', 'stealthchop_threshold': '0'}, 'stepper_x': {'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'enable_pin': '!P2.1', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_min': '-5', 'position_endstop': '353', 'position_max': '355', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_y': {'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'enable_pin': '!P2.8', 'rotation_distance': '40', 'microsteps': '128', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_min': '0', 'position_endstop': '362', 'position_max': '362', 'homing_speed': '50', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'stepper_z': {'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'enable_pin': '!z:P2.1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '310', 'position_min': '-5', 'homing_speed': '10', 'second_homing_speed': '5', 'homing_retract_dist': '0'}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z1': {'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'enable_pin': '!z:P2.8', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z2': {'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'enable_pin': '!z:P0.21', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'interpolate': 'false', 'run_current': '1.2', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'stepper_z3': {'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'enable_pin': '!z:P2.12', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '128'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'run_current': '1.2', 'interpolate': 'false', 'hold_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'extruder': {'step_pin': 'EBBCan: PD0', 'dir_pin': 'EBBCan: PD1', 'enable_pin': '!EBBCan: PD2', 'rotation_distance': '21.43692518458227', 'gear_ratio': '50:10', 'microsteps': '128', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150.0', 'max_extrude_cross_section': '5', 'heater_pin': 'EBBCan: PB13', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'EBBCan: PA3', 'min_temp': '0', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'control': 'pid', 'pid_kp': '23.572', 'pid_ki': '2.153', 'pid_kd': '64.527'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'interpolate': 'false', 'run_current': '0.5', 'hold_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '1'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}"}, 'delayed_gcode welcome': {'initial_duration': '2', 'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready'}, 'delayed_gcode bed_mesh_init': {'initial_duration': '.01', 'gcode': '\nBED_MESH_CLEAR'}, 'gcode_macro SAVE_Z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}'}, 'gcode_macro PARK_NOZZLE': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY'}, 'gcode_macro MOVE_TO_CENTER': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000'}, 'gcode_macro PUBLISH_ALERT': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}'}, 'gcode_macro DO_HOMING': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL'}, 'force_move': {'enable_force_move': 'True'}, 'gcode_macro UNSAFE_LIFT_HEAD': {'description': 'Lift head 10mm without homing', 'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84'}, 'gcode_macro UNSAVE_X_MOVE_ENABLE': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107'}, 'gcode_macro CLEAN_NOZZLE': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0'}, 'gcode_macro COME_TO_ME': {'description': 'moves printhead in XYZ to the front', 'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!'}, 'gcode_macro DISABLE_Z_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0'}, 'gcode_macro DISABLE_AB_STEPPERS': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0'}, 'gcode_macro ACC_QUERY': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE'}, 'gcode_macro TestResonance_X': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TestResonance_Y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro AXES_MAP_CALIBRATION': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION'}, 'gcode_macro AXES_SHAPER_CALIBRATION': {'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro BELTS_SHAPER_CALIBRATION': {'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers', 'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"'}, 'gcode_macro EXCITATE_AXIS_AT_FREQ': {'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration', 'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400'}, 'gcode_macro VIBRATIONS_CALIBRATION': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': '600.0', 'verbose': 'True'}, 'gcode_arcs': {'resolution': '0.1'}, 'gcode_macro CALIBRATE': {'description': 'Calibrate the printer flow or pressure advance', 'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}'}, 'gcode_macro PRESSURE_ADVANCE_CALIBRATION': {'description': 'Calibrate the pressure advance by printing a grid pattern', 'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION'}, 'gcode_macro _FLOW_CALIB_VARIABLES': {'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0', 'gcode': ''}, 'gcode_macro FLOW_MULTIPLIER_CALIBRATION': {'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell', 'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION'}, 'gcode_macro COMPUTE_FLOW_MULTIPLIER': {'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print', 'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}'}, 'board_pins': {'aliases': '\n\nEXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,\nEXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,\n\nEXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,\nEXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>'}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'a0_pin': 'z:P1.19', 'encoder_pins': '^z:P3.25,^z:P3.26', 'click_pin': '^!z:P0.28', 'contrast': '63'}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': '3', 'initial_red': '0.0', 'initial_green': '1.0', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'delayed_gcode setdisplayneopixel_blue': {'initial_duration': '2', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0'}, 'delayed_gcode setdisplayneopixel': {'initial_duration': '4', 'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0'}, 'menu __main __control __move_001mm': {'type': 'list', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Move 0.01mm'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': "Move Z:{'%06.2f' % menu.input}", 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': '0.01', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis'}, 'heater_bed': {'heater_pin': 'z:P2.3', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'z:P0.25', 'max_power': '1.0', 'min_temp': '5', 'max_temp': '125', 'control': 'pid', 'pid_kp': '56.249', 'pid_ki': '2.451', 'pid_kd': '322.730'}, 'heater_fan hotend_fan': {'pin': 'EBBCan: PA1', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'heater': 'extruder', 'heater_temp': '50.0', 'fan_speed': '0.6'}, 'fan': {'pin': 'EBBCan: PA0', 'max_power': '1.0', 'kick_start_time': '1', 'cycle_time': '0.050', 'off_below': '0.15'}, 'heater_fan controller_fan': {'pin': 'z:P2.4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0', 'fan_speed': '1.0'}, 'heater_fan exhaust_fan': {'pin': 'z:P2.7', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'extruder', 'heater_temp': '200', 'fan_speed': '1.0'}, 'gcode_macro _BEDFANVARS': {'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2', 'gcode': ''}, 'fan_generic BedFans': {'pin': 'P2.3', 'kick_start_time': '0.5'}, 'gcode_macro BEDFANSSLOW': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}'}, 'gcode_macro BEDFANSFAST': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}'}, 'gcode_macro BEDFANSOFF': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0'}, 'gcode_macro SET_HEATER_TEMPERATURE': {'rename_existing': '_SET_HEATER_TEMPERATURE', 'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}'}, 'gcode_macro M190': {'rename_existing': 'M99190', 'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}'}, 'gcode_macro M140': {'rename_existing': 'M99140', 'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}'}, 'gcode_macro TURN_OFF_HEATERS': {'rename_existing': '_TURN_OFF_HEATERS', 'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': '3', 'color_order': 'GRB', 'initial_red': '1.0', 'initial_green': '1.0', 'initial_blue': '1.0'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LIGHTS_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100'}, 'gcode_macro LIGHTS_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50'}, 'gcode_macro LIGHTS_OFF': {'gcode': '\nSET_PIN PIN=caselight VALUE=0'}, 'gcode_macro LED_ALL_RED': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_BLUE': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1'}, 'gcode_macro LED_ALL_GREEN': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1'}, 'gcode_macro LED_ALL_WHITE': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1'}, 'gcode_macro BLINKING_LEDS': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50'}, 'adxl345': {'cs_pin': 'EBBCan: PB12', 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_mosi_pin': 'EBBCan: PB11', 'spi_software_miso_pin': 'EBBCan: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'input_shaper': {'shaper_freq_x': '60.8', 'shaper_type_x': 'ei', 'shaper_freq_y': '36.2', 'shaper_type_y': 'mzv'}, 'mcu EBBCan': {'canbus_uuid': '18d261870712'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '900', 'max_accel': '3500', 'max_z_velocity': '50', 'max_z_accel': '1500', 'square_corner_velocity': '5.0'}, 'idle_timeout': {'timeout': '1800'}, 'output_pin caselight ': {'pin': 'z:P2.5', 'pwm': 'true', 'shutdown_value': '0', 'value': '50', 'cycle_time': '0.01', 'scale': '100'}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'sensor_pin': 'P0.23', 'min_temp': '5', 'max_temp': '80', 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'max_temp': '100'}, 'exclude_object': {}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n325,305\n325,5\n25,5\n25,305', 'speed': '1000', 'horizontal_move_z': '5', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'algorithm': 'bicubic', 'speed': '1000', 'horizontal_move_z': '5', 'probe_count': '9,9', 'fade_start': '0.6', 'fade_end': '10.0', 'mesh_min': '40, 40', 'mesh_max': '310,310', 'adaptive_margin': '5', 'zero_reference_position': '175,175'}, 'gcode_macro DATA_SAMPLE': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019116, 0.004968, -0.023674\n0.007393, 0.000000, -0.025204\n0.022538, 0.016209, -0.005839', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '150.237', 'max_x': '199.836', 'min_y': '150.228', 'max_y': '199.828'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu ebbcan': {'canbus_uuid': '18d261870712', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu z': {'serial': '/dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '!EBBCan: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 2, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.005, 'samples_tolerance_retries': 3}, 'gcode_macro _home_x': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 X0\n\nG91\nG1 X-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n\n\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}\n\n\n\n\n\n\n\nG28 Y0\n\nG91\nG1 Y-10 F1200\nG4 P2000\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'homing_override': {'axes': 'xy', 'gcode': "\n\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\nG90\nG1 X175 Y175 F12000\nG28 Z0\nSAVE_Z\n{% endif %}\nCHECK_HOMING"}, 'gcode_macro check_homing': {'gcode': '\n{% set homed_axes_xyz = printer.toolhead.homed_axes %}\nM118 "Homed axes: {homed_axes_xyz}"\n\n{% if not \'x\' in printer.toolhead.homed_axes %}\nM118 "X not homed"\n{% endif %}\n\n{% if not \'y\' in printer.toolhead.homed_axes %}\nM118 "Y not homed"\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\nM118 "Z not homed"\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro quad_gantry_level': {'gcode': "\n{% if printer.quad_gantry_level.applied == False %}\n{% if not 'xy' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSAVE_Z\n_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000\n_QUAD_GANTRY_LEVEL horizontal_move_z=3\nMOVE_TO_CENTER\nCHECK_HOMING\nG28 Z0\nSAVE_Z\nCHECK_HOMING\n\nG4 P500\n{% endif %}", 'rename_existing': '_QUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'P1.10', 'uart_address': 0, 'diag_pin': '^P1.29', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_x': {'microsteps': 128, 'step_pin': 'P2.2', 'dir_pin': 'P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.1', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 353.0, 'position_min': -5.0, 'position_max': 355.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'P1.9', 'uart_address': 0, 'diag_pin': '^P1.28', 'run_current': 1.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 112}, 'stepper_y': {'microsteps': 128, 'step_pin': 'P0.19', 'dir_pin': 'P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!P2.8', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 362.0, 'position_min': 0.0, 'position_max': 362.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'z:P1.10', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 128, 'step_pin': 'z:P2.2', 'dir_pin': '!z:P2.6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 310.0, 'homing_speed': 10.0, 'second_homing_speed': 5.0, 'homing_retract_speed': 10.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'z:P1.9', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 128, 'step_pin': 'z:P0.19', 'dir_pin': '!z:P0.20', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.8'}, 'tmc2209 stepper_z2': {'uart_pin': 'z:P1.8', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 128, 'step_pin': 'z:P0.22', 'dir_pin': 'z:P2.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P0.21'}, 'tmc2209 stepper_z3': {'uart_pin': 'z:P1.4', 'uart_address': 0, 'run_current': 1.2, 'hold_current': 0.8, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 128, 'step_pin': 'z:P2.13', 'dir_pin': '!z:P0.11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [[80.0, 16.0]], 'enable_pin': '!z:P2.12'}, 'tmc2209 extruder': {'uart_pin': 'EBBCan: PA15', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 1.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 128, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBBCan: PA3', 'min_temp': 0.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.572, 'pid_ki': 2.153, 'pid_kd': 64.527, 'heater_pin': 'EBBCan: PB13', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 239.47297233222986, 'max_extrude_only_accel': 931.2837812920051, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBBCan: PD0', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBBCan: PD1', 'rotation_distance': 21.43692518458227, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBBCan: PD2'}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nG0 F25000\nG92 E0\nG1 E-5.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nM107\nPARK_NOZZLE\nTURN_OFF_HEATERS\nDISABLE_AB_STEPPERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set x = params.X|default(10) %}\n{% set y = params.Y|default(300) %}\n{% set z = params.Z|default(100)|float %}\n{% set e = params.E|default(2) %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% set lift_z = z|abs %}\n{% if act_z < (max_z - lift_z) %}\n{% set z_safe = lift_z %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=PAUSE_state\nBASE_PAUSE\nG91\nG1 E-{e} F2100\nG1 Z{z_safe}\nG90\nG1 X{x} Y{y} F25000', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(1) %}\nG91\nG1 E{e} F2100\nG90\nRESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000\nBASE_RESUME', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1)|int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos | default(false) | lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x | default(0.0) %}\n{% set custom_park_y  = client.custom_park_y | default(0.0) %}\n{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}\n{% set sp_hop         = client.speed_hop | default(15) * 60 %}\n{% set sp_move        = client.speed_move | default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN | default(0) | float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\'] | default({}) %}\n{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed | float | abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}\n{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}\n{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'delayed_gcode welcome': {'gcode': '\nM118\nM118 Welcome Roland!!!\nBLINKING_LEDS\nstatus_ready', 'initial_duration': 2.0}, 'delayed_gcode bed_mesh_init': {'gcode': '\nBED_MESH_CLEAR', 'initial_duration': 0.01}, 'gcode_macro save_z': {'gcode': '\n{% set axismax = printer.toolhead.axis_maximum %}\n{% set pos     = printer.toolhead.position     %}\n\n\n{% if pos.z < ( 15 ) %}\nG90\nG0 Z25 F25000\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro park_nozzle': {'gcode': '\nSAVE_Z\nG0 X340 Y340 F25000\nSTATUS_READY', 'description': 'G-Code macro'}, 'gcode_macro move_to_center': {'gcode': '\nSAVE_Z\nG0 X175 Y175 F25000', 'description': 'G-Code macro'}, 'gcode_macro publish_alert': {'gcode': '\n{% set data = params.PAYLOAD|default(None) %}\n{action_call_remote_method("publish_mqtt_topic",\ntopic="klipper/alert",\npayload=data,\nqos=0,\nretain=False,\nuse_prefix=True)}', 'description': 'G-Code macro'}, 'gcode_macro do_homing': {'gcode': '\n{% set target_bed = params.BED_TEMP|default(\'80\') %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Homing"\nSTATUS_HOMING\nG28\nG90\nSET_DISPLAY_TEXT MSG="QGL"\nSTATUS_LEVELING\nQUAD_GANTRY_LEVEL', 'description': 'G-Code macro'}, 'force_move': {'enable_force_move': True}, 'gcode_macro unsafe_lift_head': {'gcode': '\nG90\nSET_KINEMATIC_POSITION Z=0\nG0 Z10 F600\nM84', 'description': 'Lift head 10mm without homing'}, 'gcode_macro unsave_x_move_enable': {'gcode': '\n{% set data = params.NUMBER|default(None) %}\nSET_KINEMATIC_POSITION Z=$data', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-15.0 F3600\nG91\nG1 Z1.0 F25000\nG0 Z5 X20 Y20 F25000\nG90\nTURN_OFF_HEATERS\nPARK_NOZZLE\nM107', 'description': 'G-Code macro'}, 'gcode_macro clean_nozzle': {'gcode': '\n{% if not \'xy\' in printer.toolhead.homed_axes %}\nG28\n{% endif %}\nSTATUS_CLEANING\nSAVE_Z\nM118 Clean Nozzle requested\nSAVE_Z\nG0 F25000\nG0 Y361\nG0 X20\n\n{% set TTEMP = printer.extruder.target %}\n{% set TARGET = 230 %}\n{% if TTEMP < TARGET %}\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}\nM118 Target temp set to {TARGET} for cleaning nozzle!\nTEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0\nM118 Target temp reached!\nLED_ALL_RED\n{% endif %}\nG91\nG1 E-1 F2100\nG90\n\nG0 Z2.0 F1500\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nM106 S255\nSET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0\nG0 X75\nG0 X120\nG0 X75\nG0 X120\nSAVE_Z\nPARK_NOZZLE\nTEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0\nM118 Nozzle cleaning finished!\n\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro come_to_me': {'gcode': '\nM118 Send head to front for service!\nG28\nLIGHTS_100\nSAVE_Z\nG90; use absolute coords\nG0 X175 Y0 Z250 F25000\nDISABLE_AB_STEPPERS\nM118 Ready!', 'description': 'moves printhead in XYZ to the front'}, 'gcode_macro disable_z_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro disable_ab_steppers': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0', 'description': 'G-Code macro'}, 'gcode_macro acc_query': {'gcode': '\nACCELEROMETER_QUERY\nMEASURE_AXES_NOISE', 'description': 'G-Code macro'}, 'gcode_macro testresonance_x': {'gcode': '\nG28\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro testresonance_y': {'gcode': '\nG28\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/pi/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("0")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nDO_HOMING\tBED_TEMP={target_bed}\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"\nBED_MESH_CLEAR\nSET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"\nBED_MESH_CALIBRATE\nSET_DISPLAY_TEXT MSG="SMART_PARK"\nSMART_PARK\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nLINE_PURGE', 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\n{RETRACT}\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\n{UNRETRACT}\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\n{RETRACT}\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}\n{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | min %}\n{% set y_min = [ y_min - purge_margin , y_min ] | min %}\n{% set x_min = [ x_min , axis_minimum_x ] | max %}\n{% set y_min = [ y_min , axis_minimum_y ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Presmartpark_State\n\nG90\n{% if printer.toolhead.position.z < z_height %}\nG0 Z{z_height}\n{% endif %}\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}\n\nRESTORE_GCODE_STATE NAME=Presmartpark_State', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '25'}, 'gcode_macro axes_map_calibration': {'gcode': '\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n{% set speed = params.SPEED|default(80)|float * 60 %}\n{% set accel = params.ACCEL|default(1500)|int %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting accelerometer axe_map calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 8}\nG1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}\nG4 P500\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\nG4 P1000\nG1 X{mid_x + 15} F{speed}\nG4 P1000\nG1 Y{mid_y + 15} F{speed}\nG4 P1000\nG1 Z{z_height + 15} F{speed}\nG4 P1000\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap\n\nRESPOND MSG="Analysis of the movements..."\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_macro axes_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.3)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set axis = params.AXIS|default("all")|string|lower %}\n{% set scv = params.SCV|default(None) %}\n{% set max_sm = params.MAX_SMOOTHING|default(None) %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set X, Y = False, False %}\n\n{% if axis == "all" %}\n{% set X, Y = True, True %}\n{% elif axis == "x" %}\n{% set X = True %}\n{% elif axis == "y" %}\n{% set Y = True %}\n{% else %}\n{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }\n{% endif %}\n\n{% if scv is none %}\n{% set scv = printer.toolhead.square_corner_velocity %}\n{% endif %}\n\n{% if X %}\nTEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="X axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\n{% if Y %}\nTEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Y axis frequency profile generation..."\nRESPOND MSG="This may take some time (1-3min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"\n{% endif %}\n\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter'}, 'gcode_macro belts_shaper_calibration': {'gcode': '\n{% set min_freq = params.FREQ_START|default(5)|float %}\n{% set max_freq = params.FREQ_END|default(133.33)|float %}\n{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\nTEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nTEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}\nM400\n\nRESPOND MSG="Belts comparative frequency profile generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"', 'description': 'Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers'}, 'gcode_macro excitate_axis_at_freq': {'gcode': '\n{% set frequency = params.FREQUENCY|default(25)|int %}\n{% set time = params.TIME|default(10)|int %}\n{% set axis = params.AXIS|default("x")|string|lower %}\n\n{% if axis not in ["x", "y", "a", "b"] %}\n{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }\n{% endif %}\n\n{% if axis == "a" %}\n{% set axis = "1,-1" %}\n{% elif axis == "b" %}\n{% set axis = "1,1" %}\n{% endif %}\n\nTEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}\nM400', 'description': 'Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration'}, 'gcode_macro vibrations_calibration': {'gcode': '\n{% set size = params.SIZE|default(60)|int %}\n{% set direction = params.DIRECTION|default(\'XY\') %}\n{% set z_height = params.Z_HEIGHT|default(20)|int %}\n\n{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}\n{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}\n{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set accel = params.ACCEL|default(3000)|int %}\n{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}\n\n{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}\n{% set keep_csv = params.KEEP_CSV|default(True) %}\n\n{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}\n{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}\n\n{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}\n{% set old_accel = printer.toolhead.max_accel %}\n{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}\n{% set old_sqv = printer.toolhead.square_corner_velocity %}\n\n{% set direction_factor = {\n\'XY\'  : {\n\'start\' : {\'x\': -0.5, \'y\': -0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 }\n}\n},\n\'AB\' : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'2\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'ABXY\' : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'2\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 },\n\'3\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 },\n\'4\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'5\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'B\'  : {\n\'start\' : {\'x\': 0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': -0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'A\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'X\'  : {\n\'start\' : {\'x\': -0.5, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.5, \'y\': 0.0, \'z\': 0.0 },\n\'1\' : {\'x\': -0.5, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'Y\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.5 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': -0.5, \'z\': 0.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.5, \'z\': 0.0 }\n}\n},\n\'Z\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factors\' : {\n\'0\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 1.0 },\n\'1\' : {\'x\': 0.0, \'y\': 0.0, \'z\': 0.0 }\n}\n},\n\'E\'  : {\n\'start\' : {\'x\': 0.0, \'y\': 0.0 },\n\'move_factor\' : 0.05\n}\n}\n%}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home printer first!") }\n{% endif %}\n\n{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}\n{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }\n{% endif %}\n\n{% if (size / (max_speed / 60)) < 0.25 and direction != \'E\' %}\n{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }\n{% endif %}\n\n{% if not (direction in direction_factor) %}\n{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }\n{% endif %}\n\n{action_respond_info("")}\n{action_respond_info("Starting speed and vibration calibration")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION\n\nG90\n\n\nSET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}\n\n\nG1 Z{z_height} F{feedrate_travel / 10}\nG1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}\n\n\n{% for curr_sample in range(0, nb_samples) %}\n{% set curr_speed = min_speed + curr_sample * speed_increment %}\nRESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"\n\nACCELEROMETER_MEASURE CHIP={accel_chip}\n{% if direction == \'E\' %}\nG0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}\n{% else %}\n{% for key, factor in direction_factor[direction].move_factors|dictsort %}\nG1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}\n{% endfor %}\n{% endif %}\nACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace(\'.\',\'_\')}n1\nG4 P300\n\nM400\n{% endfor %}\n\nRESPOND MSG="Machine and motors vibration graph generation..."\nRESPOND MSG="This may take some time (3-5min)"\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"\nM400\nRUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"\n\n\nSET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}\n\nRESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION', 'description': 'G-Code macro'}, 'gcode_shell_command shaketune': {'command': '~/printer_data/config/K-ShakeTune/scripts/shaketune.sh', 'timeout': 600.0, 'verbose': True}, 'gcode_arcs': {'resolution': 0.1}, 'gcode_macro calibrate': {'gcode': '\n\n{% set TYPE = params.TYPE|default("")|string|lower %}\n\n\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}\n{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}\n\n{% if TYPE=="flow" %}\n\n{% set computed_size = (center_x - 20)|string + \'_\' + (center_y - 20)|string + \'_\' + (center_x + 20)|string + \'_\' + (center_y + 20)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}\nFLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471\nEND_PRINT\n\n{% elif TYPE=="pa" %}\n\n{% set computed_size = (center_x - 60)|string + \'_\' + (center_y - 60)|string + \'_\' + (center_x + 60)|string + \'_\' + (center_y + 60)|string %}\n\n\nSTART_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}\nPRESSURE_ADVANCE_CALIBRATION\nEND_PRINT\n\n{% else %}\n{action_respond_info("Trage bitte einen Testtyp ein = \\"flow\\" or \\"pa\\"!")}\n{action_raise_error("Kein Testtyp eingetragen.")}\n\n{% endif %}', 'description': 'Calibrate the printer flow or pressure advance'}, 'gcode_macro pressure_advance_calibration': {'gcode': '\n{% set pa_start     = params.START|default(0.02)|float %}\n{% set pa_increment = params.INCREMENT|default(0.005)|float %}\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n\n{% set print_size      = params.PRINT_SIZE|default(120)|int %}\n{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}\n{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}\n{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},\n{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}\n{% set initial_purge   = params.PURGE_MM|default(8)|int %}\n\n{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}\n{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}\n{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}\n{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}\n{% set feedrate_z       = 5 * 60 %}\n{% set feedrate_retract = 50 * 60 %}\n\n{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}\n{% set spacing_band  = 2 %}\n{% set spacing_raft  = 2 %}\n\n{% set fast_line_ratio_percent = 50 %}\n\n{% set lines_per_band    = [2, lines_per_band]|max %}\n{% set e_multiplier      = [1, e_multiplier]|max %}\n{% set num_lines_control = (lines_per_band / 2)|round(0, \'floor\')|int %}\n{% set num_lines_test    = (lines_per_band / 2)|round(0, \'ceil\')|int %}\n{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set nozzle_diameter = printer.configfile.config[\'extruder\'].nozzle_diameter|float %}\n{% set line_width    = nozzle_diameter * 1.25 %}\n{% set line_height   = nozzle_diameter / 2 %}\n{% set z_hop_height  = 2 * line_height %}\n{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}\n{% set spacing_purge = line_height * 0.8 %}\n\n{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}\n{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, \'floor\')|int %}\n{% set print_width    = num_raft_lines * spacing_raft %}\n\n{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}\n{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, \'floor\')|int %}\n{% set num_bands        = [num_bands, bands_per_height]|min %}\n{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}\n\n{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}\n{% set fast_line_length = print_width - slow_line_length * 2 %}\n{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}\n{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}\n\n{% set x_start = max_x / 2 - print_width  / 2 %}\n{% set y_start = max_y / 2 - print_height / 2 %}\nSAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION\n{% set pa_saved = printer.configfile.settings[\'extruder\'].pressure_advance %}\nSET_PRESSURE_ADVANCE ADVANCE={pa_start}\n\n{action_respond_info("")}\n{action_respond_info("Starte Pressure Advance calibration.")}\n{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}\n{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}\n{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}\n{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}\n{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}\n{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}\n{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}\n{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}\n{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}\n{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}\n{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}\n{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}\n{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}\n{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}\n{action_respond_info("")}\n{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \\"Not-Aus\\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}\n{action_respond_info("")}\n{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}\n{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}\n{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}\n{action_respond_info("Anzahl Baender: %d" % num_bands)}\n{action_respond_info("")}\n{action_respond_info("Angenommen, die erste Bandnummer ist 0")}\n{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}\n{action_respond_info("")}\n{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \\"pressure_advance\\" auf den von Ihnen berechneten Wert.")}\n\n\n\nM221 S100\n\n\n\nM117 Priming\nG90\nG0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}\nG1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}\nG1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}\n\n\n\n\n{% if do_raft == 1 %}\nG0 F{feedrate_raft}\n\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\n{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\nG1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}\nG1 X{line_width} E{line_width * e_per_mm}\n{% endif %}\n\nG1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}\n\n\n{% if not loop.last %}\n{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}\nG1 X{horizontal_move} E{horizontal_move * e_per_mm}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n{% endif %}\n\n\n\n\nM117 Printing bands\nG90\nG0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}\nG0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}\nG91\nG1 E{retract_length} F{feedrate_retract}\n\n\n{% for curr_band_num in range(0, num_bands ) %}\n{% set outer_loop = loop %}\n\n{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}\nSET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}\nM117 Band {curr_band_num} PA {curr_pa_value|round(4)}\n\n\n{% for _ in range(num_lines_control) %}\nG1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}\n\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endfor %}\n\n\n{% for _ in range(num_lines_test) %}\n{% for data in [{\'mm\': slow_line_length, \'f\': feedrate_outer}, {\'mm\': fast_line_length, \'f\': feedrate_inner}, {\'mm\': slow_line_length, \'f\': feedrate_outer}] %}\nG1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\n{% if not (outer_loop.last and loop.last) %}\nG0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}\nG0 Z-{z_hop_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z20 F{feedrate_z}\nG0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}\n\nM117\nSET_PRESSURE_ADVANCE ADVANCE={pa_saved}\nRESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION', 'description': 'Calibrate the pressure advance by printing a grid pattern'}, 'gcode_macro _flow_calib_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_last_shell_thickness': '0.0', 'variable_last_evalue': '0.0'}, 'gcode_macro flow_multiplier_calibration': {'gcode': '\n\n\n\n{% set do_raft = params.DO_RAFT|default(1)|int %}\n{% set do_retract = params.DO_RECTRACT|default(0)|int %}\n{% set print_size = params.PRINT_SIZE|default(40)|int %}\n{% set print_height = params.HEIGHT|default(15)|int %}\n{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}\n{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}\n{% set fan_speed = params.FAN_SPEED|default(20)|int %}\n\n{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}\n{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}\n{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}\n{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}\n\n{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}\n{% set initial_purge = params.PURGE_MM|default(1)|int %}\n{% set z_hop_height  = 2 * layer_height %}\n\n{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}\n{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}\n{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}\n{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}\n{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}\n\n\n\n\n{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}\n{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}\n{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}\n\n{% set max_x = printer.toolhead.axis_maximum.x|float %}\n{% set max_y = printer.toolhead.axis_maximum.y|float %}\n{% set x_start = max_x / 2 - print_size / 2 %}\n{% set y_start = max_y / 2 - print_size / 2 %}\n{% set x_end = x_start + print_size %}\n{% set y_end = y_start + print_size %}\n\n{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, \'floor\')|int %}\n{% set raft_size = num_raft_lines * spacing %}\n\n\n\n\n{action_respond_info("")}\n{action_respond_info("Starting extrusion flow calibration print")}\n{action_respond_info("This operation can not be interrupted by normal means. Hit the \\"emergency stop\\" button to stop it if needed")}\n{action_respond_info("")}\n{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}\n{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}\n{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}\n{action_respond_info("")}\n{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_respond_info("")}\n\nSAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION\n\n\n\n\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}\nSET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}\n\n\n\n\nG90\nM83\nG92 E0.0\nG0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}\n\nG91\nG1 E{initial_purge} F{5 * 60}\nG1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}\nG1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}\nG1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\n\nG90\nG0 X{x_start} Y{y_start} F{feedrate_travel}\nG1 Z{layer_height} F{feedrate_z}\nG1 E{retract_length} F{feedrate_retract}\n\n\nM221 S{e_multiplier * 100}\n\n\n\n\n{% if do_raft == 1 %}\nG91\n{% for curr_raft_line in range(1, num_raft_lines + 2) %}\n\nG1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}\n\n\n{% if not loop.last %}\nG1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}\n{% endif %}\n{% endfor %}\n\nG1 E-{retract_length} F{feedrate_retract}\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n\n\n\n\nG90\nM106 S{fan_speed * 255 / 100}\n\n\n{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}\nG0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}\nG1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}\n\n\n{% for perim_num in range(number_of_perimeters) %}\n\n{% set perim_offset = perim_num * spacing %}\n{% set perim_radius = corner_radius - (perim_num * spacing) %}\n\n\nG1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}\n{% if do_retract == 1 %}\nG1 E{retract_length} F{feedrate_retract}\n{% endif %}\n\n\nG1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\nG1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}\nG3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}\n\n{% if do_retract == 1 %}\nG1 E-{retract_length} F{feedrate_retract}\n{% endif %}\n{% endfor %}\n\n{% if do_retract == 1 %}\nG91\nG0 Z{z_hop_height} F{feedrate_z}\nG90\n{% endif %}\n{% endfor %}\n\n\n\n\nG1 E-{retract_length} F{feedrate_retract}\nG91\nG0 Z20 F{feedrate_travel}\n\nRESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION', 'description': 'Print a small tower to calibrate the extrusion flow multiplier by measuring the shell'}, 'gcode_macro compute_flow_multiplier': {'gcode': '\n{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}\n{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}\n{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}\n\n\n{% if evalue == 0.0 %}\n{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}\n\n\n{% if last_evalue == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_evalue = last_evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n{% else %}\n{% set final_evalue = evalue %}\n{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}\n{% endif %}\n\n\n{% if theorical_thickness == 0.0 %}\n{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}\n\n\n{% if last_shell_thickness == 0.0 %}\n{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}\n{action_respond_info("You can still manually use it by calling again this macro like that:")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set final_theorical_thickness = last_shell_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n{% else %}\n{% set final_theorical_thickness = theorical_thickness %}\n{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}\n{% endif %}\n\n\n{% if measured_thickness == 0.0 %}\n{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}\n{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}\n{action_raise_error("not enough data to perform the computation of the new flow !")}\n{% else %}\n{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}\n{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}\n{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}\n{action_respond_info("")}\n{% endif %}', 'description': 'Compute a new flow multiplier by using the measured shell thickness on the calibration print'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'P1.30'], ['EXP1_3', 'P1.18'], ['EXP1_5', 'P1.20'], ['EXP1_7', 'P1.22'], ['EXP1_9', '<GND>'], ['EXP1_2', 'P0.28'], ['EXP1_4', 'P1.19'], ['EXP1_6', 'P1.21'], ['EXP1_8', 'P1.23'], ['EXP1_10', '<5V>'], ['EXP2_1', 'P0.17'], ['EXP2_3', 'P3.26'], ['EXP2_5', 'P3.25'], ['EXP2_7', 'P1.31'], ['EXP2_9', '<GND>'], ['EXP2_2', 'P0.15'], ['EXP2_4', 'P0.16'], ['EXP2_6', 'P0.18'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'z:P1.18', 'spi_speed': 10000000, 'a0_pin': 'z:P1.19', 'contrast': 63, 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^z:P3.25,^z:P3.26', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!z:P0.28', 'display_group': '_default_16x4'}, 'menu __main __control __move_001mm': {'type': 'list', 'name': 'Move 0.01mm', 'enable': '{not printer.idle_timeout.state == "Printing"}'}, 'menu __main __control __move_001mm __axis_x': {'type': 'input', 'name': "Move X:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 X{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.x}', 'input_min': '{printer.toolhead.axis_minimum.x}', 'input_max': '{printer.toolhead.axis_maximum.x}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_y': {'type': 'input', 'name': "Move Y:{'%06.2f' % menu.input}", 'enable': True, 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Y{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.y}', 'input_min': '{printer.toolhead.axis_minimum.y}', 'input_max': '{printer.toolhead.axis_maximum.y}', 'input_step': 0.01}, 'menu __main __control __move_001mm __axis_z': {'type': 'input', 'name': "Move Z:{'%06.2f' % menu.input}", 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nSAVE_GCODE_STATE NAME=__move__axis\nG90\nG1 Z{menu.input}\nRESTORE_GCODE_STATE NAME=__move__axis', 'realtime': False, 'input': '{printer.gcode_move.gcode_position.z}', 'input_min': '0', 'input_max': '{printer.toolhead.axis_maximum.z}', 'input_step': 0.01}, 'neopixel fysetc_mini12864': {'pin': 'z:P1.21', 'chain_count': 3, 'color_order': ['RGB'], 'initial_red': 0.0, 'initial_green': 1.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'delayed_gcode setdisplayneopixel_blue': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0', 'initial_duration': 2.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0\nSET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0', 'initial_duration': 4.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'z:P0.25', 'min_temp': 5.0, 'max_temp': 125.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 56.249, 'pid_ki': 2.451, 'pid_kd': 322.73, 'heater_pin': 'z:P2.3', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.0, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBBCan: PA1', 'fan_speed': 0.6}, 'fan': {'max_power': 1.0, 'kick_start_time': 1.0, 'off_below': 0.15, 'cycle_time': 0.05, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBBCan: PA0'}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'z:P2.4', 'fan_speed': 1.0}, 'heater_fan exhaust_fan': {'heater': ['extruder'], 'heater_temp': 200.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'z:P2.7', 'fan_speed': 1.0}, 'gcode_macro _bedfanvars': {'gcode': '', 'description': 'G-Code macro', 'variable_threshold': '100', 'variable_fast': '0.4', 'variable_slow': '0.2'}, 'fan_generic bedfans': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'P2.3'}, 'gcode_macro bedfansslow': {'gcode': '\n\n{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={SLOW}', 'description': 'G-Code macro'}, 'gcode_macro bedfansfast': {'gcode': '\n\n{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}\n\nSET_FAN_SPEED FAN=BedFans SPEED={FAST}', 'description': 'G-Code macro'}, 'gcode_macro bedfansoff': {'gcode': '\nSET_FAN_SPEED FAN=BedFans SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature': {'gcode': '\n\n{% set HEATER = params.HEATER|default("None") %}\n{% set TARGET = params.TARGET|default(0)|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if HEATER|lower == "extruder" %}\nM104 S{TARGET}\n{% elif HEATER|lower == "heater_bed" %}\nM99140 S{TARGET}\n{% else %}\n{action_respond_info("Heater %s not supported" % HEATER)}\n{% endif %}\n\n\n{% if HEATER|lower == "heater_bed" %}\n{% if TARGET >= THRESHOLD %}\nBEDFANSSLOW\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1\n{% else %}\nBEDFANSOFF\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0\n{% endif %}\n{% endif %}', 'rename_existing': '_SET_HEATER_TEMPERATURE', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n\n{% set S = params.S|int %}\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if S >= THRESHOLD %}\nBEDFANSSLOW\n{% else %}\nBEDFANSOFF\n{% endif %}\n\nM140 {% for p in params\n%}{\'%s%s\' % (p, params[p])}{%\nendfor %}\n\n{% if S != 0 %}\nTEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}\n{% endif %}\n\n\n{% if S >= THRESHOLD %}\nBEDFANSFAST\n{% endif %}', 'rename_existing': 'M99190', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\n\n{% set S = params.S|float %}\n\nSET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}', 'rename_existing': 'M99140', 'description': 'G-Code macro'}, 'gcode_macro turn_off_heaters': {'gcode': '\nBEDFANSOFF\n_TURN_OFF_HEATERS', 'rename_existing': '_TURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'delayed_gcode bedfanloop': {'gcode': '\n\n{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}\n\n{% if printer.heater_bed.target >= THRESHOLD %}\n{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}\nBEDFANSFAST\n{% else %}\nUPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5\n{% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'neopixel sb_leds': {'pin': 'EBBCan:PD3', 'chain_count': 3, 'color_order': ['GRB'], 'initial_red': 1.0, 'initial_green': 1.0, 'initial_blue': 1.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n\n'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n\n'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro lights_100': {'gcode': '\nSET_PIN PIN=caselight VALUE=100', 'description': 'G-Code macro'}, 'gcode_macro lights_50': {'gcode': '\nSET_PIN PIN=caselight VALUE=50', 'description': 'G-Code macro'}, 'gcode_macro lights_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_all_red': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_blue': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_green': {'gcode': '\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro led_all_white': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1', 'description': 'G-Code macro'}, 'gcode_macro blinking_leds': {'gcode': '\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1\nG4 P50\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1\nG4 P50', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBBCan: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBBCan: PB10', 'spi_software_miso_pin': 'EBBCan: PB2', 'spi_software_mosi_pin': 'EBBCan: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 60.8, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.2}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'output_pin caselight ': {'pwm': True, 'pin': 'z:P2.5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 100.0, 'maximum_mcu_duration': 0.0, 'value': 50.0, 'shutdown_value': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'P0.23', 'min_temp': 5.0, 'max_temp': 80.0, 'gcode_id': 'C'}, 'temperature_sensor raspberry_pi': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 100.0}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 5.0, 'points': [[325.0, 305.0], [325.0, 5.0], [25.0, 5.0], [25.0, 305.0]], 'speed': 1000.0, 'gantry_corners': [[-60.0, -10.0], [410.0, 420.0]]}, 'bed_mesh': {'adaptive_margin': 5.0, 'zero_reference_position': [175.0, 175.0], 'probe_count': [9, 9], 'mesh_min': [40.0, 40.0], 'mesh_max': [310.0, 310.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 1000.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019116, 0.004968, -0.023674], [0.007393, 0.0, -0.025204], [0.022538, 0.016209, -0.005839]], 'min_x': 150.237, 'max_x': 199.836, 'min_y': 150.228, 'max_y': 199.828, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'gcode_macro data_sample': {'gcode': '\nG90\nM106 S255\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nRESPOND TYPE=command MSG=\'Starting Phase 1 of 4\'\nM117 Starting Phase 1 of 4\nM106 S0\nG28\nG0 Z1\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data1\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data1\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 Starting Phase 2 of 4\nRESPOND TYPE=command MSG=\'Starting Phase 2 of 4\'\nM106 S0\nG28 Z0\nG0 Z2\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data2\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data2\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nM117 Waiting for Coil to cool to 40\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 3 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 3 of 4\'\nM106 S0\nG28 Z0\nG0 Z3\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data3\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data3\nM104 S0\nM140 S0\nM106 S255\nG0 Z80\nM117 Waiting for Coil to cool to 40\nRESPOND TYPE=command MSG=\'Waiting for Coil to cool to 40\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MAXIMUM=40\nM117 "Starting Phase 4 of 4"\nRESPOND TYPE=command MSG=\'Starting Phase 4 of 4\'\nM106 S0\nG28 Z0\nG0 Z5\nM104 S250\nM140 S110\nG4 P1000\nCARTOGRAPHER_STREAM FILENAME=data4\nM117 Waiting for Coil to heat to 70\nRESPOND TYPE=command MSG=\'Waiting for Coil to heat to 70\'\nTEMPERATURE_WAIT SENSOR=\'temperature_sensor cartographer_coil\' MINIMUM=70\nCARTOGRAPHER_STREAM FILENAME=data4\nM104 S0\nM140 S0\nRESPOND TYPE=command MSG=\'Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/\'\nM117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"\nRESPOND TYPE=command MSG=\'Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta\'\nM117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 900.0, 'max_accel': 3500.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 50.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-24 18:18:10,175 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-24 18:18:10,176 [printer.py:reinit()] - Klipper version: v0.12.0-155-g4cfa266e-dirty
2024-04-24 18:18:10,177 [printer.py:reinit()] - # Extruders: 1
2024-04-24 18:18:10,177 [printer.py:reinit()] - # Temperature devices: 3
2024-04-24 18:18:10,177 [printer.py:reinit()] - # Fans: 5
2024-04-24 18:18:10,177 [printer.py:reinit()] - # Output pins: 1
2024-04-24 18:18:10,177 [printer.py:reinit()] - # Leds: 2
2024-04-24 18:18:10,177 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-24 18:18:10,187 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-24 18:18:10,189 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&temperature_sensor raspberry_pi&fan&fan_generic BedFans&heater_fan hotend_fan&heater_fan controller_fan&heater_fan exhaust_fan&output_pin caselight &neopixel fysetc_mini12864&neopixel sb_leds
2024-04-24 18:18:10,469 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-24 18:18:10,469 [screen.py:init_klipper()] - Printer initialized
2024-04-24 18:18:10,469 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-24 18:18:10,469 [printer.py:change_state()] - Adding callback for state: startup
2024-04-24 18:18:11,672 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-24 18:18:11,672 [printer.py:change_state()] - Adding callback for state: ready
2024-04-24 18:18:11,673 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-24 18:18:11,676 [screen.py:show_panel()] - Reinitializing panel
2024-04-24 18:18:11,763 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-24 18:18:11,776 [main_menu.py:add_device()] - Adding device: extruder
2024-04-24 18:18:11,781 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-24 18:18:11,786 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-04-24 18:18:11,790 [main_menu.py:add_device()] - Adding device: temperature_sensor raspberry_pi
2024-04-24 18:18:11,823 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-24 18:18:11,824 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-24 18:18:11,839 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'temperature_sensor raspberry_pi', 'extruder']
2024-04-24 18:18:11,841 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-24 18:18:11,847 [screen.py:init_tempstore()] - Temperature store size: 600
2024-04-24 18:18:13,653 [screen.py:show_popup_message()] - echo: 
2024-04-24 18:18:43,142 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-24 18:20:25,586 [screen.py:_load_panel()] - Loading panel: move
2024-04-24 18:20:25,699 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-24 18:20:29,631 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-04-24 18:20:29,633 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:20:29,638 [screen.py:show_popup_message()] - error: Move out of range: -27.000 350.000 3.000 [0.000]
2024-04-24 18:20:36,616 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-04-24 18:20:36,620 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:20:39,605 [move.py:change_distance()] - ### Distance 1
2024-04-24 18:20:40,868 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:20:40,870 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:20:43,247 [move.py:change_distance()] - ### Distance 10
2024-04-24 18:20:43,904 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-04-24 18:20:43,906 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:20:45,692 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-04-24 18:20:45,694 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:20:47,690 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-04-24 18:20:47,692 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:20:47,702 [screen.py:show_popup_message()] - error: Move out of range: -8.000 350.000 3.000 [0.000]
2024-04-24 18:20:52,336 [move.py:change_distance()] - ### Distance 1
2024-04-24 18:20:53,228 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:20:53,230 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:20:54,439 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:20:54,442 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:20:56,276 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:20:56,278 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:20:57,540 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:20:57,542 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:20:59,083 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:20:59,085 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:00,888 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:21:00,890 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:02,360 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:21:02,362 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:04,132 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-04-24 18:21:04,133 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:06,188 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-04-24 18:21:06,190 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:10,043 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-04-24 18:21:10,045 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:11,480 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:21:11,482 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:19,460 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-04-24 18:21:19,462 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:22,119 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:21:22,122 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:23,704 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-04-24 18:21:23,706 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:25,552 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:21:25,554 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:27,660 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-04-24 18:21:27,662 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:28,947 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-04-24 18:21:28,950 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:30,033 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-04-24 18:21:30,036 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:31,843 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-04-24 18:21:31,845 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:32,571 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-04-24 18:21:32,574 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:37,648 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:37,651 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:38,860 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:38,861 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:39,683 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:39,685 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:40,272 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:40,273 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:40,563 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:40,565 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:41,088 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:41,090 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:41,511 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:41,513 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:41,931 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:41,933 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:42,330 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:42,332 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:42,791 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:42,793 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:43,223 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:43,225 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:43,783 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:43,785 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:44,347 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:44,349 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:44,362 [screen.py:show_popup_message()] - error: Move out of range: 0.000 363.000 3.000 [0.000]
2024-04-24 18:21:44,931 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:44,932 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:45,463 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:45,464 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:45,472 [screen.py:show_popup_message()] - error: Move out of range: 0.000 363.000 3.000 [0.000]
2024-04-24 18:21:48,139 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-04-24 18:21:48,141 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:50,484 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:50,486 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:52,079 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-04-24 18:21:52,081 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:53,096 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-04-24 18:21:53,097 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:54,708 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-04-24 18:21:54,711 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:21:56,284 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-04-24 18:21:56,286 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:22:00,035 [move.py:change_distance()] - ### Distance 10
2024-04-24 18:22:01,374 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-04-24 18:22:01,376 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:22:03,534 [move.py:change_distance()] - ### Distance 25
2024-04-24 18:22:04,019 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-04-24 18:22:04,021 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:22:05,712 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-04-24 18:22:05,713 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:22:07,376 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-04-24 18:22:07,377 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:22:11,800 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-04-24 18:22:11,802 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:22:14,404 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-04-24 18:22:14,407 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:22:24,524 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-04-24 18:22:24,527 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:22:30,443 [move.py:change_distance()] - ### Distance 5
2024-04-24 18:22:31,859 [move.py:change_distance()] - ### Distance 10
2024-04-24 18:22:33,815 [screen.py:_load_panel()] - Loading panel: menu
2024-04-24 18:22:33,948 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-24 18:22:33,963 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-24 18:22:41,960 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 X'}
2024-04-24 18:22:50,434 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-24 18:22:53,535 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 Y'}
2024-04-24 18:22:57,693 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
2024-04-24 18:23:06,599 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 Z'}
2024-04-24 18:23:19,620 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-24 18:23:19,654 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-04-24 18:23:23,143 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+10 F600'}
2024-04-24 18:23:23,147 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:23:24,952 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+10 F600'}
2024-04-24 18:23:24,955 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-04-24 18:23:27,818 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-04-24 18:23:27,837 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-04-24 18:23:32,267 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-04-24 18:23:44,525 [screen.py:show_popup_message()] - echo: "Homed axes: xyz"
