Loaded MCU 'EBBCan' 108 commands (v0.12.0-143-g01c7befa / gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.40-2+18+b1) 2.40)
MCU 'EBBCan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_i2c3_PC0_PC1=PC0,PC1 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'EBBCan' (1024 moves)
Loaded MCU 'cartographer' 57 commands (CARTOGRAPHER V3 / )
MCU 'cartographer' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_spi1=PA6,PA7,PA5 CANBUS_FREQUENCY=1000000 CARTOGRAPHER_ADC_SMOOTH_COUNT=16 CLOCK_FREQ=48000000 MCU=stm32f042x6 PWM_MAX=2 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'cartographer' (1024 moves)
===== Config file =====
[cartographer]
canbus_uuid = 89eb26f14edf
speed = 40.
lift_speed = 5.
backlash_comp = 0.5
x_offset = 0.
y_offset = 21.1
trigger_distance = 2.
trigger_dive_threshold = 1.5
trigger_hysteresis = 0.006
cal_nozzle_z = 0.1
cal_floor = 0.1
cal_ceil = 5.
cal_speed = 1.0
cal_move_speed = 10.
default_model_name = default
mesh_main_direction = x
mesh_cluster_size = 1
mesh_runs = 2

[gcode_macro A_CARTOGRAPHER_CALIBRATE]
gcode = 
	
	
	CARTOGRAPHER_CALIBRATE

[gcode_macro B_PROBE_ACCURACY]
gcode = 
	G28
	PROBE_ACCURACY

[gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH]
gcode = 
	CARTOGRAPHER_ESTIMATE_BACKLASH

[gcode_macro D_CARTOGRAPHER_MODEL_LIST]
gcode = 
	CARTOGRAPHER_MODEL_LIST

[gcode_macro E_CARTOGRAPHER_MODEL_SELECT]
gcode = 
	{% set model=params.MODEL|default(default) %}
	CARTOGRAPHER_MODEL_SELECT NAME={model}

[gcode_macro F_CARTOGRAPHER_MODEL_SAVE]
gcode = 
	{% set name=params.NAME|default(default) %}
	CARTOGRAPHER_MODEL_SAVE NAME={name}

[gcode_macro G_CARTOGRAPHER_MODEL_REMOVE]
gcode = 
	{% set name=params.NAME|default(default) %}
	CARTOGRAPHER_MODEL_REMOVE NAME={name}

[gcode_macro H_BED_MESH_CALIBRATE]
gcode = 
	G28
	BED_MESH_CALIBRATE

[gcode_macro I_BED_MESH_PROFILE_SAVE]
gcode = 
	{% set name=params.NAME|default(none) %}
	BED_MESH_PROFILE SAVE={name}

[gcode_macro J_BED_MESH_PROFILE_LOAD]
gcode = 
	{% set name=params.NAME|default(none) %}
	BED_MESH_PROFILE LOAD={name}

[gcode_macro K_BED_MESH_PROFILE_REMOVE]
gcode = 
	{% set name=params.NAME|default(none) %}
	BED_MESH_PROFILE REMOVE={name}

[gcode_macro L_Z_OFFSET_APPLY_PROBE]
gcode = 
	G28
	Z_OFFSET_APPLY_PROBE

[tmc2209 stepper_x]
uart_pin = P1.10
diag_pin = ^P1.29
driver_sgthrs = 112
interpolate = false
run_current = 1.2
stealthchop_threshold = 0

[tmc2209 stepper_y]
uart_pin = P1.9
diag_pin = ^P1.28
driver_sgthrs = 112
interpolate = false
run_current = 1.2
stealthchop_threshold = 0

[stepper_x]
step_pin = P2.2
dir_pin = P2.6
enable_pin = !P2.1
rotation_distance = 40
microsteps = 128
full_steps_per_rotation = 200
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 50
homing_retract_dist = 0
homing_positive_dir = true

[stepper_y]
step_pin = P0.19
dir_pin = P0.20
enable_pin = !P2.8
rotation_distance = 40
microsteps = 128
full_steps_per_rotation = 200
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_min = 0
position_endstop = 362
position_max = 362
homing_speed = 50
homing_retract_dist = 0
homing_positive_dir = true

[stepper_z]
step_pin = z:P2.2
dir_pin = !z:P2.6
enable_pin = !z:P2.1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 128
endstop_pin = probe:z_virtual_endstop
position_max = 310
position_min = -5
homing_speed = 10
second_homing_speed = 5
homing_retract_dist = 0

[tmc2209 stepper_z]
uart_pin = z:P1.10
interpolate = false
run_current = 1.2
hold_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 1

[stepper_z1]
step_pin = z:P0.19
dir_pin = !z:P0.20
enable_pin = !z:P2.8
rotation_distance = 40
gear_ratio = 80:16
microsteps = 128

[tmc2209 stepper_z1]
uart_pin = z:P1.9
interpolate = false
run_current = 1.2
hold_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 1

[stepper_z2]
step_pin = z:P0.22
dir_pin = z:P2.11
enable_pin = !z:P0.21
rotation_distance = 40
gear_ratio = 80:16
microsteps = 128

[tmc2209 stepper_z2]
uart_pin = z:P1.8
interpolate = false
run_current = 1.2
hold_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 1

[stepper_z3]
step_pin = z:P2.13
dir_pin = !z:P0.11
enable_pin = !z:P2.12
rotation_distance = 40
gear_ratio = 80:16
microsteps = 128

[tmc2209 stepper_z3]
uart_pin = z:P1.4
run_current = 1.2
interpolate = false
hold_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 1

[extruder]
step_pin = EBBCan: PD0
dir_pin = EBBCan: PD1
enable_pin = !EBBCan: PD2
rotation_distance = 21.43692518458227
gear_ratio = 50:10
microsteps = 128
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
pressure_advance = 0.025
max_extrude_only_distance = 150.0
max_extrude_cross_section = 5
heater_pin = EBBCan: PB13
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = EBBCan: PA3
min_temp = 0
max_temp = 290
max_power = 1.0
min_extrude_temp = 170
control = pid
pid_kp = 23.572
pid_ki = 2.153
pid_kd = 64.527

[tmc2209 extruder]
uart_pin = EBBCan: PA15
interpolate = false
run_current = 0.5
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 1

[virtual_sdcard]
path = /home/pi/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]
recover_velocity = 50

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	G0 F25000
	G92 E0
	G1 E-5.0 F3600
	G91
	G1 Z1.0 F25000
	G0 Z5 X20 Y20 F25000
	G90
	M107
	PARK_NOZZLE
	TURN_OFF_HEATERS
	DISABLE_AB_STEPPERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	
	{% set x = params.X|default(10) %}
	{% set y = params.Y|default(300) %}
	{% set z = params.Z|default(100)|float %}
	{% set e = params.E|default(2) %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set lift_z = z|abs %}
	{% if act_z < (max_z - lift_z) %}
	{% set z_safe = lift_z %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{e} F2100
	G1 Z{z_safe}
	G90
	G1 X{x} Y{y} F25000

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set e = params.E|default(1) %}
	G91
	G1 E{e} F2100
	G90
	RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000
	BASE_RESUME

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1)|int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos | default(false) | lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x | default(0.0) %}
	{% set custom_park_y  = client.custom_park_y | default(0.0) %}
	{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}
	{% set sp_hop         = client.speed_hop | default(15) * 60 %}
	{% set sp_move        = client.speed_move | default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN | default(0) | float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}
	{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed | float | abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}
	{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}

[delayed_gcode welcome]
initial_duration = 2
gcode = 
	M118
	M118 Welcome Roland!!!
	BLINKING_LEDS
	status_ready

[delayed_gcode bed_mesh_init]
initial_duration = .01
gcode = 
	BED_MESH_CLEAR

[gcode_macro SAVE_Z]
gcode = 
	{% set axismax = printer.toolhead.axis_maximum %}
	{% set pos     = printer.toolhead.position     %}
	
	
	{% if pos.z < ( 15 ) %}
	G90
	G0 Z25 F25000
	{% endif %}

[gcode_macro PARK_NOZZLE]
gcode = 
	SAVE_Z
	G0 X340 Y340 F25000
	STATUS_READY

[gcode_macro MOVE_TO_CENTER]
gcode = 
	SAVE_Z
	G0 X175 Y175 F25000

[gcode_macro PUBLISH_ALERT]
gcode = 
	{% set data = params.PAYLOAD|default(None) %}
	{action_call_remote_method("publish_mqtt_topic",
	topic="klipper/alert",
	payload=data,
	qos=0,
	retain=False,
	use_prefix=True)}

[gcode_macro DO_HOMING]
gcode = 
	{% set target_bed = params.BED_TEMP|default('80') %}
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	
	
	SET_DISPLAY_TEXT MSG="Homing"
	STATUS_HOMING
	G28
	G90
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	QUAD_GANTRY_LEVEL

[force_move]
enable_force_move = True

[gcode_macro UNSAFE_LIFT_HEAD]
description = Lift head 10mm without homing
gcode = 
	G90
	SET_KINEMATIC_POSITION Z=0
	G0 Z10 F600
	M84

[gcode_macro UNSAVE_X_MOVE_ENABLE]
gcode = 
	{% set data = params.NUMBER|default(None) %}
	SET_KINEMATIC_POSITION Z=$data

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-15.0 F3600
	G91
	G1 Z1.0 F25000
	G0 Z5 X20 Y20 F25000
	G90
	TURN_OFF_HEATERS
	PARK_NOZZLE
	M107

[gcode_macro CLEAN_NOZZLE]
gcode = 
	{% if not 'xy' in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	STATUS_CLEANING
	SAVE_Z
	M118 Clean Nozzle requested
	SAVE_Z
	G0 F25000
	G0 Y361
	G0 X20
	
	{% set TTEMP = printer.extruder.target %}
	{% set TARGET = 230 %}
	{% if TTEMP < TARGET %}
	SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}
	M118 Target temp set to {TARGET} for cleaning nozzle!
	TEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0
	M118 Target temp reached!
	LED_ALL_RED
	{% endif %}
	G91
	G1 E-1 F2100
	G90
	
	G0 Z2.0 F1500
	G0 X75
	G0 X120
	G0 X75
	G0 X120
	M106 S255
	SET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0
	G0 X75
	G0 X120
	G0 X75
	G0 X120
	SAVE_Z
	PARK_NOZZLE
	TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0
	M118 Nozzle cleaning finished!
	
	M106 S0

[gcode_macro COME_TO_ME]
description = moves printhead in XYZ to the front
gcode = 
	M118 Send head to front for service!
	G28
	LIGHTS_100
	SAVE_Z
	G90; use absolute coords
	G0 X175 Y0 Z250 F25000
	DISABLE_AB_STEPPERS
	M118 Ready!

[gcode_macro DISABLE_Z_STEPPERS]
gcode = 
	SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0

[gcode_macro DISABLE_AB_STEPPERS]
gcode = 
	SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0

[gcode_macro ACC_QUERY]
gcode = 
	ACCELEROMETER_QUERY
	MEASURE_AXES_NOISE

[gcode_macro TestResonance_X]
gcode = 
	G28
	TEST_RESONANCES AXIS=X

[gcode_macro TestResonance_Y]
gcode = 
	G28
	TEST_RESONANCES AXIS=Y

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro _HOME_X]
gcode = 
	
	
	
	
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
	{% set HOME_CURRENT = 0.7 %}
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	
	
	
	
	
	
	
	G28 X0
	
	G91
	G1 X-10 F1200
	G4 P2000
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode = 
	
	
	
	
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
	{% set HOME_CURRENT = 0.7 %}
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	
	
	
	
	
	
	
	G28 Y0
	
	G91
	G1 Y-10 F1200
	G4 P2000
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[homing_override]
axes = xy
gcode = 
	UNSAFE_LIFT_HEAD
	{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
	
	{% if home_all or 'X' in params %}
	_HOME_X
	{% endif %}
	
	{% if home_all or 'Y' in params %}
	_HOME_Y
	{% endif %}
	
	{% if home_all or 'Z' in params %}
	G90
	G1 X175 Y175 F12000
	G28 Z0
	SAVE_Z
	{% endif %}
	CHECK_HOMING

[gcode_macro CHECK_HOMING]
gcode = 
	{% set homed_axes_xyz = printer.toolhead.homed_axes %}
	M118 "Homed axes: {homed_axes_xyz}"
	
	{% if not 'x' in printer.toolhead.homed_axes %}
	M118 "X not homed"
	{% endif %}
	
	{% if not 'y' in printer.toolhead.homed_axes %}
	M118 "Y not homed"
	{% endif %}
	
	{% if not 'z' in printer.toolhead.homed_axes %}
	M118 "Z not homed"
	{% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = _QUAD_GANTRY_LEVEL
gcode = 
	{% if printer.quad_gantry_level.applied == False %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_Z
	_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000
	_QUAD_GANTRY_LEVEL horizontal_move_z=3
	MOVE_TO_CENTER
	CHECK_HOMING
	G28 Z0
	SAVE_Z
	CHECK_HOMING
	
	G4 P500
	{% endif %}

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	{% set target_chamber = params.CHAMBER|default("0")|int %}
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	DO_HOMING	BED_TEMP={target_bed}
	
	
	
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"
	BED_MESH_CLEAR
	SET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"
	BED_MESH_CALIBRATE
	SET_DISPLAY_TEXT MSG="SMART_PARK"
	SMART_PARK
	
	
	SET_DISPLAY_TEXT MSG="Printer goes brr"
	STATUS_PRINTING
	LINE_PURGE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set purge_height = kamp_settings.purge_height | float %}
	{% set tip_distance = kamp_settings.tip_distance | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set purge_amount = kamp_settings.purge_amount | float %}
	{% set flow_rate = kamp_settings.flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	{RETRACT}
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	{UNRETRACT}
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	{RETRACT}
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	{UNRETRACT}
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	{RETRACT}
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Presmartpark_State
	
	G90
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}
	
	RESTORE_GCODE_STATE NAME=Presmartpark_State

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 25
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro AXES_MAP_CALIBRATION]
gcode = 
	{% set z_height = params.Z_HEIGHT|default(20)|int %}
	{% set speed = params.SPEED|default(80)|float * 60 %}
	{% set accel = params.ACCEL|default(1500)|int %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}
	{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}
	
	{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}
	
	{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}
	{% set old_accel = printer.toolhead.max_accel %}
	{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}
	{% set old_sqv = printer.toolhead.square_corner_velocity %}
	
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	{action_respond_info("")}
	{action_respond_info("Starting accelerometer axe_map calibration")}
	{action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION
	
	G90
	
	
	SET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}
	
	
	G1 Z{z_height} F{feedrate_travel / 8}
	G1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}
	G4 P500
	
	ACCELEROMETER_MEASURE CHIP={accel_chip}
	G4 P1000
	G1 X{mid_x + 15} F{speed}
	G4 P1000
	G1 Y{mid_y + 15} F{speed}
	G4 P1000
	G1 Z{z_height + 15} F{speed}
	G4 P1000
	ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap
	
	RESPOND MSG="Analysis of the movements..."
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"
	
	
	SET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}
	
	RESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION

[gcode_macro AXES_SHAPER_CALIBRATION]
description = Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter
gcode = 
	{% set min_freq = params.FREQ_START|default(5)|float %}
	{% set max_freq = params.FREQ_END|default(133.3)|float %}
	{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}
	{% set axis = params.AXIS|default("all")|string|lower %}
	{% set scv = params.SCV|default(None) %}
	{% set max_sm = params.MAX_SMOOTHING|default(None) %}
	{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}
	{% set keep_csv = params.KEEP_CSV|default(True) %}
	
	{% set X, Y = False, False %}
	
	{% if axis == "all" %}
	{% set X, Y = True, True %}
	{% elif axis == "x" %}
	{% set X = True %}
	{% elif axis == "y" %}
	{% set Y = True %}
	{% else %}
	{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }
	{% endif %}
	
	{% if scv is none %}
	{% set scv = printer.toolhead.square_corner_velocity %}
	{% endif %}
	
	{% if X %}
	TEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
	M400
	
	RESPOND MSG="X axis frequency profile generation..."
	RESPOND MSG="This may take some time (1-3min)"
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"
	{% endif %}
	
	{% if Y %}
	TEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
	M400
	
	RESPOND MSG="Y axis frequency profile generation..."
	RESPOND MSG="This may take some time (1-3min)"
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"
	{% endif %}
	
	M400
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"

[gcode_macro BELTS_SHAPER_CALIBRATION]
description = Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers
gcode = 
	{% set min_freq = params.FREQ_START|default(5)|float %}
	{% set max_freq = params.FREQ_END|default(133.33)|float %}
	{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}
	{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}
	{% set keep_csv = params.KEEP_CSV|default(True) %}
	
	TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
	M400
	
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
	M400
	
	RESPOND MSG="Belts comparative frequency profile generation..."
	RESPOND MSG="This may take some time (3-5min)"
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"
	M400
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"

[gcode_macro EXCITATE_AXIS_AT_FREQ]
description = Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration
gcode = 
	{% set frequency = params.FREQUENCY|default(25)|int %}
	{% set time = params.TIME|default(10)|int %}
	{% set axis = params.AXIS|default("x")|string|lower %}
	
	{% if axis not in ["x", "y", "a", "b"] %}
	{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }
	{% endif %}
	
	{% if axis == "a" %}
	{% set axis = "1,-1" %}
	{% elif axis == "b" %}
	{% set axis = "1,1" %}
	{% endif %}
	
	TEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}
	M400

[gcode_macro VIBRATIONS_CALIBRATION]
gcode = 
	{% set size = params.SIZE|default(60)|int %}
	{% set direction = params.DIRECTION|default('XY') %}
	{% set z_height = params.Z_HEIGHT|default(20)|int %}
	
	{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}
	{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}
	{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}
	{% set accel = params.ACCEL|default(3000)|int %}
	{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}
	
	{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}
	{% set keep_csv = params.KEEP_CSV|default(True) %}
	
	{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}
	{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}
	
	{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}
	{% set old_accel = printer.toolhead.max_accel %}
	{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}
	{% set old_sqv = printer.toolhead.square_corner_velocity %}
	
	{% set direction_factor = {
	'XY'  : {
	'start' : {'x': -0.5, 'y': -0.5 },
	'move_factors' : {
	'0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
	'2' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
	'3' : {'x': -0.5, 'y': -0.5, 'z': 0.0 }
	}
	},
	'AB' : {
	'start' : {'x': 0.0, 'y': 0.0 },
	'move_factors' : {
	'0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
	'2' : {'x': 0.0, 'y': 0.0, 'z': 0.0 },
	'3' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
	'4' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
	'5' : {'x': 0.0, 'y': 0.0, 'z': 0.0 }
	}
	},
	'ABXY' : {
	'start' : {'x': -0.5, 'y': 0.5 },
	'move_factors' : {
	'0' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
	'2' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
	'3' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
	'4' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
	'5' : {'x': -0.5, 'y': 0.5, 'z': 0.0 }
	}
	},
	'B'  : {
	'start' : {'x': 0.5, 'y': 0.5 },
	'move_factors' : {
	'0' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': 0.5, 'y': 0.5, 'z': 0.0 }
	}
	},
	'A'  : {
	'start' : {'x': -0.5, 'y': 0.5 },
	'move_factors' : {
	'0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': -0.5, 'y': 0.5, 'z': 0.0 }
	}
	},
	'X'  : {
	'start' : {'x': -0.5, 'y': 0.0 },
	'move_factors' : {
	'0' : {'x': 0.5, 'y': 0.0, 'z': 0.0 },
	'1' : {'x': -0.5, 'y': 0.0, 'z': 0.0 }
	}
	},
	'Y'  : {
	'start' : {'x': 0.0, 'y': 0.5 },
	'move_factors' : {
	'0' : {'x': 0.0, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': 0.0, 'y': 0.5, 'z': 0.0 }
	}
	},
	'Z'  : {
	'start' : {'x': 0.0, 'y': 0.0 },
	'move_factors' : {
	'0' : {'x': 0.0, 'y': 0.0, 'z': 1.0 },
	'1' : {'x': 0.0, 'y': 0.0, 'z': 0.0 }
	}
	},
	'E'  : {
	'start' : {'x': 0.0, 'y': 0.0 },
	'move_factor' : 0.05
	}
	}
	%}
	
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}
	{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }
	{% endif %}
	
	{% if (size / (max_speed / 60)) < 0.25 and direction != 'E' %}
	{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }
	{% endif %}
	
	{% if not (direction in direction_factor) %}
	{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }
	{% endif %}
	
	{action_respond_info("")}
	{action_respond_info("Starting speed and vibration calibration")}
	{action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION
	
	G90
	
	
	SET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}
	
	
	G1 Z{z_height} F{feedrate_travel / 10}
	G1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}
	
	
	{% for curr_sample in range(0, nb_samples) %}
	{% set curr_speed = min_speed + curr_sample * speed_increment %}
	RESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"
	
	ACCELEROMETER_MEASURE CHIP={accel_chip}
	{% if direction == 'E' %}
	G0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}
	{% else %}
	{% for key, factor in direction_factor[direction].move_factors|dictsort %}
	G1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}
	{% endfor %}
	{% endif %}
	ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace('.','_')}n1
	G4 P300
	
	M400
	{% endfor %}
	
	RESPOND MSG="Machine and motors vibration graph generation..."
	RESPOND MSG="This may take some time (3-5min)"
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"
	M400
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"
	
	
	SET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}
	
	RESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION

[gcode_shell_command shaketune]
command = ~/printer_data/config/K-ShakeTune/scripts/shaketune.sh
timeout = 600.0
verbose = True

[gcode_arcs]
resolution = 0.1

[gcode_macro CALIBRATE]
description = Calibrate the printer flow or pressure advance
gcode = 
	
	{% set TYPE = params.TYPE|default("")|string|lower %}
	
	
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}
	
	{% if TYPE=="flow" %}
	
	{% set computed_size = (center_x - 20)|string + '_' + (center_y - 20)|string + '_' + (center_x + 20)|string + '_' + (center_y + 20)|string %}
	
	
	START_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}
	FLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471
	END_PRINT
	
	{% elif TYPE=="pa" %}
	
	{% set computed_size = (center_x - 60)|string + '_' + (center_y - 60)|string + '_' + (center_x + 60)|string + '_' + (center_y + 60)|string %}
	
	
	START_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	PRESSURE_ADVANCE_CALIBRATION
	END_PRINT
	
	{% else %}
	{action_respond_info("Trage bitte einen Testtyp ein = \"flow\" or \"pa\"!")}
	{action_raise_error("Kein Testtyp eingetragen.")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	{% set pa_start     = params.START|default(0.02)|float %}
	{% set pa_increment = params.INCREMENT|default(0.005)|float %}
	
	{% set do_raft = params.DO_RAFT|default(1)|int %}
	
	{% set print_size      = params.PRINT_SIZE|default(120)|int %}
	{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}
	{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}
	{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},
	{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}
	{% set initial_purge   = params.PURGE_MM|default(8)|int %}
	
	{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}
	{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}
	{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}
	{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}
	{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	{% set feedrate_retract = 50 * 60 %}
	
	{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	
	{% set do_raft = params.DO_RAFT|default(1)|int %}
	{% set do_retract = params.DO_RECTRACT|default(0)|int %}
	{% set print_size = params.PRINT_SIZE|default(40)|int %}
	{% set print_height = params.HEIGHT|default(15)|int %}
	{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}
	{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}
	{% set fan_speed = params.FAN_SPEED|default(20)|int %}
	
	{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}
	{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}
	{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}
	{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
	
	{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}
	{% set initial_purge = params.PURGE_MM|default(1)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	
	{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}
	{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Starting extrusion flow calibration print")}
	{action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
	{action_respond_info("")}
	{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}
	{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}
	{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	
	
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[board_pins]
aliases = 
	
	EXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,
	EXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,
	
	EXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,
	EXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>

[display]
lcd_type = uc1701
cs_pin = z:P1.18
a0_pin = z:P1.19
encoder_pins = ^z:P3.25,^z:P3.26
click_pin = ^!z:P0.28
contrast = 63

[neopixel fysetc_mini12864]
pin = z:P1.21
chain_count = 3
initial_red = 0.0
initial_green = 1.0
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel_blue]
initial_duration = 2
gcode = 
	SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0

[delayed_gcode setdisplayneopixel]
initial_duration = 4
gcode = 
	SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0
	SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0
	SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0

[menu __main __control __move_001mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.01mm

[menu __main __control __move_001mm __axis_x]
type = input
name = Move X:{'%06.2f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.01
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_001mm __axis_y]
type = input
name = Move Y:{'%06.2f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.01
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_001mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%06.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.01
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[heater_bed]
heater_pin = z:P2.3
sensor_type = NTC 100K MGB18-104F39050L32
sensor_pin = z:P0.25
max_power = 1.0
min_temp = 5
max_temp = 125
control = pid
pid_kp = 56.249
pid_ki = 2.451
pid_kd = 322.730

[heater_fan hotend_fan]
pin = EBBCan: PA1
max_power = 1.0
kick_start_time = 1
cycle_time = 0.050
heater = extruder
heater_temp = 50.0
fan_speed = 0.6

[fan]
pin = EBBCan: PA0
max_power = 1.0
kick_start_time = 1
cycle_time = 0.050
off_below = 0.15

[heater_fan controller_fan]
pin = z:P2.4
max_power = 1.0
kick_start_time = 0.5
heater = heater_bed
heater_temp = 60.0
fan_speed = 1.0

[heater_fan exhaust_fan]
pin = z:P2.7
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0
heater = extruder
heater_temp = 200
fan_speed = 1.0

[gcode_macro _BEDFANVARS]
variable_threshold = 100
variable_fast = 0.4
variable_slow = 0.2
gcode = 

[fan_generic BedFans]
pin = P2.3
kick_start_time = 0.5

[gcode_macro BEDFANSSLOW]
gcode = 
	
	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode = 
	
	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode = 
	SET_FAN_SPEED FAN=BedFans SPEED=0

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing = _SET_HEATER_TEMPERATURE
gcode = 
	
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
	M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
	M99140 S{TARGET}
	{% else %}
	{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}
	
	
	{% if HEATER|lower == "heater_bed" %}
	{% if TARGET >= THRESHOLD %}
	BEDFANSSLOW
	UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
	{% else %}
	BEDFANSOFF
	UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0
	{% endif %}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set S = params.S|int %}
	
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
	BEDFANSSLOW
	{% else %}
	BEDFANSOFF
	{% endif %}
	
	M140 {% for p in params
	%}{'%s%s' % (p, params[p])}{%
	endfor %}
	
	{% if S != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}
	{% endif %}
	
	
	{% if S >= THRESHOLD %}
	BEDFANSFAST
	{% endif %}

[gcode_macro M140]
rename_existing = M99140
gcode = 
	
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}

[gcode_macro TURN_OFF_HEATERS]
rename_existing = _TURN_OFF_HEATERS
gcode = 
	BEDFANSOFF
	_TURN_OFF_HEATERS

[delayed_gcode bedfanloop]
gcode = 
	
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}
	{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
	BEDFANSFAST
	{% else %}
	UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5
	{% endif %}
	{% endif %}

[neopixel sb_leds]
pin = EBBCan:PD3
chain_count = 3
color_order = GRB
initial_red = 1.0
initial_green = 1.0
initial_blue = 1.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	
	'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	
	'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},
	'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro LIGHTS_100]
gcode = 
	SET_PIN PIN=caselight VALUE=100

[gcode_macro LIGHTS_50]
gcode = 
	SET_PIN PIN=caselight VALUE=50

[gcode_macro LIGHTS_OFF]
gcode = 
	SET_PIN PIN=caselight VALUE=0

[gcode_macro LED_ALL_RED]
gcode = 
	SET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1

[gcode_macro LED_ALL_BLUE]
gcode = 
	SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1

[gcode_macro LED_ALL_GREEN]
gcode = 
	SET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1

[gcode_macro LED_ALL_WHITE]
gcode = 
	SET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1

[gcode_macro BLINKING_LEDS]
gcode = 
	SET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1
	G4 P50

[adxl345]
cs_pin = EBBCan: PB12
spi_software_sclk_pin = EBBCan: PB10
spi_software_mosi_pin = EBBCan: PB11
spi_software_miso_pin = EBBCan: PB2
axes_map = x,y,z

[lis2dw]
cs_pin = cartographer:PA3
spi_bus = spi1

[resonance_tester]
accel_chip = adxl345
probe_points = 
	175,175,20

[input_shaper]
shaper_freq_x = 60.8
shaper_type_x = ei
shaper_freq_y = 36.2
shaper_type_y = mzv

[mcu EBBCan]
canbus_uuid = 18d261870712

[mcu]
serial = /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00

[mcu z]
serial = /dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00

[printer]
kinematics = corexy
max_velocity = 900
max_accel = 3500
max_z_velocity = 50
max_z_accel = 1500
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[output_pin caselight ]
pin = z:P2.5
pwm = true
shutdown_value = 0
value = 50
cycle_time = 0.01
scale = 100

[temperature_sensor chamber]
sensor_type = Generic 3950
sensor_pin = P0.23
min_temp = 5
max_temp = 80
gcode_id = C

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[exclude_object]

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	325,305
	325,5
	25,5
	25,305
speed = 1000
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[bed_mesh]
algorithm = bicubic
speed = 1000
horizontal_move_z = 5
probe_count = 9,9
fade_start = 0.6
fade_end = 10.0
mesh_min = 40, 40
mesh_max = 310,310
adaptive_margin = 5
zero_reference_position = 175,175

[gcode_macro DATA_SAMPLE]
gcode = 
	G90
	M106 S255
	RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
	M117 Waiting for Coil to cool to 40
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
	RESPOND TYPE=command MSG='Starting Phase 1 of 4'
	M117 Starting Phase 1 of 4
	M106 S0
	G28
	G0 Z1
	M104 S250
	M140 S110
	G4 P1000
	CARTOGRAPHER_STREAM FILENAME=data1
	M117 Waiting for Coil to heat to 70
	RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
	CARTOGRAPHER_STREAM FILENAME=data1
	M104 S0
	M140 S0
	M106 S255
	G0 Z80
	RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
	M117 Waiting for Coil to cool to 40
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
	M117 Starting Phase 2 of 4
	RESPOND TYPE=command MSG='Starting Phase 2 of 4'
	M106 S0
	G28 Z0
	G0 Z2
	M104 S250
	M140 S110
	G4 P1000
	CARTOGRAPHER_STREAM FILENAME=data2
	M117 Waiting for Coil to heat to 70
	RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
	CARTOGRAPHER_STREAM FILENAME=data2
	M104 S0
	M140 S0
	M106 S255
	G0 Z80
	RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
	M117 Waiting for Coil to cool to 40
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
	M117 "Starting Phase 3 of 4"
	RESPOND TYPE=command MSG='Starting Phase 3 of 4'
	M106 S0
	G28 Z0
	G0 Z3
	M104 S250
	M140 S110
	G4 P1000
	CARTOGRAPHER_STREAM FILENAME=data3
	M117 Waiting for Coil to heat to 70
	RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
	CARTOGRAPHER_STREAM FILENAME=data3
	M104 S0
	M140 S0
	M106 S255
	G0 Z80
	M117 Waiting for Coil to cool to 40
	RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
	M117 "Starting Phase 4 of 4"
	RESPOND TYPE=command MSG='Starting Phase 4 of 4'
	M106 S0
	G28 Z0
	G0 Z5
	M104 S250
	M140 S110
	G4 P1000
	CARTOGRAPHER_STREAM FILENAME=data4
	M117 Waiting for Coil to heat to 70
	RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
	CARTOGRAPHER_STREAM FILENAME=data4
	M104 S0
	M140 S0
	RESPOND TYPE=command MSG='Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/'
	M117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"
	RESPOND TYPE=command MSG='Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta'
	M117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"

[bed_mesh default]
version = 1
points = 
	0.019116, 0.004968, -0.023674
	0.007393, 0.000000, -0.025204
	0.022538, 0.016209, -0.005839
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 150.237
max_x = 199.836
min_y = 150.228
max_y = 199.828

[cartographer model default]
model_coef = 1.4711812019653276,
	1.9094745664628197,
	0.7622228301595559,
	0.3272285810884628,
	0.35005214332292356,
	0.3321280355049826,
	-0.2625227207315976,
	-0.2864279763879038,
	0.22967673647312103,
	0.16966370873812742
model_domain = 3.247181162459674e-07,3.333975001478977e-07
model_range = 0.100000,5.000000
model_temp = 26.797560
model_offset = 0.10500

[cartographer model FlatSingle-Cold]
model_coef = 1.4711812019653276,
	1.9094745664628197,
	0.7622228301595559,
	0.3272285810884628,
	0.35005214332292356,
	0.3321280355049826,
	-0.2625227207315976,
	-0.2864279763879038,
	0.22967673647312103,
	0.16966370873812742
model_domain = 3.247181162459674e-07,3.333975001478977e-07
model_range = 0.100000,5.000000
model_temp = 26.797560
model_offset = -0.03000

[cartographer model StructSingle-Cold]
model_coef = 1.3518075164383603,
	1.7863674140091501,
	0.7491022161421897,
	0.3418034486422346,
	0.474786021574374,
	0.466327567527803,
	-0.36077266680925035,
	-0.4233856645228799,
	0.3341420760703143,
	0.2789694162262722
model_domain = 3.1806767070840717e-07,3.3272009864110665e-07
model_range = 0.100000,5.000000
model_temp = 27.516956
model_offset = -0.10500

[cartographer model StrucktDbl-Cold]
model_coef = 1.4539724547957718,
	1.890512457294597,
	0.7738465232272026,
	0.35584469223771087,
	0.3058002859398506,
	0.2538645469905682,
	-0.15927877633630289,
	-0.15992801513549426,
	0.17525677096686262,
	0.11070473232515006
model_domain = 3.239643669724778e-07,3.332857136863782e-07
model_range = 0.100000,5.000000
model_temp = 27.161944
model_offset = 0.21500

[cartographer model DiamondDbl-Cold]
model_coef = 1.46311906240812,
	1.9097451316039786,
	0.7860367034010269,
	0.2979412543104158,
	0.25188048441647043,
	0.42375248063163695,
	-0.09331589610001519,
	-0.39478873981561685,
	0.1425927310786974,
	0.21482543483049402
model_domain = 3.2466691052783215e-07,3.3339049405392883e-07
model_range = 0.100000,5.000000
model_temp = 26.966772
model_offset = -0.07500
=======================
Loaded MCU 'mcu' 106 commands (v0.12.0-143-g01c7befa / gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.40-2+18+b1) 2.40)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c0=P0.28,P0.27 BUS_PINS_i2c1=P0.1,P0.0 BUS_PINS_i2c1a=P0.20,P0.19 BUS_PINS_i2c2=P0.11,P0.10 BUS_PINS_ssp0=P0.17,P0.18,P0.15 BUS_PINS_ssp1=P0.8,P0.9,P0.7 CLOCK_FREQ=100000000 MCU=lpc1768 PWM_MAX=255 RESERVE_PINS_USB=P0.30,P0.29,P2.9 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'mcu' (1024 moves)
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-155-g4cfa266e-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/led_effect.py, klippy/extras/cartographer.py, klippy/extras/idm.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0]'
webhooks client 547885343696: {'program': 'Moonraker', 'version': 'v0.8.0-325-g99b97af'}
Loaded MCU 'z' 106 commands (v0.12.0-143-g01c7befa / gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.39-8+rpi1+18) 2.39)
MCU 'z' config: ADC_MAX=4095 BUS_PINS_i2c0=P0.28,P0.27 BUS_PINS_i2c1=P0.1,P0.0 BUS_PINS_i2c1a=P0.20,P0.19 BUS_PINS_i2c2=P0.11,P0.10 BUS_PINS_ssp0=P0.17,P0.18,P0.15 BUS_PINS_ssp1=P0.8,P0.9,P0.7 CLOCK_FREQ=100000000 MCU=lpc1768 PWM_MAX=255 RESERVE_PINS_USB=P0.30,P0.29,P2.9 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'z' (1024 moves)
=============== Log rollover at Sat Apr 20 01:16:16 2024 ===============
b'Got EOF when reading from device'
b'Got EOF when reading from device'
Timeout with MCU 'EBBCan' (eventtime=8170.849360)
Transition to shutdown state: Lost communication with MCU 'EBBCan'
Dumping gcode input 0 blocks
Dumping 20 requests for client 547885343696
Received 29.554326: b'{"id": 547549476496, "method": "info", "params": {}}'
Received 29.556790: b'{"id": 547549473296, "method": "objects/subscribe", "params": {"objects": {"webhooks": null}, "response_template": {"method": "process_status_update"}}}'
Received 29.559995: b'{"id": 547549896144, "method": "gcode/subscribe_output", "params": {"response_template": {"method": "process_gcode_response"}}}'
Received 29.565559: b'{"id": 547549896144, "method": "list_endpoints", "params": {}}'
Received 29.570225: b'{"id": 547549401936, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null}, "response_template": {"method": "process_status_update"}}}'
Received 29.813401: b'{"id": 547549463184, "method": "objects/list", "params": {}}'
Received 29.815425: b'{"id": 547549463184, "method": "objects/query", "params": {"objects": {"configfile": null}}}'
Received 30.078685: b'{"id": 547549891472, "method": "register_remote_method", "params": {"response_template": {"method": "shutdown_machine"}, "remote_method": "shutdown_machine"}}'
Received 30.082335: b'{"id": 547549896656, "method": "register_remote_method", "params": {"response_template": {"method": "reboot_machine"}, "remote_method": "reboot_machine"}}'
Received 30.083965: b'{"id": 547549896656, "method": "register_remote_method", "params": {"response_template": {"method": "pause_job_queue"}, "remote_method": "pause_job_queue"}}'
Received 30.088923: b'{"id": 547549896656, "method": "register_remote_method", "params": {"response_template": {"method": "start_job_queue"}, "remote_method": "start_job_queue"}}'
Received 30.092269: b'{"id": 547551351312, "method": "objects/query", "params": {"objects": {"heaters": null}}}'
Received 30.093435: b'{"id": 547551348304, "method": "objects/query", "params": {"objects": {"heaters": null}}}'
Received 30.316119: b'{"id": 547551353680, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null, "temperature_sensor cartographer_coil": null, "heater_bed": null, "temperature_sensor chamber": null, "temperature_sensor raspberry_pi": null, "extruder": null}, "response_template": {"method": "process_status_update"}}}'
Received 30.565698: b'{"id": 547551354000, "method": "objects/subscribe", "params": {"objects": {"webhooks": null, "print_stats": null, "temperature_sensor cartographer_coil": null, "heater_bed": null, "temperature_sensor chamber": null, "temperature_sensor raspberry_pi": null, "extruder": null}, "response_template": {"method": "process_status_update"}}}'
Received 32.053880: b'{"id": 547549700176, "method": "info", "params": {}}'
Received 32.062790: b'{"id": 547549693328, "method": "objects/query", "params": {"objects": {"configfile": null}}}'
Received 32.102667: b'{"id": 547549700176, "method": "gcode/help", "params": {}}'
Received 32.110563: b'{"id": 547551429840, "method": "objects/subscribe", "params": {"objects": {"bed_mesh": ["profile_name", "mesh_max", "mesh_min", "probed_matrix", "profiles"], "configfile": ["config"], "display_status": ["progress", "message"], "fan": ["speed"], "gcode_move": ["extrude_factor", "gcode_position", "homing_origin", "speed_factor", "speed"], "idle_timeout": ["state"], "pause_resume": ["is_paused"], "print_stats": null, "toolhead": ["homed_axes", "estimated_print_time", "print_time", "position", "extruder", "max_accel", "minimum_cruise_ratio", "max_velocity", "square_corner_velocity"], "virtual_sdcard": ["file_position", "is_active", "progress"], "webhooks": null, "firmware_retraction": ["retract_length", "retract_speed", "unretract_extra_length", "unretract_speed"], "motion_report": ["live_position", "live_velocity", "live_extruder_velocity"], "exclude_object": ["current_object", "objects", "excluded_objects"], "manual_probe": ["is_active"], "screws_tilt_adjust": ["results", "error"], "extruder": null, "heater_bed": null, "temperature_sensor chamber": null, "temperature_sensor raspberry_pi": null, "fan_generic BedFans": ["speed"], "heater_fan hotend_fan": ["speed"], "heater_fan controller_fan": ["speed"], "heater_fan exhaust_fan": ["speed"], "output_pin caselight ": ["value"], "neopixel fysetc_mini12864": ["color_data"], "neopixel sb_leds": ["color_data"], "temperature_sensor cartographer_coil": null}, "response_template": {"method": "process_status_update"}}}'
Received 32.118263: b'{"id": 547551520144, "method": "objects/query", "params": {"objects": {"bed_mesh": null, "configfile": null, "display_status": null, "extruder": null, "fan": null, "gcode_move": null, "heater_bed": null, "idle_timeout": null, "pause_resume": null, "print_stats": null, "toolhead": null, "virtual_sdcard": null, "webhooks": null, "motion_report": null, "firmware_retraction": null, "exclude_object": null, "manual_probe": null, "temperature_sensor chamber": null, "temperature_sensor raspberry_pi": null, "fan_generic BedFans": null, "heater_fan hotend_fan": null, "heater_fan controller_fan": null, "heater_fan exhaust_fan": null, "output_pin caselight ": null, "neopixel fysetc_mini12864": null, "neopixel sb_leds": null}}}'
gcode state: absolute_coord=True absolute_extrude=True base_position=[0.0, 0.0, 0.0, 0.0] last_position=[0.0, 0.0, 0.0, 0.0] homing_position=[0.0, 0.0, 0.0, 0.0] speed_factor=0.016666666666666666 extrude_factor=1.0 speed=25.0
Reactor garbage collection: (8158.161234767, 7783.143756194, 4708.834685656)
Timeout with MCU 'mcu' (eventtime=8171.849963)
Timeout with MCU 'z' (eventtime=8171.849963)
Timeout with MCU 'cartographer' (eventtime=8171.849963)
b'Got error -1 in can write: (11)Resource temporarily unavailable'
b'Got error -1 in can write: (11)Resource temporarily unavailable'
b'Got error -1 in can write: (11)Resource temporarily unavailable'
b'Got error -1 in can write: (11)Resource temporarily unavailable'
b'Got error -1 in can write: (11)Resource temporarily unavailable'
b'Halting reads due to CAN write errors.'
b'Got error -1 in can write: (11)Resource temporarily unavailable'
b'Halting reads due to CAN write errors.'
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-155-g4cfa266e-dirty'
Untracked files: klippy/extras/gcode_shell_command.py, klippy/extras/led_effect.py, klippy/extras/cartographer.py, klippy/extras/idm.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0]'
Start printer at Sat Apr 20 01:19:36 2024 (1713568776.2 19.8)
===== Config file =====
[cartographer]
canbus_uuid = 89eb26f14edf
speed = 40.
lift_speed = 5.
backlash_comp = 0.5
x_offset = 0.
y_offset = 21.1
trigger_distance = 2.
trigger_dive_threshold = 1.5
trigger_hysteresis = 0.006
cal_nozzle_z = 0.1
cal_floor = 0.1
cal_ceil = 5.
cal_speed = 1.0
cal_move_speed = 10.
default_model_name = default
mesh_main_direction = x
mesh_cluster_size = 1
mesh_runs = 2

[gcode_macro A_CARTOGRAPHER_CALIBRATE]
gcode = 
	
	
	CARTOGRAPHER_CALIBRATE

[gcode_macro B_PROBE_ACCURACY]
gcode = 
	G28
	PROBE_ACCURACY

[gcode_macro C_CARTOGRAPHER_ESTIMATE_BACKLASH]
gcode = 
	CARTOGRAPHER_ESTIMATE_BACKLASH

[gcode_macro D_CARTOGRAPHER_MODEL_LIST]
gcode = 
	CARTOGRAPHER_MODEL_LIST

[gcode_macro E_CARTOGRAPHER_MODEL_SELECT]
gcode = 
	{% set model=params.MODEL|default(default) %}
	CARTOGRAPHER_MODEL_SELECT NAME={model}

[gcode_macro F_CARTOGRAPHER_MODEL_SAVE]
gcode = 
	{% set name=params.NAME|default(default) %}
	CARTOGRAPHER_MODEL_SAVE NAME={name}

[gcode_macro G_CARTOGRAPHER_MODEL_REMOVE]
gcode = 
	{% set name=params.NAME|default(default) %}
	CARTOGRAPHER_MODEL_REMOVE NAME={name}

[gcode_macro H_BED_MESH_CALIBRATE]
gcode = 
	G28
	BED_MESH_CALIBRATE

[gcode_macro I_BED_MESH_PROFILE_SAVE]
gcode = 
	{% set name=params.NAME|default(none) %}
	BED_MESH_PROFILE SAVE={name}

[gcode_macro J_BED_MESH_PROFILE_LOAD]
gcode = 
	{% set name=params.NAME|default(none) %}
	BED_MESH_PROFILE LOAD={name}

[gcode_macro K_BED_MESH_PROFILE_REMOVE]
gcode = 
	{% set name=params.NAME|default(none) %}
	BED_MESH_PROFILE REMOVE={name}

[gcode_macro L_Z_OFFSET_APPLY_PROBE]
gcode = 
	G28
	Z_OFFSET_APPLY_PROBE

[tmc2209 stepper_x]
uart_pin = P1.10
diag_pin = ^P1.29
driver_sgthrs = 112
interpolate = false
run_current = 1.2
stealthchop_threshold = 0

[tmc2209 stepper_y]
uart_pin = P1.9
diag_pin = ^P1.28
driver_sgthrs = 112
interpolate = false
run_current = 1.2
stealthchop_threshold = 0

[stepper_x]
step_pin = P2.2
dir_pin = P2.6
enable_pin = !P2.1
rotation_distance = 40
microsteps = 128
full_steps_per_rotation = 200
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 50
homing_retract_dist = 0
homing_positive_dir = true

[stepper_y]
step_pin = P0.19
dir_pin = P0.20
enable_pin = !P2.8
rotation_distance = 40
microsteps = 128
full_steps_per_rotation = 200
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_min = 0
position_endstop = 362
position_max = 362
homing_speed = 50
homing_retract_dist = 0
homing_positive_dir = true

[stepper_z]
step_pin = z:P2.2
dir_pin = !z:P2.6
enable_pin = !z:P2.1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 128
endstop_pin = probe:z_virtual_endstop
position_max = 310
position_min = -5
homing_speed = 10
second_homing_speed = 5
homing_retract_dist = 0

[tmc2209 stepper_z]
uart_pin = z:P1.10
interpolate = false
run_current = 1.2
hold_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 1

[stepper_z1]
step_pin = z:P0.19
dir_pin = !z:P0.20
enable_pin = !z:P2.8
rotation_distance = 40
gear_ratio = 80:16
microsteps = 128

[tmc2209 stepper_z1]
uart_pin = z:P1.9
interpolate = false
run_current = 1.2
hold_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 1

[stepper_z2]
step_pin = z:P0.22
dir_pin = z:P2.11
enable_pin = !z:P0.21
rotation_distance = 40
gear_ratio = 80:16
microsteps = 128

[tmc2209 stepper_z2]
uart_pin = z:P1.8
interpolate = false
run_current = 1.2
hold_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 1

[stepper_z3]
step_pin = z:P2.13
dir_pin = !z:P0.11
enable_pin = !z:P2.12
rotation_distance = 40
gear_ratio = 80:16
microsteps = 128

[tmc2209 stepper_z3]
uart_pin = z:P1.4
run_current = 1.2
interpolate = false
hold_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 1

[extruder]
step_pin = EBBCan: PD0
dir_pin = EBBCan: PD1
enable_pin = !EBBCan: PD2
rotation_distance = 21.43692518458227
gear_ratio = 50:10
microsteps = 128
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
pressure_advance = 0.025
max_extrude_only_distance = 150.0
max_extrude_cross_section = 5
heater_pin = EBBCan: PB13
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = EBBCan: PA3
min_temp = 0
max_temp = 290
max_power = 1.0
min_extrude_temp = 170
control = pid
pid_kp = 23.572
pid_ki = 2.153
pid_kd = 64.527

[tmc2209 extruder]
uart_pin = EBBCan: PA15
interpolate = false
run_current = 0.5
hold_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 1

[virtual_sdcard]
path = /home/pi/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]
recover_velocity = 50

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	G0 F25000
	G92 E0
	G1 E-5.0 F3600
	G91
	G1 Z1.0 F25000
	G0 Z5 X20 Y20 F25000
	G90
	M107
	PARK_NOZZLE
	TURN_OFF_HEATERS
	DISABLE_AB_STEPPERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	
	{% set x = params.X|default(10) %}
	{% set y = params.Y|default(300) %}
	{% set z = params.Z|default(100)|float %}
	{% set e = params.E|default(2) %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set lift_z = z|abs %}
	{% if act_z < (max_z - lift_z) %}
	{% set z_safe = lift_z %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{e} F2100
	G1 Z{z_safe}
	G90
	G1 X{x} Y{y} F25000

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set e = params.E|default(1) %}
	G91
	G1 E{e} F2100
	G90
	RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=8000
	BASE_RESUME

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1)|int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos | default(false) | lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x | default(0.0) %}
	{% set custom_park_y  = client.custom_park_y | default(0.0) %}
	{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}
	{% set sp_hop         = client.speed_hop | default(15) * 60 %}
	{% set sp_move        = client.speed_move | default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN | default(0) | float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}
	{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed | float | abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}
	{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}

[delayed_gcode welcome]
initial_duration = 2
gcode = 
	M118
	M118 Welcome Roland!!!
	BLINKING_LEDS
	status_ready

[delayed_gcode bed_mesh_init]
initial_duration = .01
gcode = 
	BED_MESH_CLEAR

[gcode_macro SAVE_Z]
gcode = 
	{% set axismax = printer.toolhead.axis_maximum %}
	{% set pos     = printer.toolhead.position     %}
	
	
	{% if pos.z < ( 15 ) %}
	G90
	G0 Z25 F25000
	{% endif %}

[gcode_macro PARK_NOZZLE]
gcode = 
	SAVE_Z
	G0 X340 Y340 F25000
	STATUS_READY

[gcode_macro MOVE_TO_CENTER]
gcode = 
	SAVE_Z
	G0 X175 Y175 F25000

[gcode_macro PUBLISH_ALERT]
gcode = 
	{% set data = params.PAYLOAD|default(None) %}
	{action_call_remote_method("publish_mqtt_topic",
	topic="klipper/alert",
	payload=data,
	qos=0,
	retain=False,
	use_prefix=True)}

[gcode_macro DO_HOMING]
gcode = 
	{% set target_bed = params.BED_TEMP|default('80') %}
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	
	
	SET_DISPLAY_TEXT MSG="Homing"
	STATUS_HOMING
	G28
	G90
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	QUAD_GANTRY_LEVEL

[force_move]
enable_force_move = True

[gcode_macro UNSAFE_LIFT_HEAD]
description = Lift head 10mm without homing
gcode = 
	G90
	SET_KINEMATIC_POSITION Z=0
	G0 Z10 F600
	M84

[gcode_macro UNSAVE_X_MOVE_ENABLE]
gcode = 
	{% set data = params.NUMBER|default(None) %}
	SET_KINEMATIC_POSITION Z=$data

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-15.0 F3600
	G91
	G1 Z1.0 F25000
	G0 Z5 X20 Y20 F25000
	G90
	TURN_OFF_HEATERS
	PARK_NOZZLE
	M107

[gcode_macro CLEAN_NOZZLE]
gcode = 
	{% if not 'xy' in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	STATUS_CLEANING
	SAVE_Z
	M118 Clean Nozzle requested
	SAVE_Z
	G0 F25000
	G0 Y361
	G0 X20
	
	{% set TTEMP = printer.extruder.target %}
	{% set TARGET = 230 %}
	{% if TTEMP < TARGET %}
	SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={TARGET}
	M118 Target temp set to {TARGET} for cleaning nozzle!
	TEMPERATURE_WAIT SENSOR="extruder" MINIMUM=225.0 MAXIMUM=235.0
	M118 Target temp reached!
	LED_ALL_RED
	{% endif %}
	G91
	G1 E-1 F2100
	G90
	
	G0 Z2.0 F1500
	G0 X75
	G0 X120
	G0 X75
	G0 X120
	M106 S255
	SET_HEATER_TEMPERATURE HEATER="extruder" TARGET=0
	G0 X75
	G0 X120
	G0 X75
	G0 X120
	SAVE_Z
	PARK_NOZZLE
	TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=180.0
	M118 Nozzle cleaning finished!
	
	M106 S0

[gcode_macro COME_TO_ME]
description = moves printhead in XYZ to the front
gcode = 
	M118 Send head to front for service!
	G28
	LIGHTS_100
	SAVE_Z
	G90; use absolute coords
	G0 X175 Y0 Z250 F25000
	DISABLE_AB_STEPPERS
	M118 Ready!

[gcode_macro DISABLE_Z_STEPPERS]
gcode = 
	SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=0

[gcode_macro DISABLE_AB_STEPPERS]
gcode = 
	SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0

[gcode_macro ACC_QUERY]
gcode = 
	ACCELEROMETER_QUERY
	MEASURE_AXES_NOISE

[gcode_macro TestResonance_X]
gcode = 
	G28
	TEST_RESONANCES AXIS=X

[gcode_macro TestResonance_Y]
gcode = 
	G28
	TEST_RESONANCES AXIS=Y

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro _HOME_X]
gcode = 
	
	
	
	
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
	{% set HOME_CURRENT = 0.7 %}
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	
	
	
	
	
	
	
	G28 X0
	
	G91
	G1 X-10 F1200
	G4 P2000
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode = 
	
	
	
	
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
	{% set HOME_CURRENT = 0.7 %}
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	
	
	
	
	
	
	
	G28 Y0
	
	G91
	G1 Y-10 F1200
	G4 P2000
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[homing_override]
axes = xy
gcode = 
	UNSAFE_LIFT_HEAD
	{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
	
	{% if home_all or 'X' in params %}
	_HOME_X
	{% endif %}
	
	{% if home_all or 'Y' in params %}
	_HOME_Y
	{% endif %}
	
	{% if home_all or 'Z' in params %}
	G90
	G1 X175 Y175 F12000
	G28 Z0
	SAVE_Z
	{% endif %}
	CHECK_HOMING

[gcode_macro CHECK_HOMING]
gcode = 
	{% set homed_axes_xyz = printer.toolhead.homed_axes %}
	M118 "Homed axes: {homed_axes_xyz}"
	
	{% if not 'x' in printer.toolhead.homed_axes %}
	M118 "X not homed"
	{% endif %}
	
	{% if not 'y' in printer.toolhead.homed_axes %}
	M118 "Y not homed"
	{% endif %}
	
	{% if not 'z' in printer.toolhead.homed_axes %}
	M118 "Z not homed"
	{% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = _QUAD_GANTRY_LEVEL
gcode = 
	{% if printer.quad_gantry_level.applied == False %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_Z
	_QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000
	_QUAD_GANTRY_LEVEL horizontal_move_z=3
	MOVE_TO_CENTER
	CHECK_HOMING
	G28 Z0
	SAVE_Z
	CHECK_HOMING
	
	G4 P500
	{% endif %}

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	{% set target_chamber = params.CHAMBER|default("0")|int %}
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	DO_HOMING	BED_TEMP={target_bed}
	
	
	
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="BED_MESH_CLEAR"
	BED_MESH_CLEAR
	SET_DISPLAY_TEXT MSG="BED_MESH_CALIBRATE"
	BED_MESH_CALIBRATE
	SET_DISPLAY_TEXT MSG="SMART_PARK"
	SMART_PARK
	
	
	SET_DISPLAY_TEXT MSG="Printer goes brr"
	STATUS_PRINTING
	LINE_PURGE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set purge_height = kamp_settings.purge_height | float %}
	{% set tip_distance = kamp_settings.tip_distance | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set purge_amount = kamp_settings.purge_amount | float %}
	{% set flow_rate = kamp_settings.flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	{RETRACT}
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	{UNRETRACT}
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	{RETRACT}
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	{UNRETRACT}
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	{RETRACT}
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Presmartpark_State
	
	G90
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}
	
	RESTORE_GCODE_STATE NAME=Presmartpark_State

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 25
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro AXES_MAP_CALIBRATION]
gcode = 
	{% set z_height = params.Z_HEIGHT|default(20)|int %}
	{% set speed = params.SPEED|default(80)|float * 60 %}
	{% set accel = params.ACCEL|default(1500)|int %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(120)|int * 60 %}
	{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}
	
	{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}
	
	{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}
	{% set old_accel = printer.toolhead.max_accel %}
	{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}
	{% set old_sqv = printer.toolhead.square_corner_velocity %}
	
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	{action_respond_info("")}
	{action_respond_info("Starting accelerometer axe_map calibration")}
	{action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION
	
	G90
	
	
	SET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}
	
	
	G1 Z{z_height} F{feedrate_travel / 8}
	G1 X{mid_x - 15} Y{mid_y - 15} F{feedrate_travel}
	G4 P500
	
	ACCELEROMETER_MEASURE CHIP={accel_chip}
	G4 P1000
	G1 X{mid_x + 15} F{speed}
	G4 P1000
	G1 Y{mid_y + 15} F{speed}
	G4 P1000
	G1 Z{z_height + 15} F{speed}
	G4 P1000
	ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=axemap
	
	RESPOND MSG="Analysis of the movements..."
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type axesmap --accel {accel|int} --chip_name {accel_chip}"
	
	
	SET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}
	
	RESTORE_GCODE_STATE NAME=STATE_AXESMAP_CALIBRATION

[gcode_macro AXES_SHAPER_CALIBRATION]
description = Perform standard axis input shaper tests on one or both XY axes to select the best input shaper filter
gcode = 
	{% set min_freq = params.FREQ_START|default(5)|float %}
	{% set max_freq = params.FREQ_END|default(133.3)|float %}
	{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}
	{% set axis = params.AXIS|default("all")|string|lower %}
	{% set scv = params.SCV|default(None) %}
	{% set max_sm = params.MAX_SMOOTHING|default(None) %}
	{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}
	{% set keep_csv = params.KEEP_CSV|default(True) %}
	
	{% set X, Y = False, False %}
	
	{% if axis == "all" %}
	{% set X, Y = True, True %}
	{% elif axis == "x" %}
	{% set X = True %}
	{% elif axis == "y" %}
	{% set Y = True %}
	{% else %}
	{ action_raise_error("AXIS selection invalid. Should be either all, x or y!") }
	{% endif %}
	
	{% if scv is none %}
	{% set scv = printer.toolhead.square_corner_velocity %}
	{% endif %}
	
	{% if X %}
	TEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
	M400
	
	RESPOND MSG="X axis frequency profile generation..."
	RESPOND MSG="This may take some time (1-3min)"
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"
	{% endif %}
	
	{% if Y %}
	TEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
	M400
	
	RESPOND MSG="Y axis frequency profile generation..."
	RESPOND MSG="This may take some time (1-3min)"
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type shaper --scv {scv} {% if max_sm is not none %}--max_smoothing {max_sm}{% endif %} {% if keep_csv %}--keep_csv{% endif %}"
	{% endif %}
	
	M400
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"

[gcode_macro BELTS_SHAPER_CALIBRATION]
description = Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers
gcode = 
	{% set min_freq = params.FREQ_START|default(5)|float %}
	{% set max_freq = params.FREQ_END|default(133.33)|float %}
	{% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}
	{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}
	{% set keep_csv = params.KEEP_CSV|default(True) %}
	
	TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
	M400
	
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
	M400
	
	RESPOND MSG="Belts comparative frequency profile generation..."
	RESPOND MSG="This may take some time (3-5min)"
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type belts {% if keep_csv %}--keep_csv{% endif %}"
	M400
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"

[gcode_macro EXCITATE_AXIS_AT_FREQ]
description = Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration
gcode = 
	{% set frequency = params.FREQUENCY|default(25)|int %}
	{% set time = params.TIME|default(10)|int %}
	{% set axis = params.AXIS|default("x")|string|lower %}
	
	{% if axis not in ["x", "y", "a", "b"] %}
	{ action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }
	{% endif %}
	
	{% if axis == "a" %}
	{% set axis = "1,-1" %}
	{% elif axis == "b" %}
	{% set axis = "1,1" %}
	{% endif %}
	
	TEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}
	M400

[gcode_macro VIBRATIONS_CALIBRATION]
gcode = 
	{% set size = params.SIZE|default(60)|int %}
	{% set direction = params.DIRECTION|default('XY') %}
	{% set z_height = params.Z_HEIGHT|default(20)|int %}
	
	{% set min_speed = params.MIN_SPEED|default(20)|float * 60 %}
	{% set max_speed = params.MAX_SPEED|default(200)|float * 60 %}
	{% set speed_increment = params.SPEED_INCREMENT|default(2)|float * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}
	{% set accel = params.ACCEL|default(3000)|int %}
	{% set accel_chip = params.ACCEL_CHIP|default("adxl345") %}
	
	{% set keep_results = params.KEEP_N_RESULTS|default(3)|int %}
	{% set keep_csv = params.KEEP_CSV|default(True) %}
	
	{% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}
	{% set nb_samples = ((max_speed - min_speed) / speed_increment + 1) | int %}
	
	{% set accel = [accel, printer.configfile.settings.printer.max_accel]|min %}
	{% set old_accel = printer.toolhead.max_accel %}
	{% set old_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}
	{% set old_sqv = printer.toolhead.square_corner_velocity %}
	
	{% set direction_factor = {
	'XY'  : {
	'start' : {'x': -0.5, 'y': -0.5 },
	'move_factors' : {
	'0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
	'2' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
	'3' : {'x': -0.5, 'y': -0.5, 'z': 0.0 }
	}
	},
	'AB' : {
	'start' : {'x': 0.0, 'y': 0.0 },
	'move_factors' : {
	'0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
	'2' : {'x': 0.0, 'y': 0.0, 'z': 0.0 },
	'3' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
	'4' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
	'5' : {'x': 0.0, 'y': 0.0, 'z': 0.0 }
	}
	},
	'ABXY' : {
	'start' : {'x': -0.5, 'y': 0.5 },
	'move_factors' : {
	'0' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
	'2' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
	'3' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
	'4' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
	'5' : {'x': -0.5, 'y': 0.5, 'z': 0.0 }
	}
	},
	'B'  : {
	'start' : {'x': 0.5, 'y': 0.5 },
	'move_factors' : {
	'0' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': 0.5, 'y': 0.5, 'z': 0.0 }
	}
	},
	'A'  : {
	'start' : {'x': -0.5, 'y': 0.5 },
	'move_factors' : {
	'0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': -0.5, 'y': 0.5, 'z': 0.0 }
	}
	},
	'X'  : {
	'start' : {'x': -0.5, 'y': 0.0 },
	'move_factors' : {
	'0' : {'x': 0.5, 'y': 0.0, 'z': 0.0 },
	'1' : {'x': -0.5, 'y': 0.0, 'z': 0.0 }
	}
	},
	'Y'  : {
	'start' : {'x': 0.0, 'y': 0.5 },
	'move_factors' : {
	'0' : {'x': 0.0, 'y': -0.5, 'z': 0.0 },
	'1' : {'x': 0.0, 'y': 0.5, 'z': 0.0 }
	}
	},
	'Z'  : {
	'start' : {'x': 0.0, 'y': 0.0 },
	'move_factors' : {
	'0' : {'x': 0.0, 'y': 0.0, 'z': 1.0 },
	'1' : {'x': 0.0, 'y': 0.0, 'z': 0.0 }
	}
	},
	'E'  : {
	'start' : {'x': 0.0, 'y': 0.0 },
	'move_factor' : 0.05
	}
	}
	%}
	
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	{% if params.SPEED_INCREMENT|default(2)|float * 100 != (params.SPEED_INCREMENT|default(2)|float * 100)|int %}
	{ action_raise_error("Only 2 decimal digits are allowed for SPEED_INCREMENT") }
	{% endif %}
	
	{% if (size / (max_speed / 60)) < 0.25 and direction != 'E' %}
	{ action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }
	{% endif %}
	
	{% if not (direction in direction_factor) %}
	{ action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y, Z or E is allowed!") }
	{% endif %}
	
	{action_respond_info("")}
	{action_respond_info("Starting speed and vibration calibration")}
	{action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION
	
	G90
	
	
	SET_VELOCITY_LIMIT ACCEL={accel} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY={[(accel / 1000), 5.0]|max}
	
	
	G1 Z{z_height} F{feedrate_travel / 10}
	G1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}
	
	
	{% for curr_sample in range(0, nb_samples) %}
	{% set curr_speed = min_speed + curr_sample * speed_increment %}
	RESPOND MSG="{"Current speed: %.2f mm/s" % (curr_speed / 60)|float}"
	
	ACCELEROMETER_MEASURE CHIP={accel_chip}
	{% if direction == 'E' %}
	G0 E{curr_speed*direction_factor[direction].move_factor} F{curr_speed}
	{% else %}
	{% for key, factor in direction_factor[direction].move_factors|dictsort %}
	G1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}
	{% endfor %}
	{% endif %}
	ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{("%.2f" % (curr_speed / 60)|float)|replace('.','_')}n1
	G4 P300
	
	M400
	{% endfor %}
	
	RESPOND MSG="Machine and motors vibration graph generation..."
	RESPOND MSG="This may take some time (3-5min)"
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type vibrations --axis_name {direction} --accel {accel|int} --chip_name {accel_chip} {% if keep_csv %}--keep_csv{% endif %}"
	M400
	RUN_SHELL_COMMAND CMD=shaketune PARAMS="--type clean --keep_results {keep_results}"
	
	
	SET_VELOCITY_LIMIT ACCEL={old_accel} MINIMUM_CRUISE_RATIO={old_cruise_ratio} SQUARE_CORNER_VELOCITY={old_sqv}
	
	RESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION

[gcode_shell_command shaketune]
command = ~/printer_data/config/K-ShakeTune/scripts/shaketune.sh
timeout = 600.0
verbose = True

[gcode_arcs]
resolution = 0.1

[gcode_macro CALIBRATE]
description = Calibrate the printer flow or pressure advance
gcode = 
	
	{% set TYPE = params.TYPE|default("")|string|lower %}
	
	
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	{% set center_x = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set center_y = printer.toolhead.axis_maximum.y|float / 2 %}
	
	{% if TYPE=="flow" %}
	
	{% set computed_size = (center_x - 20)|string + '_' + (center_y - 20)|string + '_' + (center_x + 20)|string + '_' + (center_y + 20)|string %}
	
	
	START_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} SIZE={computed_size}
	FLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471
	END_PRINT
	
	{% elif TYPE=="pa" %}
	
	{% set computed_size = (center_x - 60)|string + '_' + (center_y - 60)|string + '_' + (center_x + 60)|string + '_' + (center_y + 60)|string %}
	
	
	START_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
	PRESSURE_ADVANCE_CALIBRATION
	END_PRINT
	
	{% else %}
	{action_respond_info("Trage bitte einen Testtyp ein = \"flow\" or \"pa\"!")}
	{action_raise_error("Kein Testtyp eingetragen.")}
	
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description = Calibrate the pressure advance by printing a grid pattern
gcode = 
	{% set pa_start     = params.START|default(0.02)|float %}
	{% set pa_increment = params.INCREMENT|default(0.005)|float %}
	
	{% set do_raft = params.DO_RAFT|default(1)|int %}
	
	{% set print_size      = params.PRINT_SIZE|default(120)|int %}
	{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}
	{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}
	{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},
	{% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}
	{% set initial_purge   = params.PURGE_MM|default(8)|int %}
	
	{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}
	{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}
	{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}
	{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}
	{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	{% set feedrate_retract = 50 * 60 %}
	
	{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	{action_respond_info("")}
	{action_respond_info("Starte Pressure Advance calibration.")}
	{action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
	{action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
	{action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)}
	{action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
	{action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
	{action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)}
	{action_respond_info("Parameter: RETRACT:%.2f" % retract_length)}
	{action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
	{action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
	{action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
	{action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))}
	{action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
	{action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
	{action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
	{action_respond_info("")}
	{action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
	{action_respond_info("")}
	{action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
	{action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}
	{action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
	{action_respond_info("Anzahl Baender: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Angenommen, die erste Bandnummer ist 0")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}
	
	
	
	M221 S100
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(0, num_bands ) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness = 0.0
variable_last_evalue = 0.0
gcode = 

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description = Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode = 
	
	
	
	{% set do_raft = params.DO_RAFT|default(1)|int %}
	{% set do_retract = params.DO_RECTRACT|default(0)|int %}
	{% set print_size = params.PRINT_SIZE|default(40)|int %}
	{% set print_height = params.HEIGHT|default(15)|int %}
	{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}
	{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}
	{% set fan_speed = params.FAN_SPEED|default(20)|int %}
	
	{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %}
	{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}
	{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}
	{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
	
	{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}
	{% set initial_purge = params.PURGE_MM|default(1)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	
	{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}
	{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Starting extrusion flow calibration print")}
	{action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
	{action_respond_info("")}
	{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}
	{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}
	{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	
	
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	M221 S{e_multiplier * 100}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description = Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode = 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}

[board_pins]
aliases = 
	
	EXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,
	EXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,
	
	EXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,
	EXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>

[display]
lcd_type = uc1701
cs_pin = z:P1.18
a0_pin = z:P1.19
encoder_pins = ^z:P3.25,^z:P3.26
click_pin = ^!z:P0.28
contrast = 63

[neopixel fysetc_mini12864]
pin = z:P1.21
chain_count = 3
initial_red = 0.0
initial_green = 1.0
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel_blue]
initial_duration = 2
gcode = 
	SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=1 SYNC=0

[delayed_gcode setdisplayneopixel]
initial_duration = 4
gcode = 
	SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0 SYNC=0
	SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC=0
	SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 SYNC=0

[menu __main __control __move_001mm]
type = list
enable = {not printer.idle_timeout.state == "Printing"}
name = Move 0.01mm

[menu __main __control __move_001mm __axis_x]
type = input
name = Move X:{'%06.2f' % menu.input}
input = {printer.gcode_move.gcode_position.x}
input_min = {printer.toolhead.axis_minimum.x}
input_max = {printer.toolhead.axis_maximum.x}
input_step = 0.01
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 X{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_001mm __axis_y]
type = input
name = Move Y:{'%06.2f' % menu.input}
input = {printer.gcode_move.gcode_position.y}
input_min = {printer.toolhead.axis_minimum.y}
input_max = {printer.toolhead.axis_maximum.y}
input_step = 0.01
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Y{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_001mm __axis_z]
type = input
enable = {not printer.idle_timeout.state == "Printing"}
name = Move Z:{'%06.2f' % menu.input}
input = {printer.gcode_move.gcode_position.z}
input_min = 0
input_max = {printer.toolhead.axis_maximum.z}
input_step = 0.01
gcode = 
	SAVE_GCODE_STATE NAME=__move__axis
	G90
	G1 Z{menu.input}
	RESTORE_GCODE_STATE NAME=__move__axis

[heater_bed]
heater_pin = z:P2.3
sensor_type = NTC 100K MGB18-104F39050L32
sensor_pin = z:P0.25
max_power = 1.0
min_temp = 5
max_temp = 125
control = pid
pid_kp = 56.249
pid_ki = 2.451
pid_kd = 322.730

[heater_fan hotend_fan]
pin = EBBCan: PA1
max_power = 1.0
kick_start_time = 1
cycle_time = 0.050
heater = extruder
heater_temp = 50.0
fan_speed = 0.6

[fan]
pin = EBBCan: PA0
max_power = 1.0
kick_start_time = 1
cycle_time = 0.050
off_below = 0.15

[heater_fan controller_fan]
pin = z:P2.4
max_power = 1.0
kick_start_time = 0.5
heater = heater_bed
heater_temp = 60.0
fan_speed = 1.0

[heater_fan exhaust_fan]
pin = z:P2.7
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0
heater = extruder
heater_temp = 200
fan_speed = 1.0

[gcode_macro _BEDFANVARS]
variable_threshold = 100
variable_fast = 0.4
variable_slow = 0.2
gcode = 

[fan_generic BedFans]
pin = P2.3
kick_start_time = 0.5

[gcode_macro BEDFANSSLOW]
gcode = 
	
	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode = 
	
	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode = 
	SET_FAN_SPEED FAN=BedFans SPEED=0

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing = _SET_HEATER_TEMPERATURE
gcode = 
	
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
	M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
	M99140 S{TARGET}
	{% else %}
	{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}
	
	
	{% if HEATER|lower == "heater_bed" %}
	{% if TARGET >= THRESHOLD %}
	BEDFANSSLOW
	UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
	{% else %}
	BEDFANSOFF
	UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0
	{% endif %}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set S = params.S|int %}
	
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
	BEDFANSSLOW
	{% else %}
	BEDFANSOFF
	{% endif %}
	
	M140 {% for p in params
	%}{'%s%s' % (p, params[p])}{%
	endfor %}
	
	{% if S != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}
	{% endif %}
	
	
	{% if S >= THRESHOLD %}
	BEDFANSFAST
	{% endif %}

[gcode_macro M140]
rename_existing = M99140
gcode = 
	
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}

[gcode_macro TURN_OFF_HEATERS]
rename_existing = _TURN_OFF_HEATERS
gcode = 
	BEDFANSOFF
	_TURN_OFF_HEATERS

[delayed_gcode bedfanloop]
gcode = 
	
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}
	{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
	BEDFANSFAST
	{% else %}
	UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5
	{% endif %}
	{% endif %}

[neopixel sb_leds]
pin = EBBCan:PD3
chain_count = 3
color_order = GRB
initial_red = 1.0
initial_green = 1.0
initial_blue = 1.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	
	'busy': {'r': 0.5, 'g': 0.5, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	
	'on': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},
	'standby': {'r': 1.0, 'g': 1.0, 'b': 1.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro LIGHTS_100]
gcode = 
	SET_PIN PIN=caselight VALUE=100

[gcode_macro LIGHTS_50]
gcode = 
	SET_PIN PIN=caselight VALUE=50

[gcode_macro LIGHTS_OFF]
gcode = 
	SET_PIN PIN=caselight VALUE=0

[gcode_macro LED_ALL_RED]
gcode = 
	SET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1

[gcode_macro LED_ALL_BLUE]
gcode = 
	SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1

[gcode_macro LED_ALL_GREEN]
gcode = 
	SET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1

[gcode_macro LED_ALL_WHITE]
gcode = 
	SET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1 TRANSMIT=1

[gcode_macro BLINKING_LEDS]
gcode = 
	SET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1
	G4 P50
	SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1
	G4 P50

[adxl345]
cs_pin = EBBCan: PB12
spi_software_sclk_pin = EBBCan: PB10
spi_software_mosi_pin = EBBCan: PB11
spi_software_miso_pin = EBBCan: PB2
axes_map = x,y,z

[lis2dw]
cs_pin = cartographer:PA3
spi_bus = spi1

[resonance_tester]
accel_chip = adxl345
probe_points = 
	175,175,20

[input_shaper]
shaper_freq_x = 60.8
shaper_type_x = ei
shaper_freq_y = 36.2
shaper_type_y = mzv

[mcu EBBCan]
canbus_uuid = 18d261870712

[mcu]
serial = /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00

[mcu z]
serial = /dev/serial/by-id/usb-Klipper_lpc1768_0B90FF07881C4AAF197D685DC72000F5-if00

[printer]
kinematics = corexy
max_velocity = 900
max_accel = 3500
max_z_velocity = 50
max_z_accel = 1500
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[output_pin caselight ]
pin = z:P2.5
pwm = true
shutdown_value = 0
value = 50
cycle_time = 0.01
scale = 100

[temperature_sensor chamber]
sensor_type = Generic 3950
sensor_pin = P0.23
min_temp = 5
max_temp = 80
gcode_id = C

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[exclude_object]

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	325,305
	325,5
	25,5
	25,305
speed = 1000
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[bed_mesh]
algorithm = bicubic
speed = 1000
horizontal_move_z = 5
probe_count = 9,9
fade_start = 0.6
fade_end = 10.0
mesh_min = 40, 40
mesh_max = 310,310
adaptive_margin = 5
zero_reference_position = 175,175

[gcode_macro DATA_SAMPLE]
gcode = 
	G90
	M106 S255
	RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
	M117 Waiting for Coil to cool to 40
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
	RESPOND TYPE=command MSG='Starting Phase 1 of 4'
	M117 Starting Phase 1 of 4
	M106 S0
	G28
	G0 Z1
	M104 S250
	M140 S110
	G4 P1000
	CARTOGRAPHER_STREAM FILENAME=data1
	M117 Waiting for Coil to heat to 70
	RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
	CARTOGRAPHER_STREAM FILENAME=data1
	M104 S0
	M140 S0
	M106 S255
	G0 Z80
	RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
	M117 Waiting for Coil to cool to 40
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
	M117 Starting Phase 2 of 4
	RESPOND TYPE=command MSG='Starting Phase 2 of 4'
	M106 S0
	G28 Z0
	G0 Z2
	M104 S250
	M140 S110
	G4 P1000
	CARTOGRAPHER_STREAM FILENAME=data2
	M117 Waiting for Coil to heat to 70
	RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
	CARTOGRAPHER_STREAM FILENAME=data2
	M104 S0
	M140 S0
	M106 S255
	G0 Z80
	RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
	M117 Waiting for Coil to cool to 40
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
	M117 "Starting Phase 3 of 4"
	RESPOND TYPE=command MSG='Starting Phase 3 of 4'
	M106 S0
	G28 Z0
	G0 Z3
	M104 S250
	M140 S110
	G4 P1000
	CARTOGRAPHER_STREAM FILENAME=data3
	M117 Waiting for Coil to heat to 70
	RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
	CARTOGRAPHER_STREAM FILENAME=data3
	M104 S0
	M140 S0
	M106 S255
	G0 Z80
	M117 Waiting for Coil to cool to 40
	RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
	M117 "Starting Phase 4 of 4"
	RESPOND TYPE=command MSG='Starting Phase 4 of 4'
	M106 S0
	G28 Z0
	G0 Z5
	M104 S250
	M140 S110
	G4 P1000
	CARTOGRAPHER_STREAM FILENAME=data4
	M117 Waiting for Coil to heat to 70
	RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
	TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
	CARTOGRAPHER_STREAM FILENAME=data4
	M104 S0
	M140 S0
	RESPOND TYPE=command MSG='Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/'
	M117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"
	RESPOND TYPE=command MSG='Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta'
	M117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"

[bed_mesh default]
version = 1
points = 
	0.019116, 0.004968, -0.023674
	0.007393, 0.000000, -0.025204
	0.022538, 0.016209, -0.005839
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 150.237
max_x = 199.836
min_y = 150.228
max_y = 199.828

[cartographer model default]
model_coef = 1.4711812019653276,
	1.9094745664628197,
	0.7622228301595559,
	0.3272285810884628,
	0.35005214332292356,
	0.3321280355049826,
	-0.2625227207315976,
	-0.2864279763879038,
	0.22967673647312103,
	0.16966370873812742
model_domain = 3.247181162459674e-07,3.333975001478977e-07
model_range = 0.100000,5.000000
model_temp = 26.797560
model_offset = 0.10500

[cartographer model FlatSingle-Cold]
model_coef = 1.4711812019653276,
	1.9094745664628197,
	0.7622228301595559,
	0.3272285810884628,
	0.35005214332292356,
	0.3321280355049826,
	-0.2625227207315976,
	-0.2864279763879038,
	0.22967673647312103,
	0.16966370873812742
model_domain = 3.247181162459674e-07,3.333975001478977e-07
model_range = 0.100000,5.000000
model_temp = 26.797560
model_offset = -0.03000

[cartographer model StructSingle-Cold]
model_coef = 1.3518075164383603,
	1.7863674140091501,
	0.7491022161421897,
	0.3418034486422346,
	0.474786021574374,
	0.466327567527803,
	-0.36077266680925035,
	-0.4233856645228799,
	0.3341420760703143,
	0.2789694162262722
model_domain = 3.1806767070840717e-07,3.3272009864110665e-07
model_range = 0.100000,5.000000
model_temp = 27.516956
model_offset = -0.10500

[cartographer model StrucktDbl-Cold]
model_coef = 1.4539724547957718,
	1.890512457294597,
	0.7738465232272026,
	0.35584469223771087,
	0.3058002859398506,
	0.2538645469905682,
	-0.15927877633630289,
	-0.15992801513549426,
	0.17525677096686262,
	0.11070473232515006
model_domain = 3.239643669724778e-07,3.332857136863782e-07
model_range = 0.100000,5.000000
model_temp = 27.161944
model_offset = 0.21500

[cartographer model DiamondDbl-Cold]
model_coef = 1.46311906240812,
	1.9097451316039786,
	0.7860367034010269,
	0.2979412543104158,
	0.25188048441647043,
	0.42375248063163695,
	-0.09331589610001519,
	-0.39478873981561685,
	0.1425927310786974,
	0.21482543483049402
model_domain = 3.2466691052783215e-07,3.3339049405392883e-07
model_range = 0.100000,5.000000
model_temp = 26.966772
model_offset = -0.07500
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
webhooks client 547821969040: New connection
webhooks client 547821969040: Client info {'program': 'Moonraker', 'version': 'v0.8.0-325-g99b97af'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_lpc1768_1B500012A1086EAF264BDC5EC42000F5-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 791, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
            ^^^^^^^^^^^
  File "/home/pi/klipper/klippy/mcu.py", line 796, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1451): Mon Apr  8 23:14:54 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
CONFIG_MACH_LPC176X=y
# CONFIG_MACH_STM32 is not set
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="lpc176x"
CONFIG_MCU="lpc1768"
CONFIG_CLOCK_FREQ=100000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x80000
CONFIG_FLASH_BOOT_ADDRESS=0x0
CONFIG_RAM_START=0x10000000
CONFIG_RAM_SIZE=0x7fe0
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x4000
CONFIG_LPC_SELECT=y
CONFIG_MACH_LPC1768=y
# CONFIG_MACH_LPC1769 is not set
CONFIG_LPC_FLASH_START_4000=y
# CONFIG_LPC_FLASH_START_0000 is not set
CONFIG_LPC_USB=y
# CONFIG_LPC_SERIAL_UART0_P03_P02 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7412): Mon Apr  8 23:15:06 2024
Last MCU build version: v0.12.0-143-g01c7befa
Last MCU build tools: gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.40-2+18+b1) 2.40
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0=P0.28,P0.27 BUS_PINS_i2c1=P0.1,P0.0 BUS_PINS_i2c1a=P0.20,P0.19 BUS_PINS_i2c2=P0.11,P0.10 BUS_PINS_ssp0=P0.17,P0.18,P0.15 BUS_PINS_ssp1=P0.8,P0.9,P0.7 CLOCK_FREQ=100000000 MCU=lpc1768 PWM_MAX=255 RESERVE_PINS_USB=P0.30,P0.29,P2.9 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(553016): Mon Apr  8 23:15:10 2024
